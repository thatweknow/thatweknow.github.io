<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql从入门到吊打面试官</title>
      <link href="/2024/11/02/mysql-cong-ru-men-dao-diao-da-mian-shi-guan/"/>
      <url>/2024/11/02/mysql-cong-ru-men-dao-diao-da-mian-shi-guan/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql知识点总结"><a href="#Mysql知识点总结" class="headerlink" title="Mysql知识点总结"></a>Mysql知识点总结</h1><h2 id="1、undo、redolog"><a href="#1、undo、redolog" class="headerlink" title="1、undo、redolog"></a>1、undo、redolog</h2><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241102021356_e38a567b-31eb-400e-8966-483dcdf33a97.png" alt="Untitled"></p><p>截至目前，我们应该都熟悉了 MySQL 的执行器调用存储引擎是怎么将一条 SQL 加载到缓冲池和记录哪些日志的，流程如下：</p><ul><li>准备更新一条 SQL 语句</li><li>MySQL（innodb）会先去缓冲池（BufferPool）中去查找这条数据，没找到就会去磁盘中查找，如果查找到就会将这条数据加载到缓冲池（BufferPool）中</li><li>在加载到 Buffer Pool 的同时，会将这条数据的原始记录保存到 undo 日志文件中</li><li>innodb 会在 Buffer Pool 中执行更新操作</li><li>更新后的数据会记录在 redo log buffer 中</li></ul><p>上面说的步骤都是在正常情况下的操作，但是程序的设计和优化并不仅是为了这些正常情况而去做的，也是为了<strong>那些临界区和极端情况下出现的问题去优化</strong>设计的</p><p>这个时候如果服务器宕机了，那么缓存中的数据还是丢失了。真烦，竟然数据总是丢失，那能不能不要放在内存中，直接保存到磁盘呢？很显然不行，因为在上面也已经介绍了，在内存中的操作目的是为了提高效率。</p><p>此时，如果 MySQL 真的宕机了，那么没关系的，因为 MySQL 会认为本次事务是失败的，所以数据依旧是更新前的样子，并不会有任何的影响。</p><p>好了，语句也更新好了那么需要将更新的值提交啊，也就是需要提交本次的事务了，因为只要事务成功提交了，才会将最后的变更保存到数据库，在提交事务前仍然会具有相关的其他操作</p><p>将 redo Log Buffer 中的数据持久化到磁盘中，就是将 redo log buffer 中的数据写入到 redo log 磁盘文件中，一般情况下，redo log Buffer 数据写入磁盘的策略是立即刷入磁盘（具体策略情况在下面小总结出会详细介绍）,上图</p><p>如果 redo log Buffer 刷入磁盘后，数据库服务器宕机了，那我们更新的数据怎么办？此时数据是在内存中，数据岂不是丢失了？不，这次数据就不会丢失了，因为 redo log buffer 中的数据已经被写入到磁盘了，已经被持久化了，就算数据库宕机了，在下次重启的时候 MySQL 也会将 redo 日志文件内容恢复到 Buffer Pool 中（这边我的理解是和 Redis 的持久化机制是差不多的，在 Redis 启动的时候会检查 rdb 或者是 aof 或者是两者都检查，根据持久化的文件来将数据恢复到内存中）</p><p>到此为止，<strong>从执行器开始调用存储引擎接口做了哪些事情呢</strong>？</p><ul><li>准备更新一条 SQL 语句</li><li>MySQL（innodb）会先去缓冲池（BufferPool）中去查找这条数据，没找到就会去磁盘中查找，如果查找到就会将这条数据加载到缓冲池（BufferPool）中</li><li>在加载到 Buffer Pool 的同时，会将这条数据的原始记录保存到 undo 日志文件中</li><li>innodb 会在 Buffer Pool 中执行更新操作</li><li>更新后的数据会记录在 redo log buffer 中</li><li>MySQL 提交事务的时候，会将 redo log buffer 中的数据写入到 redo 日志文件中 刷磁盘可以通过 innodb_flush_log_at_trx_commit 参数来设置<ul><li>值为 0 表示不刷入磁盘</li><li>值为 1 表示立即刷入磁盘</li><li>值为 2 表示先刷到 os cache</li></ul></li><li>myslq 重启的时候会将 redo 日志恢复到缓冲池中</li></ul><p>截止到目前位置，MySQL 的执行器调用存储引擎的接口去执行【执行计划】提供的 SQL 的时候 InnoDB 做了哪些事情也就基本差不多了，但是这还没完。下面还需要介绍下 MySQL 级别的日志文件 bin log。</p><p>如果在数据被写入到bin log文件的时候，刚写完，数据库宕机了，数据会丢失吗？</p><p>首先可以确定的是，只要redo log最后没有 commit 标记，说明本次的事务一定是失败的。但是数据是没有丢失了，因为已经被记录到redo log的磁盘文件中了。在 MySQL 重启的时候，就会将 redo log 中的数据恢复（加载）到Buffer Pool中。</p><p>好了，到目前为止，一个更新操作我们基本介绍得差不多，但是你有没有感觉少了哪件事情还没有做？是不是你也发现这个时候被更新记录仅仅是在内存中执行的，哪怕是宕机又恢复了也仅仅是将更新后的记录加载到Buffer Pool中，这个时候 MySQL 数据库中的这条记录依旧是旧值，也就是说内存中的数据在我们看来依旧是脏数据，那这个时候怎么办呢？</p><p>其实 MySQL 会有一个后台线程，它会在某个时机将我们Buffer Pool中的脏数据刷到 MySQL 数据库中，这样就将内存和数据库的数据保持统一了。</p><h2 id="2、flush链表、free链表、lru链表"><a href="#2、flush链表、free链表、lru链表" class="headerlink" title="2、flush链表、free链表、lru链表"></a>2、flush链表、free链表、lru链表</h2><p>db刚启动的时候lru是空的，全都是free链表，然后从磁盘读取数据页加入到lru链表，如果有free链表就直接把free加入lru， 如果没有free的链表，就从lru的尾指针淘汰数据页，在冷数据区的开头处新增节点。</p><p>冷数据1&#x2F;3起始处， 默认冷数据37%。  为了防止预读机制，全表扫描。把过多的热数据直接排除内存。mysql设定了一个参数innodb_old_blocks_time参数 默认1s，在1s之后访问这个缓存页才会挪动到热数据区域的链表头。</p><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241102021402_614a6bc0-f686-4e9b-b1cd-599489b15b20.png" alt="Untitled"></p><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241102021406_06693e63-ba91-466f-865e-5e8c439e061c.png" alt="Untitled"></p><p>flush链表是管理内存中有修改的需要刷盘的脏数据。在LRU列表中的页被修改后，称该页为脏页（dirty page），即缓冲池中的页和磁盘上的页的数据产生了不一致。这时数据库会通过CHECKPOINT机制将脏页刷新回磁盘，而Flush列表中的页即为脏页列表。需要注意的是，脏页既存在于LRU列表中，也存在于Flush列表中。LRU列表用来管理缓冲池中页的可用性，Flush列表用来管理将页刷新回磁盘，二者互不影响。</p><h2 id="3、binlog"><a href="#3、binlog" class="headerlink" title="3、binlog"></a>3、binlog</h2><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241102021409_579641d5-43fe-46fd-9817-4e425022b8d3.png" alt="Untitled"></p><p><code>binlog_format</code>是一个非常重要的参数，决定了记录二进制日志的格式：</p><p>可选值有：</p><ul><li><strong>STATEMENT</strong></li></ul><p>记录SQL语句。日志文件小，节约IO，但是对一些系统函数不能准确复制或不能复制，如now()、uuid()等。</p><p>5.7.7之前日志默认格式是STATEMENT。</p><ul><li><strong>ROW</strong></li></ul><p>记录表的行更改情况，可以为数据库的恢复、复制带来更好的可靠性，但是二进制文件的大小相较于STATEMENT会有所增加。</p><p>Mysql8日志默认格式是ROW。</p><p>注意:如果用canal做数据同步ROW格式是必须的</p><p><a href="https://github.com/alibaba/canal/wiki/QuickStart">https://github.com/alibaba/canal/wiki/QuickStart</a></p><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241102021413_da6fd823-b425-463b-8fa8-2fe3599930b7.png" alt="Untitled"></p><ul><li><strong>MIXED</strong></li></ul><p>STATEMENT和ROW模式的混合。默认采用STATEMENT格式进行二进制日志文件的记录，但是在一些情况下会使用ROW格式。</p><p>业内目前推荐使用的是ROW模式，准确性高，虽然说文件大，但是现在有SSD和万兆光纤网络，这些磁盘IO和网络IO都是可以接受的。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">binary</span> logs <span class="token comment">--或者show master logs命令查看二进制日志的文件列表</span><span class="token keyword">show</span> binlog events <span class="token operator">in</span> <span class="token string">'mysql-bin.000116'</span> <span class="token comment">-- 命令查看binlog的事件列表，我们看最新也就是最后一个binlog文件mysql-bin.000116</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241102021417_15fd0bf3-e438-4550-a44e-d7a0e3606e02.png" alt="Untitled"></p><h2 id="4、mysql架构"><a href="#4、mysql架构" class="headerlink" title="4、mysql架构"></a>4、mysql架构</h2><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241102021421_7e799850-4f5c-4527-ae12-05436caf28bd.png" alt="Untitled"></p><p>1、</p><p>WAL的全称是Write-Ahead Logging预写日志，对于mysql就是先写日志，后写磁盘。</p><p>写磁盘慢，写日志快，写完日志系统不忙的时候再写磁盘。和我们代码review的时候，会上先记录问题，会下再改代码是一个意思。 [因为可能一个事务需要修改多张表多条记录，每个记录在不同的数据页中，一次事务提交多次随机寻址 对IO的压力太大，就在内存里面提交事务，然后有个后台线程定时异步更新磁盘。][内存操作数据+Write-Ahead Log的这种思想非常普遍,  LSM树的时候，还会再次提到这个思想。在多备份一致性中，复制状态机的模型也是基于此]</p><p>在InnoDB中，不光事务修改的数据库表数据是异步刷盘的，连Redo Log的写入本身也是异步的, 通过innodb_flush_log_at_trx_commit参数控制redo log刷盘的策略。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">0</span>：每秒刷一次磁盘，把Redo Log Buffer中的数据刷到Redo Log （默认为<span class="token number">0</span>）。<span class="token number">1</span>：每提交一个事务，就刷一次磁盘（这个最安全）。<span class="token number">2</span>：不刷盘。然后根据参数innodb_flush_log_at_timeout设置的值决定刷盘频率。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>很显然，该参数设置为0或者2都可能丢失数据。设置为1最安全，但性能最差。InnoDB设置此参数，也是为了让应用在数据安全性和性能之间做一个权衡。</p><p><a href="https://blog.csdn.net/u010711495/article/details/118453965">https://blog.csdn.net/u010711495/article/details/118453965</a></p><p>2、</p><p>CrashSafe指MySQL服务器宕机重启后，能够保证：</p><p>所有已经提交的事务的数据仍然存在。</p><p>所有没有提交的事务的数据自动回滚。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">## 1.什么是redolog</span><span class="token comment">## 2.为什么需要redolog</span><span class="token comment">## 3.什么是两阶段提交</span><span class="token comment">## 4.redolog和binlog区别</span><span class="token comment"># 三、undolog</span><span class="token comment"># 四、主从复制</span><span class="token punctuation">[</span><span class="token number">24</span>讲MySQL是怎么保证主备一致的<span class="token punctuation">.</span>html<span class="token punctuation">]</span><span class="token punctuation">(</span>http:<span class="token comment">//ydwiki.yidian-inc.com/download/attachments/109948320/24%E8%AE%B2MySQL%E6%98%AF%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E4%B8%BB%E5%A4%87%E4%B8%80%E8%87%B4%E7%9A%84.html?version=1&amp;modificationDate=1686035896000&amp;api=v2)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="Mysql%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%20005ca05415bc4ef18b20b3f0843fd091/24%25E8%25AE%25B2MySQL%25E6%2598%25AF%25E6%2580%258E%25E4%25B9%2588%25E4%25BF%259D%25E8%25AF%2581%25E4%25B8%25BB%25E5%25A4%2587%25E4%25B8%2580%25E8%2587%25B4%25E7%259A%2584.html">24讲MySQL是怎么保证主备一致的.html</a></p><h2 id="5、SQL解析器和优化器及执行"><a href="#5、SQL解析器和优化器及执行" class="headerlink" title="5、SQL解析器和优化器及执行"></a>5、<strong>SQL解析器和优化器及执行</strong></h2><p>SQL解析器、优化器和执行引擎是数据库管理系统（DBMS）中的关键组件，它们共同工作以处理和执行SQL查询。下面是这三个组件的简要说明：</p><h3 id="SQL解析器（Parser）："><a href="#SQL解析器（Parser）：" class="headerlink" title="SQL解析器（Parser）："></a><strong>SQL解析器（Parser）：</strong></h3><p>SQL解析器负责将用户输入的SQL查询转换为内部数据结构，通常称为解析树或查询树。解析器执行以下主要任务：</p><p>a. 语法分析：检查SQL查询是否遵循正确的语法规则。将SQL语句转换为一系列词法单元，例如关键字、标识符、运算符和常量等。</p><p>SQL解析器进行词法分析的过程通常如下：</p><ol><li>读取SQL语句中的字符流。</li><li>逐个字符地处理字符流，将其转换成一个个词法单元。</li><li>识别关键字、标识符、运算符和常量等词法单元，并将它们分类。</li><li>对于标识符，还需要进行一些额外的处理，例如检查是否为表名或列名等。</li><li>将处理后的词法单元组成一个有序的词法单元序列，供语法分析器进一步处理。</li></ol><p>SQL解析器通常会使用正则表达式、有限状态自动机等技术来进行词法分析。</p><p>b. 语义分析：验证查询中引用的表、列和其他对象是否存在，并检查用户是否具有执行查询所需的权限。</p><p>c. 构建查询树：将SQL查询转换为内部数据结构，以便进行进一步处理。</p><h3 id="SQL优化器（Optimizer）："><a href="#SQL优化器（Optimizer）：" class="headerlink" title="SQL优化器（Optimizer）："></a><strong>SQL优化器（Optimizer）：</strong></h3><p>SQL优化器负责找到执行给定查询的最有效方法，即选择最佳的执行计划。优化器考虑多种可能的执行计划，并基于成本模型、索引、表的统计信息和其他因素选择一个计划。</p><p>SQL解析器进行优化器处理的过程通常如下：</p><ol><li>生成语法树后，优化器会对SQL语句进行分析，确定最佳的执行计划。</li><li>优化器会根据查询条件、索引、表大小等因素选择最优的执行计划。</li><li>优化器会尝试使用索引来加速查询，如果没有合适的索引，则会考虑创建新的索引。</li><li>优化器还会考虑使用连接方式、子查询、分组、排序等技术来优化查询效率。</li><li>最终，优化器会生成一个执行计划，该执行计划是一个有序的操作序列，用于执行SQL查询并返回结果。</li></ol><p>SQL解析器通常会使用代价估算模型、统计信息等技术来进行优化器处理。</p><p>主要任务包括：</p><p>a. 查询重写：对查询进行变换，以便更有效地执行。例如，消除子查询，将它们转换为连接操作。</p><p>b. 选择访问路径：确定访问表和索引的最佳方法。</p><p>c. 连接顺序和方法：确定连接表的顺序和使用的连接算法（如嵌套循环连接、散列连接或合并连接）。</p><h3 id="SQL执行引擎（Execution-Engine）："><a href="#SQL执行引擎（Execution-Engine）：" class="headerlink" title="SQL执行引擎（Execution Engine）："></a><strong>SQL执行引擎（Execution Engine）：</strong></h3><p>SQL执行引擎是SQL查询的核心组件，它负责将解析器生成的查询计划转换为可以在计算机上执行的指令。SQL执行引擎还负责查询优化，以便在最短时间内返回结果。在执行查询时，SQL执行引擎会读取数据存储，并将结果返回给用户。</p><p>SQL执行引擎负责根据优化器选择的执行计划实际执行查询。执行引擎处理以下任务：</p><p>a. 执行操作：按照执行计划中的操作顺序（如扫描表、过滤行、连接表等）执行查询。</p><p>b. 内存管理：分配和管理查询执行过程中所需的内存资源。</p><p>c. 并发控制：协调多个并发查询之间的资源共享，确保数据的一致性和隔离性。</p><p>这三个组件共同确保数据库能够高效、准确地处理和执行用户提交的SQL查询。</p><p>sql（结构化查询语言）的详细执行过程，SQL是一种用于管理关系型数据库的语言。在执行SQL查询时，数据库管理系统（DBMS）会按照以下步骤进行：</p><ol><li><p>语法分析：DBMS会检查查询语句是否符合SQL语法规范。</p></li><li><p>语义分析：DBMS会检查查询语句是否符合数据库中表和列的定义，并进行必要的类型转换。</p></li><li><p>查询优化：DBMS会根据查询的复杂度和表之间的关系来决定最优的查询方式，以提高查询效率。</p></li><li><p>执行计划生成：DBMS会生成一个执行计划，该计划包括了查询的具体执行步骤，如何访问表和使用索引等。</p></li><li><p>执行查询：DBMS会按照执行计划中定义的步骤执行查询，并返回结果集。</p></li></ol><p>其中，查询优化和执行计划生成是SQL执行过程中最重要的步骤之一。在查询优化中，DBMS使用各种算法和技术来确定最佳查询方式，例如索引、连接类型、排序等。在执行计划生成中，DBMS会根据查询优化的结果生成一组指令，这些指令将被用于实际执行查询。</p><h2 id="6、四大特性"><a href="#6、四大特性" class="headerlink" title="6、四大特性"></a>6、四大特性</h2><h2 id="7、隔离级别"><a href="#7、隔离级别" class="headerlink" title="7、隔离级别"></a>7、隔离级别</h2><h2 id="9、NDB有空了解一下"><a href="#9、NDB有空了解一下" class="headerlink" title="9、NDB有空了解一下"></a>9、NDB有空了解一下</h2><p><a href="https://www.notion.so/sharding-jdbc-7bf61b4aa8b64f9f89088ea631e9236b?pvs=21">sharding-jdbc</a></p><p><a href="https://www.notion.so/mysql-20b289266bc64a128aade9489fca67a2?pvs=21">mysql事务</a></p>]]></content>
      
      
      <categories>
          
          <category> common </category>
          
      </categories>
      
      
        <tags>
            
            <tag> common </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式组件原理之熔断、限流组件实现</title>
      <link href="/2024/11/01/fen-bu-shi-zu-jian-yuan-li-zhi-rong-duan-xian-liu-zu-jian-shi-xian/"/>
      <url>/2024/11/01/fen-bu-shi-zu-jian-yuan-li-zhi-rong-duan-xian-liu-zu-jian-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="熔断、限流组件实现"><a href="#熔断、限流组件实现" class="headerlink" title="熔断、限流组件实现"></a>熔断、限流组件实现</h1><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101201645_7fdcdf81-f8c6-4d60-8fd4-0b96c5e924c9.png" alt="Untitled"></p><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101201651_6869346e-6cf6-4ce7-b38c-34bb058fc446.png" alt="Untitled"></p><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101201657_5ece0f89-55a3-41ff-90f8-822feb42da4c.png" alt="Untitled"></p><p>通过时间获取当前bucket 并更新  核心代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//  文件/sentinel-golang/core/stat/base/leap_array.go  </span><span class="token comment">//  func currentBucketOfTime</span><span class="token keyword">func</span> <span class="token punctuation">(</span>la <span class="token operator">*</span>LeapArray<span class="token punctuation">)</span> <span class="token function">currentBucketOfTime</span><span class="token punctuation">(</span>now <span class="token builtin">uint64</span><span class="token punctuation">,</span> bg BucketGenerator<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>BucketWrap<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 计算当前时间对应的窗口下标</span>   idx <span class="token operator">:=</span> la<span class="token punctuation">.</span><span class="token function">calculateTimeIdx</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>   <span class="token comment">// 计算当前时间对应的窗口的开始时间</span>   bucketStart <span class="token operator">:=</span> <span class="token function">calculateStartTime</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> la<span class="token punctuation">.</span>bucketLengthInMs<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 获取旧窗口</span>      old <span class="token operator">:=</span> la<span class="token punctuation">.</span>array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>      <span class="token comment">// 如果旧窗口==nil则初始化(正常不会执行这部分代码)</span>      <span class="token keyword">if</span> old <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>         newWrap <span class="token operator">:=</span> <span class="token operator">&amp;</span>BucketWrap<span class="token punctuation">&#123;</span>            BucketStart<span class="token punctuation">:</span> bucketStart<span class="token punctuation">,</span>            Value<span class="token punctuation">:</span>       atomic<span class="token punctuation">.</span>Value<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#125;</span>         newWrap<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>bg<span class="token punctuation">.</span><span class="token function">NewEmptyBucket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> la<span class="token punctuation">.</span>array<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> newWrap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> newWrap<span class="token punctuation">,</span> <span class="token boolean">nil</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            runtime<span class="token punctuation">.</span><span class="token function">Gosched</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">&#125;</span>      <span class="token comment">// 如果本次计算的开始时间等于旧窗口的开始时间，则认为窗口没有过期，直接返回</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> bucketStart <span class="token operator">==</span> atomic<span class="token punctuation">.</span><span class="token function">LoadUint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>old<span class="token punctuation">.</span>BucketStart<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> old<span class="token punctuation">,</span> <span class="token boolean">nil</span>      <span class="token comment">//  如果本次计算的开始时间大于旧窗口的开始时间，则认为窗口过期尝试重置</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> bucketStart <span class="token operator">></span> atomic<span class="token punctuation">.</span><span class="token function">LoadUint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>old<span class="token punctuation">.</span>BucketStart<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> la<span class="token punctuation">.</span>updateLock<span class="token punctuation">.</span><span class="token function">TryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            old <span class="token operator">=</span> bg<span class="token punctuation">.</span><span class="token function">ResetBucketTo</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> bucketStart<span class="token punctuation">)</span>            la<span class="token punctuation">.</span>updateLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> old<span class="token punctuation">,</span> <span class="token boolean">nil</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            runtime<span class="token punctuation">.</span><span class="token function">Gosched</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">&#125;</span>        <span class="token operator">...</span><span class="token operator">...</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Sentienl Go 中实现底层指标本质是通过“时间轮”进行指标的数据统计和存储，在时间轮中借鉴slice的底层实现利用unsafe.Pointer和atomic配合对时间轮进行无锁的原子操作，极大的提升了性能。</p><h1 id="Sentinel限流"><a href="#Sentinel限流" class="headerlink" title="Sentinel限流"></a>Sentinel限流</h1><h2 id="核心流控参数介绍"><a href="#核心流控参数介绍" class="headerlink" title="核心流控参数介绍"></a>核心流控参数介绍</h2><hr><pre class="line-numbers language-go" data-language="go"><code class="language-go">Resource<span class="token punctuation">:</span>               <span class="token string">"POST:/group/inner/v1/group/create"</span><span class="token punctuation">,</span>  <span class="token comment">//资源名</span>TokenCalculateStrategy<span class="token punctuation">:</span> flow<span class="token punctuation">.</span>Direct<span class="token punctuation">,</span>       <span class="token comment">//当前流量控制器的Token计算策略。Direct表示直接使用字段 Threshold 作为阈值；WarmUp表示使用预热方式计算Token的阈值。</span>ControlBehavior<span class="token punctuation">:</span>        flow<span class="token punctuation">.</span>Reject<span class="token punctuation">,</span>   <span class="token comment">//表示流量控制器的控制策略；Reject表示超过阈值直接拒绝，Throttling表示匀速排队。</span>Threshold<span class="token punctuation">:</span>              commonThreshold<span class="token punctuation">,</span>   <span class="token comment">//表示流控阈值</span>StatIntervalInMs<span class="token punctuation">:</span>       statIntervalInMs<span class="token punctuation">,</span>  <span class="token comment">// 规则对应的流量控制器的独立统计结构的统计周期</span>MaxQueueingTimeMs<span class="token punctuation">:</span>      maxQueueingTimeMs<span class="token punctuation">,</span> <span class="token comment">//    匀速排队的最大等待时间，该字段仅仅对 Throttling ControlBehavior生效；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当流量非均匀 波动时候 选择匀速排队的方式 实现流控和类似消息队列的削峰的功能 对应的是漏桶算法</li><li>流控周期应适当 防止脉冲流量 击溃服务</li><li>因此尽量采用 匀速排队的控制策略，平滑掉流量</li></ul><p><strong>流控使用实例</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">gin 路由请求流控  <span class="token comment">//添加流控规则</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> flow<span class="token punctuation">.</span><span class="token function">LoadRules</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>flow<span class="token punctuation">.</span>Rule<span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span>            Resource<span class="token punctuation">:</span>               resName<span class="token punctuation">,</span>            TokenCalculateStrategy<span class="token punctuation">:</span> flow<span class="token punctuation">.</span>Direct<span class="token punctuation">,</span>            ControlBehavior<span class="token punctuation">:</span>        flow<span class="token punctuation">.</span>Reject<span class="token punctuation">,</span>            Threshold<span class="token punctuation">:</span>              <span class="token number">10</span><span class="token punctuation">,</span>            StatIntervalInMs<span class="token punctuation">:</span>       <span class="token number">1000</span><span class="token punctuation">,</span>            MaxQueueingTimeMs<span class="token punctuation">:</span>      <span class="token number">1000</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 添加触发流控时要执行的代码</span>limiterBlockFallback <span class="token operator">:=</span> sentinelPlugin<span class="token punctuation">.</span><span class="token function">WithBlockFallback</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ctx<span class="token punctuation">.</span><span class="token function">AbortWithStatusJSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> stdout<span class="token punctuation">.</span><span class="token function">NewStdResp</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"超过流量限制啦！！！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//路由应用中间件</span>rg <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/group/inner"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>sentinelPlugin<span class="token punctuation">.</span><span class="token function">SentinelMiddleware</span><span class="token punctuation">(</span>limiterBlockFallback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rg<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/v1/group/create"</span><span class="token punctuation">,</span> transport<span class="token punctuation">.</span>CreateGroup<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        代码块流控  <span class="token comment">//添加流控规则</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> flow<span class="token punctuation">.</span><span class="token function">LoadRules</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>flow<span class="token punctuation">.</span>Rule<span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span>            Resource<span class="token punctuation">:</span>               resName<span class="token punctuation">,</span>            TokenCalculateStrategy<span class="token punctuation">:</span> flow<span class="token punctuation">.</span>Direct<span class="token punctuation">,</span>            ControlBehavior<span class="token punctuation">:</span>        flow<span class="token punctuation">.</span>Reject<span class="token punctuation">,</span>            Threshold<span class="token punctuation">:</span>              <span class="token number">10</span><span class="token punctuation">,</span>            StatIntervalInMs<span class="token punctuation">:</span>       <span class="token number">1000</span><span class="token punctuation">,</span>            MaxQueueingTimeMs<span class="token punctuation">:</span>      <span class="token number">1000</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 流控</span>e<span class="token punctuation">,</span> b <span class="token operator">:=</span> sentinel<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span><span class="token string">"some-test"</span><span class="token punctuation">,</span> sentinel<span class="token punctuation">.</span><span class="token function">WithTrafficType</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>Inbound<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> b <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>            atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>block<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Be sure the entry is exited finally.</span>            e<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>pass<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="系统自适应流控"><a href="#系统自适应流控" class="headerlink" title="系统自适应流控"></a>系统自适应流控</h2><ul><li>在实际场景中我们追求的目标是 <strong>在系统不被拖垮的情况下，提高系统的吞吐率，而不是 load 一定要到低于某个阈值</strong></li></ul><h3 id="代码引入"><a href="#代码引入" class="headerlink" title="代码引入"></a><strong>代码引入</strong></h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"github.com/alibaba/sentinel-golang/core/system"</span> <span class="token comment">// 自适应流控，启发因子为 load1 >= 8</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> system<span class="token punctuation">.</span><span class="token function">LoadRules</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>system<span class="token punctuation">.</span>SystemRule<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span>        MetricType<span class="token punctuation">:</span>system<span class="token punctuation">.</span>Load<span class="token punctuation">,</span>  <span class="token comment">//衡量标准</span>        TriggerCount<span class="token punctuation">:</span><span class="token number">8.0</span><span class="token punctuation">,</span>        <span class="token comment">//该维度下最大负载值 </span>        Strategy<span class="token punctuation">:</span>system<span class="token punctuation">.</span>BBR<span class="token punctuation">,</span>     <span class="token comment">//自适应策略 brr</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>几种模式：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">文件地址：core<span class="token operator">/</span>system<span class="token operator">/</span>slot<span class="token punctuation">.</span><span class="token keyword">go</span>  MetricType：衡量标准几种选项    <span class="token comment">// Load represents system load1 in Linux/Unix.</span>    Load MetricType <span class="token operator">=</span> <span class="token boolean">iota</span>    <span class="token comment">// AvgRT represents the average response time of all inbound requests.</span>    AvgRT    <span class="token comment">// Concurrency represents the concurrency of all inbound requests.</span>    Concurrency    <span class="token comment">// InboundQPS represents the QPS of all inbound requests.</span>    InboundQPS    <span class="token comment">// CpuUsage represents the CPU usage percentage of the system.</span>    CpuUsage     TriggerCount：上述衡量标准对应的最大限值  Strategy： BBR基于TCP BBR思想的控制策略   或者无策略    具体做限制片段的实现：  <span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>AdaptiveSlot<span class="token punctuation">)</span> <span class="token function">doCheckRule</span><span class="token punctuation">(</span>rule <span class="token operator">*</span>Rule<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> msg <span class="token builtin">string</span>      threshold <span class="token operator">:=</span> rule<span class="token punctuation">.</span>TriggerCount    <span class="token keyword">switch</span> rule<span class="token punctuation">.</span>MetricType <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> InboundQPS<span class="token punctuation">:</span>        qps <span class="token operator">:=</span> stat<span class="token punctuation">.</span><span class="token function">InboundNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetQPS</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>MetricEventPass<span class="token punctuation">)</span>        res <span class="token operator">:=</span> qps <span class="token operator">&lt;</span> threshold        <span class="token keyword">if</span> <span class="token operator">!</span>res <span class="token punctuation">&#123;</span>            msg <span class="token operator">=</span> <span class="token string">"system qps check blocked"</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> qps    <span class="token keyword">case</span> Concurrency<span class="token punctuation">:</span>        n <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>stat<span class="token punctuation">.</span><span class="token function">InboundNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CurrentConcurrency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res <span class="token operator">:=</span> n <span class="token operator">&lt;</span> threshold        <span class="token keyword">if</span> <span class="token operator">!</span>res <span class="token punctuation">&#123;</span>            msg <span class="token operator">=</span> <span class="token string">"system concurrency check blocked"</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> n    <span class="token keyword">case</span> AvgRT<span class="token punctuation">:</span>        rt <span class="token operator">:=</span> stat<span class="token punctuation">.</span><span class="token function">InboundNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AvgRT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">:=</span> rt <span class="token operator">&lt;</span> threshold        <span class="token keyword">if</span> <span class="token operator">!</span>res <span class="token punctuation">&#123;</span>            msg <span class="token operator">=</span> <span class="token string">"system avg rt check blocked"</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> rt    <span class="token keyword">case</span> Load<span class="token punctuation">:</span>        l <span class="token operator">:=</span> system_metric<span class="token punctuation">.</span><span class="token function">CurrentLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> l <span class="token operator">></span> threshold <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> rule<span class="token punctuation">.</span>Strategy <span class="token operator">!=</span> BBR <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">checkBbrSimple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                msg <span class="token operator">=</span> <span class="token string">"system load check blocked"</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> l            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> l    <span class="token keyword">case</span> CpuUsage<span class="token punctuation">:</span>        c <span class="token operator">:=</span> system_metric<span class="token punctuation">.</span><span class="token function">CurrentCpuUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> c <span class="token operator">></span> threshold <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> rule<span class="token punctuation">.</span>Strategy <span class="token operator">!=</span> BBR <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">checkBbrSimple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                msg <span class="token operator">=</span> <span class="token string">"system cpu usage check blocked"</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> c            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> c    <span class="token keyword">default</span><span class="token punctuation">:</span>        msg <span class="token operator">=</span> <span class="token string">"system undefined metric type, pass by default"</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token number">0.0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> common </category>
          
      </categories>
      
      
        <tags>
            
            <tag> common </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clickhouse最佳实践（一）：clickhouse千亿级日志系统单机到集群架构演进历程</title>
      <link href="/2024/10/07/clickhouse-zui-jia-shi-jian-yi-clickhouse-qian-yi-ji-ri-zhi-xi-tong-dan-ji-dao-ji-qun-jia-gou-yan-jin-li-cheng/"/>
      <url>/2024/10/07/clickhouse-zui-jia-shi-jian-yi-clickhouse-qian-yi-ji-ri-zhi-xi-tong-dan-ji-dao-ji-qun-jia-gou-yan-jin-li-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最佳实践系列文章持续完善中， 记录了业务系统从碰到瓶颈到迭代的过程</p></blockquote><h2 id="1-初始阶段：单机部署"><a href="#1-初始阶段：单机部署" class="headerlink" title="1. 初始阶段：单机部署"></a>1. 初始阶段：单机部署</h2><p>针对ClickHouse（以下简称CK）单机的优化过程，通常包括以下几个方面，以确保在非分布式环境中达到最佳性能：</p><p><strong>1). 硬件优化</strong></p><ul><li><p><strong>内存</strong>：尽可能多的内存对CK有帮助，因为它能缓存查询的数据块。确保有足够的内存，尤其是当数据量较大时。</p></li><li><p><strong>磁盘</strong>：优先选择SSD，以提高数据读取和写入速度。此外，CK对文件系统的选择敏感，通常推荐选择xfs或ext4。</p></li><li><p><strong>CPU</strong>：CK对CPU多核的支持良好，多核CPU能显著提高并发查询的处理能力。</p></li></ul><p><strong>2). 配置优化  【clickhouse最佳实践（二）：clickhouse单机性能优化】</strong></p><ul><li><p><strong>max_threads</strong>：根据实际CPU核数，调整max_threads，建议设置成与CPU核心数相同或稍高的值。</p></li><li><p><strong>max_block_size</strong>：增大max_block_size的值以提高查询的吞吐量，但如果内存有限则需适量调整。</p></li><li><p><strong>max_memory_usage</strong>：针对内存进行限制，防止因数据量过大导致内存溢出。可以通过设置max_memory_usage控制单次查询的最大内存使用。</p></li><li><p><strong>max_partitions_to_read</strong>：在分区读取时，控制最大可读分区数，从而避免数据量大的查询引起卡顿或过载。</p></li></ul><p><strong>3). 数据表结构优化  【clickhouse最佳实践（二）：clickhouse单机性能优化】</strong></p><ul><li><p><strong>列式存储</strong>：确保使用列式存储（CK默认），这种存储方式在数据量大的查询中能显著提高性能。</p></li><li><p><strong>分区设计</strong>：合理设计分区键（如按时间或业务逻辑），可以有效减少扫描的数据量，提高查询效率。</p></li><li><p><strong>主键和排序键</strong>：选择合适的主键和排序键，避免全表扫描。排序键能够帮助CK加快特定字段的查询速度。</p></li><li><p><strong>物化视图（Materialized Views）</strong>：对于频繁查询的聚合结果，可以使用物化视图，减少查询时间。</p></li></ul><p><strong>4). 数据管理和清理</strong></p><ul><li><p><strong>分区管理</strong>：定期清理旧分区（如按时间分区），以减少表数据量，避免无关数据对性能的影响。</p></li><li><p><strong>数据压缩</strong>：CK支持多种压缩算法，可以使用zstd或lz4提高数据存取效率。压缩可以显著减少磁盘占用和I&#x2F;O负载。</p></li></ul><p><strong>5). 查询优化【clickhouse最佳实践（二）：clickhouse单机性能优化- - -持续完善中】</strong></p><ul><li><p><strong>查询方式优化</strong>：尽量使用预聚合数据，避免复杂的实时计算，利用条件过滤减少数据读取量。</p></li><li><p><strong>设置查询超时</strong>：避免长时间运行的查询拖垮性能，比如可以限制查询的max_execution_time。</p></li><li><p><strong>避免低效函数和操作</strong>：避免对列数据频繁使用LIKE等低效操作，可以使用匹配表达式或正则替代。</p></li></ul><p><strong>6). 监控与调试【clickhouse最佳实践（二）：clickhouse单机性能优化- - -持续完善中】</strong></p><ul><li><p><strong>系统监控</strong>：使用ClickHouse自带的系统表如system.metrics，system.events，监控查询的资源占用情况。</p></li><li><p><strong>Profile分析</strong>：通过分析查询的Profile日志，找到瓶颈点，改进查询语句和表结构设计。</p></li></ul><p>CK单机优化需要结合具体的硬件资源和业务需求，定期监控和调整系统配置以达到最佳性能。</p><h2 id="2-使用代理层"><a href="#2-使用代理层" class="headerlink" title="2. 使用代理层"></a>2. 使用代理层</h2><ul><li><strong>搭建代理层</strong>：在原有单机的基础上添加一个代理层（如: Nginx 或 CkProxy【官方的ck代理】），用于后续的负载均衡。<strong>【<a href="https://blog.csdn.net/qq_42873554/article/details/143393243">nginx负载均衡策略</a>】</strong></li><li><strong>配置代理</strong>：在代理层上配置后端节点的负载均衡策略，以便未来的集群扩展。</li></ul><h2 id="3-集群设计"><a href="#3-集群设计" class="headerlink" title="3. 集群设计"></a>3. 集群设计</h2><p><strong>【<a href="https://blog.csdn.net/qq_42873554/article/details/143368665#3_clickhouse_119">集群规划方法论</a>】</strong><br><strong>【clickhouse最佳实践（三）：Clickhouse集群模式读写方案- - -持续完善中】</strong></p><ul><li><strong>节点配置</strong>：设计多个 ClickHouse 实例，每个实例运行在独立的机器上。</li><li><strong>Shard 和 Replica</strong>：根据业务需求设计合适的分片（Shard）和复制（Replica）策略，确保数据高可用。例如，可以设置 3 个 shard，每个 shard 3 个 replica。</li><li><strong>数据分配</strong>：考虑使用 <code>Repartition</code> 或者 <code>Distributed</code> 表引擎将数据均匀分配到不同的节点。</li></ul><h2 id="4-数据迁移"><a href="#4-数据迁移" class="headerlink" title="4. 数据迁移"></a>4. 数据迁移</h2><p><strong>【clickhouse最佳实践（四）：Clickhouse单机到集群模式数据迁移- - -持续完善中】</strong></p><blockquote><p>社区的一些迁移工具：clickhouse-copier 、<em>clickhouse</em>-mysql-data-reader</p></blockquote><ul><li><strong>迁移工具</strong>：使用 ClickHouse 的复制功能（如 <code>CREATE TABLE ... AS SELECT</code>）进行数据迁移。</li><li><strong>双写策略</strong>：在过渡期间实现双写策略，确保新数据可以在新集群中被写入。</li></ul><h2 id="5-监控和维护"><a href="#5-监控和维护" class="headerlink" title="5. 监控和维护"></a>5. 监控和维护</h2><blockquote><p>[运维维度优化、1中的监控主要是业务维度优化]</p></blockquote><ul><li><strong>监控提升</strong>：逐步升级监控系统，使用 Grafana 和 Prometheus 等工具监控集群状态和性能指标。</li><li><strong>调节参数</strong>：根据监控数据对 ClickHouse 的配置参数进行调整，优化查询性能。</li></ul><h2 id="6-集群横向扩展"><a href="#6-集群横向扩展" class="headerlink" title="6.集群横向扩展"></a>6.集群横向扩展</h2><p><strong>【clickhouse最佳实践（四）：Clickhouse单机到集群模式数据迁移- - -持续完善中】</strong></p><ul><li><strong>弹性扩展</strong>：根据业务负载和数据量的变化，灵活添加或移除节点，实现弹性扩展。</li><li><strong>高可用设计</strong>：实现故障转移（Failover）机制，以增强集群的稳定性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、golang原理篇---从源代码文件到可执行文件过程发生了哪些事情？.</title>
      <link href="/2024/10/07/yi-golang-yuan-li-pian-cong-yuan-dai-ma-wen-jian-dao-ke-zhi-xing-wen-jian-guo-cheng-fa-sheng-liao-na-xie-shi-qing/"/>
      <url>/2024/10/07/yi-golang-yuan-li-pian-cong-yuan-dai-ma-wen-jian-dao-ke-zhi-xing-wen-jian-guo-cheng-fa-sheng-liao-na-xie-shi-qing/</url>
      
        <content type="html"><![CDATA[<p>主要过程：</p><ul><li>前端编译<ol><li>根据架构初始化不同的链接器Link结构体</li><li>根据一些参数  比如，go compile后用户输入的参数初始化Link结构体里面的一些字段</li><li>词法分析、语法分析 生成ast抽象语法树，类型检查。一些关键字转换为runtime里的函数</li><li>逃逸分析</li></ol></li><li>后端编译<ol><li>初始化生成中间代码的配置。ssaconfig</li><li>编译顶层函数，生成、优化ssa。</li><li>汇编代码生成机器码</li></ol></li></ul><h2 id="1-compile包为编译器的入口"><a href="#1-compile包为编译器的入口" class="headerlink" title="1. compile包为编译器的入口"></a>1. compile包为编译器的入口</h2><p>【本文的go代码为1.16，更高版本的可能文件差别很大】</p><p><a href="https://github.com/golang/go%EF%BC%8Cgolang%E6%BA%90%E4%BB%A3%E7%A0%81%E4%B8%AD%E8%B7%AF%E5%BE%84%E4%B8%BA">https://github.com/golang/go，golang源代码中路径为</a></p><p><code>src/cmd/compile</code>的包即为compile的全部代码，承担了将golang从.go文件编译成为二进制可执行文件的全部过程。</p><p><code>src/cmd/compile/main.go</code>即为编译器程序的入口文件。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// disable timestamps for reproducible output</span>log<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">SetPrefix</span><span class="token punctuation">(</span><span class="token string">"compile: "</span><span class="token punctuation">)</span><span class="token comment">// objabi.GOARCH获取硬件平台，然后根据硬件平台选择不同的archInit初始函数</span>archInit<span class="token punctuation">,</span> ok <span class="token operator">:=</span> archInits<span class="token punctuation">[</span>objabi<span class="token punctuation">.</span>GOARCH<span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">"compile: unknown architecture %q\n"</span><span class="token punctuation">,</span> objabi<span class="token punctuation">.</span>GOARCH<span class="token punctuation">)</span>os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 这个函数是根据硬件平台进行编译的全过程</span>gc<span class="token punctuation">.</span><span class="token function">Main</span><span class="token punctuation">(</span>archInit<span class="token punctuation">)</span>gc<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-词法、语法分析"><a href="#2-词法、语法分析" class="headerlink" title="2. 词法、语法分析"></a>2. 词法、语法分析</h2><p><code>lines := parseFiles(flag.Args())</code>对输入的文件进行词法与语法分析得到对应的抽象语法树。</p><pre class="line-numbers language-none"><code class="language-none">cmd&#x2F;compile&#x2F;main.go:main()-&gt;gc.Main(archInit)  cmd&#x2F;compile&#x2F;internal&#x2F;gc&#x2F;main.go:Main(archInit func(*Arch))-&gt;    lines :&#x3D; parseFiles(flag.Args())    cmd&#x2F;compile&#x2F;internal&#x2F;gc&#x2F;noder.go:parseFiles()-&gt;syntax.Parse(base, f, p.error, p.pragma, syntax.CheckBranches)      cmd&#x2F;compile&#x2F;internal&#x2F;syntax&#x2F;syntax.go:Parse(base *PosBase, src io.Reader.......)-&gt;      p.fileOrNil()      cmd&#x2F;compile&#x2F;internal&#x2F;syntax&#x2F;parser.go:(p *parser) fileOrNil() *File -&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-文法分析"><a href="#2-1-文法分析" class="headerlink" title="2.1 文法分析"></a>2.1 文法分析</h3><p><code>cmd/compile/internal/syntax/parser.go:func (p *parser) fileOrNil() *File </code>是整个文法分析的过程。这个过程中是夹杂着词法分析的。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">SourceFile <span class="token operator">=</span> PackageClause <span class="token string">";"</span> <span class="token punctuation">&#123;</span> ImportDecl <span class="token string">";"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span> TopLevelDecl <span class="token string">";"</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每个 Go 源代码文件最终都会被解析成一个独立的抽象语法树，所以语法树最顶层的结构或者开始符号都是 SourceFile<br>每一个文件都包含一个 package 的定义以及可选的 import 声明和其他的顶层声明（TopLevelDecl）<br>每一个 SourceFile 在编译器中都对应一个<code> cmd/compile/internal/syntax.File</code> 结构体</p><p>这个过程的代码中，<code>p.next() got() want()</code>都是词法分析的过程。</p><h3 id="2-2-词法分析"><a href="#2-2-词法分析" class="headerlink" title="2.2 词法分析"></a>2.2 词法分析</h3><p>Go 语言的词法解析是通过 <code>src/cmd/compile/internal/syntax/scanner.go</code> 文件中的 <code>cmd/compile/internal/syntax.scanner</code> 结构体实现的，这个结构体会持有当前扫描的数据源文件、启用的模式和当前被扫描到的 Token。</p><p><code>parser结构体就是p既是语法解析器，又是词法解析器【结构体内嵌】,p.next()惰性加载进行词法分析为token作为语法分析的输入。</code></p><p><code>src/cmd/compile/internal/syntax/tokens.go</code> 文件中定义了 Go 语言中支持的全部 Token 类型, 通过next()方法进行判断。s.next()又调用了s.nextch()获取文件中最近的未被解析的字符，然后根据当前字符的不同执行不同的 case。</p><p>在 for 循环中不断获取最新的字符，将字符通过<code> cmd/compile/internal/syntax.source.nextch</code> 方法追加到 <code>cmd/compile/internal/syntax.scanner</code> 持有的缓冲区中。</p><h2 id="3-类型检查"><a href="#3-类型检查" class="headerlink" title="3. 类型检查"></a>3. 类型检查</h2><h3 id="3-1-静态、动态类型"><a href="#3-1-静态、动态类型" class="headerlink" title="3.1 静态、动态类型"></a>3.1 静态、动态类型</h3><ul><li>静态类型检查是基于对源代码的分析来确定运行程序类型安全的过程，如果我们的代码能够通过静态类型检查，那么当前程序在一定程度上可以满足类型安全的要求，它能够减少程序在运行时的类型检查，也可以被看作是一种代码优化的方式。</li></ul><blockquote><p>作为一个开发者来说，静态类型检查能够帮助我们在编译期间发现程序中出现的类型错误，一些动态类型的编程语言都会有社区提供的工具为这些编程语言加入静态类型检查，例如 JavaScript 的 <a href="https://flow.org/">Flow</a><a href="https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-typecheck/#fn:4">4</a>，这些工具能够在编译期间发现代码中的类型错误。</p><p>相信很多读者也都听过『动态类型一时爽，代码重构火葬场』，使用 Python、Ruby 等编程语言的开发者一定对这句话深有体会，静态类型为代码在编译期间提供了约束，编译器能够在编译期间约束变量的类型。</p><p>静态类型检查在重构时能够帮助我们节省大量时间并避免遗漏，但是如果编程语言仅支持动态类型检查，那么就需要写大量的单元测试保证重构不会出现类型错误。当然这里并不是说测试不重要，我们写的<strong>任何代码都应该有良好的测试</strong>，这与语言没有太多的关系。</p></blockquote><ul><li>动态类型检查是在运行时确定程序类型安全的过程，它需要编程语言在编译时为所有的对象加入类型标签等信息，运行时可以使用这些存储的类型信息来实现动态派发、向下转型、反射以及其他特性。动态类型检查能为工程师提供更多的操作空间，让我们能在运行时获取一些类型相关的上下文并根据对象的类型完成一些动态操作。</li></ul><blockquote><p>只使用动态类型检查的编程语言叫做动态类型编程语言，常见的动态类型编程语言就包括 JavaScript、Ruby 和 PHP，虽然这些编程语言在使用上非常灵活也不需要经过编译，但是有问题的代码不会因为更加灵活就会减少错误，该出错时仍然会出错，它们在提高灵活性的同时，也提高了对工程师的要求。</p></blockquote><ul><li>静态类型检查和动态类型检查不是完全冲突和对立的，很多编程语言都会同时使用两种类型检查，例如：Java 不仅在编译期间提前检查类型发现类型错误，还为对象添加了类型信息，在运行时使用反射根据对象的类型动态地执行方法增强灵活性并减少冗余代码。</li></ul><h3 id="3-2-go语言"><a href="#3-2-go语言" class="headerlink" title="3.2 go语言"></a>3.2 go语言</h3><p>Go 语言的编译器不仅使用静态类型检查来保证程序运行的类型安全，还会在编程期间引入类型信息，让工程师能够使用反射来判断参数和变量的类型。当我们想要将 <code>interface&#123;&#125;</code> 转换成具体类型时会进行动态类型检查，如果无法发生转换就会发生程序崩溃。</p><p>类型检查是 Go 语言编译的第二个阶段，在词法和语法分析之后我们得到了每个文件对应的抽象语法树，随后的类型检查会遍历抽象语法树中的节点，对每个节点的类型进行检验，找出其中存在的语法错误，在这个过程中也可能会对抽象语法树进行改写，这不仅能够去除一些不会被执行的代码、对代码进行优化以提高执行效率，而且也会修改 <code>make</code>、<code>new</code> 等关键字对应节点的操作类型。</p><p><code>make</code> 和 <code>new</code> 这些内置函数其实并不会直接对应某些函数的实现，它们会在编译期间被转换成真正存在的其他函数。</p><h2 id="4-中间代码生成"><a href="#4-中间代码生成" class="headerlink" title="4. 中间代码生成"></a>4. 中间代码生成</h2><p>词法与语法分析以及类型检查两个部分都属于编译器前端，它们负责对源代码进行分析并检查其中存在的词法和语法错误，经过这两个阶段生成的抽象语法树已经不存在语法错误了。</p><p>而中间代码生成则属于编译器的后端工作。</p><p>为什么需要中间代码：</p><p>编译器面对的复杂场景，很多编译器需要将源代码翻译成多种机器码，直接翻译高级编程语言相对比较困难。将编程语言到机器码的过程拆成中间代码生成和机器码生成两个简单步骤可以简化该问题，中间代码是一种更接近机器语言的表示形式，对中间代码的优化和分析相比直接分析高级编程语言更容易。</p><p>Go 语言编译器的中间代码具有静态单赋值（SSA）的特性，一个变量只会被赋值一次，进而优化执行的步骤。</p><p>这些用于遍历抽象语法树的函数会将一些关键字和内建函数转换成函数调用，<br>例如： 上述函数会将 panic、recover 两个内建函数转换成 runtime.gopanic 和 runtime.gorecover 两个真正运行时函数，<br>而关键字 new 也会被转换成调用 runtime.newobject 函数。</p><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101185031_e2342509-c15f-4b31-9b31-6507b08ca25f.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-g5F57sq4-1641023703277)(img/2019-02-05-golang-keyword-and-builtin-mapping.png)]"></p><p>上图是从关键字或内建函数到运行时函数的映射，其中涉及 Channel、哈希、make、new 关键字以及控制流中的关键字 select 等。<br>转换后的全部函数都属于运行时包，我们能在 src&#x2F;cmd&#x2F;compile&#x2F;internal&#x2F;gc&#x2F;builtin&#x2F;runtime.go 文件中找到函数对应的签名和定义。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">makemap64</span><span class="token punctuation">(</span>mapType <span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">,</span> hint <span class="token builtin">int64</span><span class="token punctuation">,</span> mapbuf <span class="token operator">*</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span>hmap <span class="token keyword">map</span><span class="token punctuation">[</span>any<span class="token punctuation">]</span>any<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">makemap</span><span class="token punctuation">(</span>mapType <span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">,</span> hint <span class="token builtin">int</span><span class="token punctuation">,</span> mapbuf <span class="token operator">*</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span>hmap <span class="token keyword">map</span><span class="token punctuation">[</span>any<span class="token punctuation">]</span>any<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">makemap_small</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>hmap <span class="token keyword">map</span><span class="token punctuation">[</span>any<span class="token punctuation">]</span>any<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">mapaccess1</span><span class="token punctuation">(</span>mapType <span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">,</span> hmap <span class="token keyword">map</span><span class="token punctuation">[</span>any<span class="token punctuation">]</span>any<span class="token punctuation">,</span> key <span class="token operator">*</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span>val <span class="token operator">*</span>any<span class="token punctuation">)</span><span class="token operator">...</span><span class="token keyword">func</span> <span class="token function">makechan64</span><span class="token punctuation">(</span>chanType <span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">,</span> size <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>hchan <span class="token keyword">chan</span> any<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">makechan</span><span class="token punctuation">(</span>chanType <span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">,</span> size <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>hchan <span class="token keyword">chan</span> any<span class="token punctuation">)</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的定义只是让 Go 语言完成编译，它们的实现都在另一个 <a href="https://github.com/golang/go/tree/master/src/runtime"><code>runtime</code></a> 包中。简单总结一下，编译器会将 Go 语言关键字转换成运行时包中的函数，也就是说关键字和内置函数的功能是由编译器和运行时共同完成的。</p><p>遍历节点时几个 Channel 操作是如何转换成运行时对应方法的，首先介绍向 Channel 发送消息或者从 Channel 接收消息两个操作，编译器会分别使用 <code>OSEND</code> 和 <code>ORECV</code> 表示发送和接收消息两个操作，在 <a href="https://draveness.me/golang/tree/cmd/compile/internal/gc.walkexpr"><code>cmd/compile/internal/gc.walkexpr</code></a> 函数中会根据节点类型的不同进入不同的分支：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">walkexpr</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> init <span class="token operator">*</span>Nodes<span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">case</span> OSEND<span class="token punctuation">:</span>n1 <span class="token operator">:=</span> n<span class="token punctuation">.</span>Rightn1 <span class="token operator">=</span> <span class="token function">assignconv</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"chan send"</span><span class="token punctuation">)</span>n1 <span class="token operator">=</span> <span class="token function">walkexpr</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> init<span class="token punctuation">)</span>n1 <span class="token operator">=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OADDR<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token function">mkcall1</span><span class="token punctuation">(</span><span class="token function">chanfn</span><span class="token punctuation">(</span><span class="token string">"chansend1"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> init<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当遇到 OSEND 操作时，会使用 cmd&#x2F;compile&#x2F;internal&#x2F;gc.mkcall1 创建一个操作为 OCALL 的节点，这个节点包含当前调用的函数 runtime.chansend1 和参数，新的 OCALL 节点会替换当前的 OSEND 节点，这就完成了对 OSEND 子树的改写。</p><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101185034_a9e6b6a2-784f-4c91-912e-2c4ad59a5125.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-tmGnS3zD-1641023703278)(img/2019-12-23-15771129929846-golang-ocall-node.png)]"></p><p>首先，从 AST 到 SSA 的转化过程中，编译器会生成将函数调用的参数放到栈上的中间代码，处理参数之后才会生成一条运行函数的命令 ssa.OpStaticCall：[cmd&#x2F;compile&#x2F;internal&#x2F;obj.LSym，表示该方法已经注册到运行时包中]</p><ol><li>当使用 defer 关键字时，插入 runtime.deferproc 函数；</li><li>当使用 go 关键字时，插入 runtime.newproc 函数符号；</li><li>在遇到其他情况时会插入表示普通函数对应的符号；</li></ol><p>cmd&#x2F;compile&#x2F;internal&#x2F;gc&#x2F;ssa.go 这个拥有将近 7000 行代码的文件包含用于处理不同节点的各种方法，编译器会根据节点类型的不同在一个巨型 switch 语句处理不同的情况，这也是我们在编译器这种独特的场景下才能看到的现象。</p><p>中间代码的生成过程是从 AST 抽象语法树到 SSA 中间代码的转换过程，在这期间会对语法树中的关键字再进行改写，改写后的语法树会经过多轮处理转变成最后的 SSA 中间代码，相关代码中包括了大量 switch 语句、复杂的函数和调用栈，阅读和分析起来也非常困难。</p><p>很多 Go 语言中的关键字和内置函数都是在这个阶段被转换成运行时包中方法的，作者在后面的章节会从具体的语言关键字和内置函数的角度介绍一些数据结构和内置函数的实现。</p><h2 id="5-机器码生成"><a href="#5-机器码生成" class="headerlink" title="5. 机器码生成"></a>5. 机器码生成</h2><p>机器码的生成在 Go 的编译器中主要由两部分协同工作，其中一部分是负责 SSA 中间代码降级和根据目标架构进行特定处理的 <a href="https://github.com/golang/go/tree/master/src/cmd/compile/internal/ssa"><code>cmd/compile/internal/ssa</code></a> 包，另一部分是负责生成机器码的 <a href="https://github.com/golang/go/tree/master/src/cmd/internal/obj"><code>cmd/internal/obj</code></a><a href="https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-machinecode/#fn:4">4</a>：</p><ul><li><a href="https://github.com/golang/go/tree/master/src/cmd/compile/internal/ssa"><code>cmd/compile/internal/ssa</code></a> 主要负责对 SSA 中间代码进行降级、执行架构特定的优化和重写并生成 <a href="https://draveness.me/golang/tree/cmd/compile/internal/obj.Prog"><code>cmd/compile/internal/obj.Prog</code></a> 指令；</li><li><a href="https://github.com/golang/go/tree/master/src/cmd/internal/obj"><code>cmd/internal/obj</code></a> 作为汇编器会将这些指令转换成机器码完成这次编译；</li></ul><p>SSA 降级 </p><p>SSA 降级是在中间代码生成的过程中完成的，其中将近 50 轮处理的过程中，<code>lower</code> 以及后面的阶段都属于 SSA 降级这一过程，这么多轮的处理会将 SSA 转换成机器特定的操作：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> passes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>pass<span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"lower"</span><span class="token punctuation">,</span> fn<span class="token punctuation">:</span> lower<span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"lowered deadcode for cse"</span><span class="token punctuation">,</span> fn<span class="token punctuation">:</span> deadcode<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// deadcode immediately before CSE avoids CSE making dead values live again</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"lowered cse"</span><span class="token punctuation">,</span> fn<span class="token punctuation">:</span> cse<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"trim"</span><span class="token punctuation">,</span> fn<span class="token punctuation">:</span> trim<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// remove empty blocks</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SSA 降级执行的第一个阶段就是 <code>lower</code>，该阶段的入口方法是 <a href="https://draveness.me/golang/tree/cmd/compile/internal/ssa.lower"><code>cmd/compile/internal/ssa.lower</code></a>函数，它会将 SSA 的中间代码转换成机器特定的指令：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">lower</span><span class="token punctuation">(</span>f <span class="token operator">*</span>Func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">applyRewrite</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> f<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>lowerBlock<span class="token punctuation">,</span> f<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>lowerValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>向 <a href="https://draveness.me/golang/tree/cmd/compile/internal/ssa.applyRewrite"><code>cmd/compile/internal/ssa.applyRewrite</code></a> 传入的两个函数 <code>lowerBlock</code> 和 <code>lowerValue</code> 是在<a href="https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-ir-ssa/">中间代码生成</a>阶段初始化 SSA 配置时确定的，这两个函数会分别转换函数中的代码块和代码块中的值。</p><p>假设目标机器使用 x86 的架构，最终会调用 <a href="https://draveness.me/golang/tree/cmd/compile/internal/ssa.rewriteBlock386"><code>cmd/compile/internal/ssa.rewriteBlock386</code></a> 和 <a href="https://draveness.me/golang/tree/cmd/compile/internal/ssa.rewriteValue386"><code>cmd/compile/internal/ssa.rewriteValue386</code></a> 两个函数，这两个函数是两个巨大的 switch 语句，前者总共有 2000 多行，后者将近 700 行，用于处理 x86 架构重写的函数总共有将近 30000 行代码，你能在 <a href="https://github.com/golang/go/blob/master/src/cmd/compile/internal/ssa/rewrite386.go"><code>cmd/compile/internal/ssa/rewrite386.go</code></a> 这里找到文件的全部内容，我们只节选其中的一段展示一下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">rewriteValue386</span><span class="token punctuation">(</span>v <span class="token operator">*</span>Value<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">switch</span> v<span class="token punctuation">.</span>Op <span class="token punctuation">&#123;</span><span class="token keyword">case</span> Op386ADCL<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token function">rewriteValue386_Op386ADCL_0</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token keyword">case</span> Op386ADDL<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token function">rewriteValue386_Op386ADDL_0</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">rewriteValue386_Op386ADDL_10</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">rewriteValue386_Op386ADDL_20</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">rewriteValue386_Op386ADCL_0</span><span class="token punctuation">(</span>v <span class="token operator">*</span>Value<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token comment">// match: (ADCL x (MOVLconst [c]) f)</span><span class="token comment">// cond:</span><span class="token comment">// result: (ADCLconst [c] x f)</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span><span class="token boolean">_</span> <span class="token operator">=</span> v<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>x <span class="token operator">:=</span> v<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>v_1 <span class="token operator">:=</span> v<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> v_1<span class="token punctuation">.</span>Op <span class="token operator">!=</span> Op386MOVLconst <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span>c <span class="token operator">:=</span> v_1<span class="token punctuation">.</span>AuxIntf <span class="token operator">:=</span> v<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>v<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>Op386ADCLconst<span class="token punctuation">)</span>v<span class="token punctuation">.</span>AuxInt <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">AddArg</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">AddArg</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重写的过程会将通用的 SSA 中间代码转换成目标架构特定的指令，上述的 <code>rewriteValue386_Op386ADCL_0</code> 函数会使用 <code>ADCLconst</code> 替换 <code>ADCL</code> 和 <code>MOVLconst</code> 两条指令，它能通过对指令的压缩和优化减少在目标硬件上执行所需要的时间和资源。</p><h2 id="6-汇编学习"><a href="#6-汇编学习" class="headerlink" title="6. 汇编学习"></a>6. 汇编学习</h2><pre class="line-numbers language-none"><code class="language-none">go tool compile -S hello.gogo tool objdump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>go build -work -debug-actiongraph=graph.json print.go// -n 参数展示命令不执行  -x  展示执行的命令 -work 保留中间目录 </code></p><p>在这个过程中compile调用的就是 cmd&#x2F;compile。</p><pre class="line-numbers language-none"><code class="language-none">[   &#123;      &quot;执行过程&quot;: &quot;编译过程从下往上，从最后一个阶段往第一个阶段合并。&quot;,      &quot;ID&quot;: 0,      &quot;Mode&quot;: &quot;link-install&quot;,      &quot;Package&quot;: &quot;command-line-arguments&quot;,      &quot;Deps&quot;: [         1      ],      &quot;Objdir&quot;: &quot;&#x2F;var&#x2F;folders&#x2F;57&#x2F;8f4zkqd54qn4f8c_btvcs9zc0000gn&#x2F;T&#x2F;go-build1635635154&#x2F;b001&#x2F;&quot;,      &quot;Target&quot;: &quot;print&quot;,      &quot;Priority&quot;: 36,      &quot;Built&quot;: &quot;print&quot;,      &quot;BuildID&quot;: &quot;s3kSPuGqMFL1ltXka1-1&#x2F;7T8ELBT1aC0tc7iktmm4&#x2F;zG8NbUygi2kJFAzeDqMj&#x2F;EQ04B5akVd2353iztOUr&quot;,      &quot;TimeReady&quot;: &quot;2021-11-13T22:49:46.10052+08:00&quot;,      &quot;TimeStart&quot;: &quot;2021-11-13T22:49:46.100523+08:00&quot;,      &quot;TimeDone&quot;: &quot;2021-11-13T22:49:46.100701+08:00&quot;,      &quot;Cmd&quot;: null   &#125;,   &#123;      &quot;ID&quot;: 1,      &quot;Mode&quot;: &quot;link&quot;,      &quot;Package&quot;: &quot;command-line-arguments&quot;,      &quot;Deps&quot;: [         2,       .......         34      ],      &quot;Objdir&quot;: &quot;&#x2F;var&#x2F;folders&#x2F;57&#x2F;8f4zkqd54qn4f8c_btvcs9zc0000gn&#x2F;T&#x2F;go-build1635635154&#x2F;b001&#x2F;&quot;,      &quot;Target&quot;: &quot;&#x2F;var&#x2F;folders&#x2F;57&#x2F;8f4zkqd54qn4f8c_btvcs9zc0000gn&#x2F;T&#x2F;go-build1635635154&#x2F;b001&#x2F;exe&#x2F;a.out&quot;,      &quot;Priority&quot;: 35,      &quot;Built&quot;: &quot;&#x2F;var&#x2F;folders&#x2F;57&#x2F;8f4zkqd54qn4f8c_btvcs9zc0000gn&#x2F;T&#x2F;go-build1635635154&#x2F;b001&#x2F;exe&#x2F;a.out&quot;,      &quot;ActionID&quot;: &quot;s3kSPuGqMFL1ltXka1-1&quot;,      &quot;BuildID&quot;: &quot;s3kSPuGqMFL1ltXka1-1&#x2F;7T8ELBT1aC0tc7iktmm4&#x2F;zG8NbUygi2kJFAzeDqMj&#x2F;EQ04B5akVd2353iztOUr&quot;,      &quot;TimeReady&quot;: &quot;2021-11-13T22:49:45.98116+08:00&quot;,      &quot;TimeStart&quot;: &quot;2021-11-13T22:49:45.981173+08:00&quot;,      &quot;TimeDone&quot;: &quot;2021-11-13T22:49:46.10052+08:00&quot;,      &quot;Cmd&quot;: [         &quot;&#x2F;Users&#x2F;admin&#x2F;biturd&#x2F;code-knowledge&#x2F;源码学习&#x2F;Go&#x2F;go&#x2F;pkg&#x2F;tool&#x2F;darwin_arm64&#x2F;link -o &#x2F;var&#x2F;folders&#x2F;57&#x2F;8f4zkqd54qn4f8c_btvcs9zc0000gn&#x2F;T&#x2F;go-build1635635154&#x2F;b001&#x2F;exe&#x2F;a.out -importcfg &#x2F;var&#x2F;folders&#x2F;57&#x2F;8f4zkqd54qn4f8c_btvcs9zc0000gn&#x2F;T&#x2F;go-build1635635154&#x2F;b001&#x2F;importcfg.link -buildmode&#x3D;exe -buildid&#x3D;s3kSPuGqMFL1ltXka1-1&#x2F;7T8ELBT1aC0tc7iktmm4&#x2F;zG8NbUygi2kJFAzeDqMj&#x2F;s3kSPuGqMFL1ltXka1-1 -extld&#x3D;clang &#x2F;var&#x2F;folders&#x2F;57&#x2F;8f4zkqd54qn4f8c_btvcs9zc0000gn&#x2F;T&#x2F;go-build1635635154&#x2F;b001&#x2F;_pkg_.a&quot;      ],      &quot;CmdReal&quot;: 99474959,      &quot;CmdUser&quot;: 74461000,      &quot;CmdSys&quot;: 11050000   &#125;,   &#123;      &quot;ID&quot;: 2,      &quot;Mode&quot;: &quot;build&quot;,      &quot;Package&quot;: &quot;command-line-arguments&quot;,      &quot;Deps&quot;: [         3,         4,         5,         35      ],      &quot;Objdir&quot;: &quot;&#x2F;var&#x2F;folders&#x2F;57&#x2F;8f4zkqd54qn4f8c_btvcs9zc0000gn&#x2F;T&#x2F;go-build1635635154&#x2F;b001&#x2F;&quot;,      &quot;Priority&quot;: 34,      &quot;NeedBuild&quot;: true,      &quot;ActionID&quot;: &quot;7T8ELBT1aC0tc7iktmm4&quot;,      &quot;BuildID&quot;: &quot;7T8ELBT1aC0tc7iktmm4&#x2F;zG8NbUygi2kJFAzeDqMj&quot;,      &quot;TimeReady&quot;: &quot;2021-11-13T22:49:45.964123+08:00&quot;,      &quot;TimeStart&quot;: &quot;2021-11-13T22:49:45.964128+08:00&quot;,      &quot;TimeDone&quot;: &quot;2021-11-13T22:49:45.981158+08:00&quot;,      &quot;Cmd&quot;: [         &quot;&#x2F;Users&#x2F;admin&#x2F;biturd&#x2F;code-knowledge&#x2F;源码学习&#x2F;Go&#x2F;go&#x2F;pkg&#x2F;tool&#x2F;darwin_arm64&#x2F;compile -o &#x2F;var&#x2F;folders&#x2F;57&#x2F;8f4zkqd54qn4f8c_btvcs9zc0000gn&#x2F;T&#x2F;go-build1635635154&#x2F;b001&#x2F;_pkg_.a -trimpath \&quot;&#x2F;var&#x2F;folders&#x2F;57&#x2F;8f4zkqd54qn4f8c_btvcs9zc0000gn&#x2F;T&#x2F;go-build1635635154&#x2F;b001&#x3D;\u003e\&quot; -shared -p main -lang&#x3D;go1.16 -complete -buildid 7T8ELBT1aC0tc7iktmm4&#x2F;7T8ELBT1aC0tc7iktmm4 -goversion go1.16.9 -D _&#x2F;Users&#x2F;admin&#x2F;biturd&#x2F;code-knowledge&#x2F;源码学习&#x2F;Go&#x2F;go&#x2F;biturd&#x2F;print -importcfg &#x2F;var&#x2F;folders&#x2F;57&#x2F;8f4zkqd54qn4f8c_btvcs9zc0000gn&#x2F;T&#x2F;go-build1635635154&#x2F;b001&#x2F;importcfg -pack &#x2F;Users&#x2F;admin&#x2F;biturd&#x2F;code-knowledge&#x2F;源码学习&#x2F;Go&#x2F;go&#x2F;biturd&#x2F;print&#x2F;print.go &#x2F;var&#x2F;folders&#x2F;57&#x2F;8f4zkqd54qn4f8c_btvcs9zc0000gn&#x2F;T&#x2F;go-build1635635154&#x2F;b001&#x2F;_gomod_.go&quot;      ],      &quot;CmdReal&quot;: 13654375,      &quot;CmdUser&quot;: 4983000,      &quot;CmdSys&quot;: 4563000   &#125;,   &#123;      &quot;ID&quot;: 3,      &quot;Mode&quot;: &quot;build&quot;,      &quot;Package&quot;: &quot;fmt&quot;,      &quot;Deps&quot;: [         6,         .........         14      ],      &quot;Objdir&quot;: &quot;&#x2F;var&#x2F;folders&#x2F;57&#x2F;8f4zkqd54qn4f8c_btvcs9zc0000gn&#x2F;T&#x2F;go-build1635635154&#x2F;b002&#x2F;&quot;,      &quot;Priority&quot;: 32,      &quot;NeedBuild&quot;: true,      &quot;ActionID&quot;: &quot;k_-3MKKPQcoJhVBcf-tD&quot;,      &quot;BuildID&quot;: &quot;k_-3MKKPQcoJhVBcf-tD&#x2F;VyKAvsHRPs5gK-4oxWx_&quot;,      &quot;TimeReady&quot;: &quot;2021-11-13T22:49:45.963446+08:00&quot;,      &quot;TimeStart&quot;: &quot;2021-11-13T22:49:45.963451+08:00&quot;,      &quot;TimeDone&quot;: &quot;2021-11-13T22:49:45.964121+08:00&quot;,      &quot;Cmd&quot;: null   &#125;,   ........   &#123;&quot;ID&quot;: 35,&quot;Mode&quot;: &quot;nop&quot;,&quot;Package&quot;: &quot;&quot;,&quot;Deps&quot;: [3,......34],&quot;Priority&quot;: 33,&quot;TimeReady&quot;: &quot;2021-11-13T22:49:45.964121+08:00&quot;,&quot;TimeStart&quot;: &quot;2021-11-13T22:49:45.964123+08:00&quot;,&quot;TimeDone&quot;: &quot;2021-11-13T22:49:45.964123+08:00&quot;,&quot;Cmd&quot;: null&#125;,&#123;&quot;ID&quot;: 36,&quot;Mode&quot;: &quot;built-in package&quot;,&quot;Package&quot;: &quot;unsafe&quot;,&quot;Objdir&quot;: &quot;&#x2F;var&#x2F;folders&#x2F;57&#x2F;8f4zkqd54qn4f8c_btvcs9zc0000gn&#x2F;T&#x2F;go-build1635635154&#x2F;b006&#x2F;&quot;,&quot;NeedBuild&quot;: true,&quot;TimeReady&quot;: &quot;2021-11-13T22:49:45.915029+08:00&quot;,&quot;TimeStart&quot;: &quot;2021-11-13T22:49:45.915053+08:00&quot;,&quot;TimeDone&quot;: &quot;2021-11-13T22:49:45.915053+08:00&quot;,&quot;Cmd&quot;: null&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考链接：<br><a href="https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-compile-intro/">https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-compile-intro/</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Golang </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clickhouse运维篇（三）：生产环境一键生成配置并快速部署ck集群.</title>
      <link href="/2024/09/29/clickhouse-yun-wei-pian-san-sheng-chan-huan-jing-yi-jian-sheng-cheng-pei-zhi-bing-kuai-su-bu-shu-ck-ji-qun/"/>
      <url>/2024/09/29/clickhouse-yun-wei-pian-san-sheng-chan-huan-jing-yi-jian-sheng-cheng-pei-zhi-bing-kuai-su-bu-shu-ck-ji-qun/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184811_fcf9cfcc-6fa3-468f-9355-8d671d6e165d.png" alt="请添加图片描述"></p><blockquote><p>前提条件：先了解集群搭建流程是什么样，需要改哪些配置，有哪些环境，这个文章目的是简化部署。 </p></blockquote><p><a href="https://blog.csdn.net/qq_42873554/article/details/142646374">clickhouse运维篇（一）：docker-compose 快速部署clickhouse集群</a><br><a href="https://blog.csdn.net/qq_42873554/article/details/143368665?sharetype=blogdetail&sharerId=143368665&sharerefer=PC&sharesource=qq_42873554&spm=1011.2480.3001.8118">clickhouse运维篇（二）：多机器手动部署ck集群</a></p><p>!<a href="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184811_fcf9cfcc-6fa3-468f-9355-8d671d6e165d.png">https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184811_fcf9cfcc-6fa3-468f-9355-8d671d6e165d.png</a></p><h1 id="项目目录解析："><a href="#项目目录解析：" class="headerlink" title="项目目录解析："></a>项目目录解析：</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> $ tree <span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>├── cluster.conf   <span class="token comment">#集群配置，  集群包含哪些机器、端口分别为多少</span>├── config  │   ├── config_node1.xml  <span class="token comment"># 生成的ck节点配置文件</span>│   ├── config_node2.xml│   ├── config_template.xml  <span class="token comment"># config模版</span>│   ├── users_node1.xml     <span class="token comment"># 生成的ck节点用户配置文件</span>│   ├── users_node2.xml│   └── users_template.xml   <span class="token comment"># users模版</span>├── dep   <span class="token comment">#下面包含需要的远程依赖， zookeeper、clickhouse、jdk，根据自己的需求更改</span>├── gen_cluster_config.sh  ├── gen_login_cmd.sh├── install.conf  <span class="token comment"># 远程登录的主机conf，需要在跳板机或者中间机器上去ssh、scp使用</span>└── main.sh   <span class="token comment">#启动入口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="1、main-sh"><a href="#1、main-sh" class="headerlink" title="1、main.sh"></a>1、main.sh</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CUR_FOLDER</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> <span class="token string">"/Users/admin/scripts/my_app/ckcluster"</span><span class="token punctuation">;</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span><span class="token builtin class-name">.</span> <span class="token variable">$&#123;CUR_FOLDER&#125;</span>/cluster.conf<span class="token builtin class-name">.</span> <span class="token variable">$&#123;CUR_FOLDER&#125;</span>/gen_cluster_config.sh<span class="token builtin class-name">.</span> <span class="token variable">$&#123;CUR_FOLDER&#125;</span>/gen_login_cmd.sh<span class="token assign-left variable">CONFIG_FOLDER</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;CUR_FOLDER&#125;</span>/config"</span><span class="token assign-left variable">DEP_FOLDER</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;CUR_FOLDER&#125;</span>/dep"</span><span class="token assign-left variable">TEMPLATE_FILE</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;CONFIG_FOLDER&#125;</span>/config_template.xml"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$CONFIG_FOLDER</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token string">"<span class="token variable">$CONFIG_FOLDER</span>"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$DEP_FOLDER</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token string">"<span class="token variable">$DEP_FOLDER</span>"</span><span class="token keyword">fi</span><span class="token assign-left variable">zk_index</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># 首先读取所有节点信息并根据 shard 进行分组</span><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token assign-left variable">host_var</span><span class="token operator">=</span><span class="token string">"zk_node_<span class="token variable">$&#123;zk_index&#125;</span>_host"</span>    <span class="token comment"># 检查所有变量是否为空，若有一个为空则跳出循环</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$&#123;<span class="token operator">!</span>host_var&#125;</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">break</span>    <span class="token keyword">fi</span>    <span class="token comment"># 远程安装jdk、zookeeper</span>    <span class="token assign-left variable">install_path</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>get_install_path $<span class="token punctuation">&#123;</span><span class="token operator">!</span>host_var<span class="token punctuation">&#125;</span><span class="token variable">)</span></span>    <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>get_scp_command $<span class="token punctuation">&#123;</span><span class="token operator">!</span>host_var<span class="token punctuation">&#125;</span> <span class="token builtin class-name">.</span> <span class="token string">"<span class="token variable">$&#123;DEP_FOLDER&#125;</span>/jdk-8u202-nonroot.tar.gz <span class="token variable">$&#123;DEP_FOLDER&#125;</span>/apache-zookeeper-3.7.2-bin.tar.gz"</span><span class="token variable">)</span></span>    <span class="token variable"><span class="token variable">`</span>get_scp_command $<span class="token punctuation">&#123;</span><span class="token operator">!</span>host_var<span class="token punctuation">&#125;</span> <span class="token builtin class-name">.</span> <span class="token string">"<span class="token variable">$&#123;DEP_FOLDER&#125;</span>/jdk-8u202-nonroot.tar.gz <span class="token variable">$&#123;DEP_FOLDER&#125;</span>/apache-zookeeper-3.7.2-bin.tar.gz"</span><span class="token variable">`</span></span>    <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>get_ssh_command $<span class="token punctuation">&#123;</span><span class="token operator">!</span>host_var<span class="token punctuation">&#125;</span> <span class="token string">"cd <span class="token variable">$&#123;install_path&#125;</span>;tar -xzvf <span class="token variable">$&#123;install_path&#125;</span>/jdk-8u202-nonroot.tar.gz"</span><span class="token variable">)</span></span>    <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>get_ssh_command $<span class="token punctuation">&#123;</span><span class="token operator">!</span>host_var<span class="token punctuation">&#125;</span> <span class="token string">"cd <span class="token variable">$&#123;install_path&#125;</span>;tar -xzvf <span class="token variable">$&#123;install_path&#125;</span>/apache-zookeeper-3.7.2-bin.tar.gz"</span><span class="token variable">)</span></span>    <span class="token variable"><span class="token variable">`</span>get_ssh_command $<span class="token punctuation">&#123;</span><span class="token operator">!</span>host_var<span class="token punctuation">&#125;</span> <span class="token string">"cd <span class="token variable">$&#123;install_path&#125;</span>;tar -xzvf <span class="token variable">$&#123;install_path&#125;</span>/jdk-8u202-nonroot.tar.gz"</span><span class="token variable">`</span></span>    <span class="token variable"><span class="token variable">`</span>get_ssh_command $<span class="token punctuation">&#123;</span><span class="token operator">!</span>host_var<span class="token punctuation">&#125;</span> <span class="token string">"cd <span class="token variable">$&#123;install_path&#125;</span>;tar -xzvf <span class="token variable">$&#123;install_path&#125;</span>/apache-zookeeper-3.7.2-bin.tar.gz"</span><span class="token variable">`</span></span>        <span class="token assign-left variable">zk_index</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>zk_index <span class="token operator">+</span> <span class="token number">1</span><span class="token variable">))</span></span><span class="token keyword">done</span><span class="token comment"># 生成ck集群配置文件</span>gen_config<span class="token comment"># 远程安装clickhouse</span><span class="token assign-left variable">ck_index</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># 首先读取所有节点信息并根据 shard 进行分组</span><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token assign-left variable">host_var</span><span class="token operator">=</span><span class="token string">"ck_node_<span class="token variable">$&#123;ck_index&#125;</span>_host"</span>    <span class="token comment"># 检查所有变量是否为空，若有一个为空则跳出循环</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$&#123;<span class="token operator">!</span>host_var&#125;</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">break</span>    <span class="token keyword">fi</span><span class="token comment">#     &lt;users_config>/opt/appaduudit/my_app-2.4/clickhouse-23.4.2.9/ck_node_1/config/users_node.xml&lt;/users_config>    </span>    <span class="token assign-left variable">install_path</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>get_install_path $<span class="token punctuation">&#123;</span><span class="token operator">!</span>host_var<span class="token punctuation">&#125;</span><span class="token variable">)</span></span>        <span class="token variable"><span class="token variable">`</span>get_scp_command $<span class="token punctuation">&#123;</span><span class="token operator">!</span>host_var<span class="token punctuation">&#125;</span> <span class="token builtin class-name">.</span> <span class="token string">"<span class="token variable">$&#123;DEP_FOLDER&#125;</span>/clickhouse-23.4.2.9.tar.gz"</span><span class="token variable">`</span></span>    <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>get_ssh_command $<span class="token punctuation">&#123;</span><span class="token operator">!</span>host_var<span class="token punctuation">&#125;</span> <span class="token string">"cd <span class="token variable">$&#123;install_path&#125;</span>;tar -xzvf <span class="token variable">$&#123;install_path&#125;</span>/clickhouse-23.4.2.9.tar.gz"</span><span class="token variable">)</span></span>    <span class="token assign-left variable">NODE_CK_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;BASE_CK_PATH&#125;</span>/ck_node_<span class="token variable">$&#123;ck_index&#125;</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>get_scp_command $<span class="token punctuation">&#123;</span><span class="token operator">!</span>host_var<span class="token punctuation">&#125;</span> $<span class="token punctuation">&#123;</span>NODE_CK_PATH<span class="token punctuation">&#125;</span>/config  <span class="token string">"<span class="token variable">$&#123;CONFIG_FOLDER&#125;</span>/user_node<span class="token variable">$&#123;ck_index&#125;</span>.xml"</span><span class="token variable">)</span></span>    <span class="token variable"><span class="token variable">`</span>get_scp_command $<span class="token punctuation">&#123;</span><span class="token operator">!</span>host_var<span class="token punctuation">&#125;</span> $<span class="token punctuation">&#123;</span>NODE_CK_PATH<span class="token punctuation">&#125;</span>/config <span class="token string">"<span class="token variable">$&#123;CONFIG_FOLDER&#125;</span>/config_node<span class="token variable">$&#123;ck_index&#125;</span>.xml"</span><span class="token variable">`</span></span>    <span class="token variable"><span class="token variable">`</span>get_scp_command $<span class="token punctuation">&#123;</span><span class="token operator">!</span>host_var<span class="token punctuation">&#125;</span> $<span class="token punctuation">&#123;</span>NODE_CK_PATH<span class="token punctuation">&#125;</span>/config  <span class="token string">"<span class="token variable">$&#123;CONFIG_FOLDER&#125;</span>/users_node<span class="token variable">$&#123;ck_index&#125;</span>.xml"</span><span class="token variable">`</span></span>    <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>get_ssh_command $<span class="token punctuation">&#123;</span><span class="token operator">!</span>host_var<span class="token punctuation">&#125;</span> <span class="token string">"<span class="token variable">$&#123;install_path&#125;</span>/clickhouse-23.4.2.9.tar.gz/bin/clickhouse server --config-file  <span class="token variable">$&#123;install_path&#125;</span>/config_node<span class="token variable">$&#123;ck_index&#125;</span>.xml"</span><span class="token variable">)</span></span>    <span class="token variable"><span class="token variable">`</span>get_ssh_command $<span class="token punctuation">&#123;</span><span class="token operator">!</span>host_var<span class="token punctuation">&#125;</span> <span class="token string">"<span class="token variable">$&#123;install_path&#125;</span>/clickhouse-23.4.2.9.tar.gz/bin/clickhouse server --config-file  <span class="token variable">$&#123;install_path&#125;</span>/config_node<span class="token variable">$&#123;ck_index&#125;</span>.xml"</span><span class="token variable">`</span></span>            <span class="token assign-left variable">ck_index</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>ck_index <span class="token operator">+</span> <span class="token number">1</span><span class="token variable">))</span></span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2、cluster-conf"><a href="#2、cluster-conf" class="headerlink" title="2、cluster.conf"></a>2、cluster.conf</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 定义变量</span><span class="token assign-left variable">target_install_path</span><span class="token operator">=</span><span class="token string">"/opt/app/ck_cluster"</span><span class="token assign-left variable">BASE_CK_PATH</span><span class="token operator">=</span><span class="token string">"/opt/app/my_app-2.4/clickhouse-23.4.2.9"</span><span class="token assign-left variable">CK_CLUSTER_NAME</span><span class="token operator">=</span><span class="token string">"my_ck_cluster_test"</span><span class="token comment">#port为zk的clientPort</span><span class="token assign-left variable">zk_node_1_host</span><span class="token operator">=</span><span class="token number">172.168</span>.1.206<span class="token assign-left variable">zk_node_1_port</span><span class="token operator">=</span><span class="token number">8551</span><span class="token assign-left variable">zk_node_2_host</span><span class="token operator">=</span><span class="token number">172.168</span>.1.207<span class="token assign-left variable">zk_node_2_port</span><span class="token operator">=</span><span class="token number">8551</span><span class="token assign-left variable">zk_node_3_host</span><span class="token operator">=</span><span class="token number">172.168</span>.1.208<span class="token assign-left variable">zk_node_3_port</span><span class="token operator">=</span><span class="token number">8551</span><span class="token assign-left variable">ck_node_1_host</span><span class="token operator">=</span><span class="token number">172.168</span>.1.206<span class="token assign-left variable">ck_node_1_tcp_port</span><span class="token operator">=</span><span class="token number">8601</span><span class="token assign-left variable">ck_node_1_http_port</span><span class="token operator">=</span><span class="token number">8602</span><span class="token assign-left variable">ck_node_1_interserver_http_port</span><span class="token operator">=</span><span class="token number">8603</span><span class="token assign-left variable">ck_node_1_user</span><span class="token operator">=</span>default<span class="token assign-left variable">ck_node_1_password</span><span class="token operator">=</span>password<span class="token assign-left variable">ck_node_1_shard</span><span class="token operator">=</span>01<span class="token assign-left variable">ck_node_1_replica</span><span class="token operator">=</span>replica_63<span class="token assign-left variable">ck_node_2_host</span><span class="token operator">=</span><span class="token number">172.168</span>.1.207<span class="token assign-left variable">ck_node_2_tcp_port</span><span class="token operator">=</span><span class="token number">8611</span><span class="token assign-left variable">ck_node_2_http_port</span><span class="token operator">=</span><span class="token number">8612</span><span class="token assign-left variable">ck_node_2_interserver_http_port</span><span class="token operator">=</span><span class="token number">8613</span><span class="token assign-left variable">ck_node_2_user</span><span class="token operator">=</span>default<span class="token assign-left variable">ck_node_2_password</span><span class="token operator">=</span>password<span class="token assign-left variable">ck_node_2_shard</span><span class="token operator">=</span>02<span class="token assign-left variable">ck_node_2_replica</span><span class="token operator">=</span>replica_63<span class="token comment">#ck_node_3_host=ck_host_3</span><span class="token comment">#ck_node_3_tcp_port=ck_tcp_port_3</span><span class="token comment">#ck_node_3_http_port=ck_http_port_3</span><span class="token comment">#ck_node_3_interserver_http_port=ck_interserver_http_port_3</span><span class="token comment">#ck_node_3_user=user3</span><span class="token comment">#ck_node_3_password=password3</span><span class="token comment">#ck_node_3_shard=02</span><span class="token comment">#ck_node_3_replica=replica_209</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3、install-conf"><a href="#3、install-conf" class="headerlink" title="3、install.conf"></a>3、install.conf</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">ssh.172.168.1.206</span><span class="token operator">=</span>root:app:/opt/app/ck_cluste<span class="token assign-left variable">ssh.172.168.1.207</span><span class="token operator">=</span>admin:adminpass:/opt/app/ck_cluste<span class="token assign-left variable">ssh.172.168.1.208</span><span class="token operator">=</span>admin:adminpass:/opt/app/ck_cluste<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="4、gen-login-cmd-sh"><a href="#4、gen-login-cmd-sh" class="headerlink" title="4、gen_login_cmd.sh"></a>4、gen_login_cmd.sh</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">cd</span> /Users/admin/scripts/my_app/ckcluster<span class="token comment"># 读取配置文件并解析</span><span class="token assign-left variable">CONFIG_FILE</span><span class="token operator">=</span><span class="token string">"install.conf"</span><span class="token builtin class-name">declare</span> <span class="token parameter variable">-A</span> HOSTS<span class="token keyword">while</span> <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">'='</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span> key user_password <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$key</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token assign-left variable">key</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$key</span>"</span> <span class="token operator">|</span> <span class="token function">xargs</span><span class="token variable">)</span></span>    <span class="token assign-left variable">user_password</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$user_password</span>"</span> <span class="token operator">|</span> <span class="token function">xargs</span><span class="token variable">)</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$key</span> <span class="token operator">==</span> ssh.* <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token variable">$&#123;key<span class="token operator">#</span>ssh.&#125;</span>        HOSTS<span class="token punctuation">[</span><span class="token string">"<span class="token variable">$host</span>"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$user_password</span>"</span>    <span class="token keyword">fi</span><span class="token keyword">done</span> <span class="token operator">&lt;</span> <span class="token string">"<span class="token variable">$CONFIG_FILE</span>"</span><span class="token comment"># 获取 SSH 命令</span><span class="token function-name function">get_ssh_command</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">cmd</span><span class="token operator">=</span><span class="token variable">$2</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">user_password</span><span class="token operator">=</span><span class="token variable">$&#123;HOSTS<span class="token punctuation">[</span>"$host"<span class="token punctuation">]</span>&#125;</span>    <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">':'</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span> user password install_path<span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token variable">$user_password</span>"</span>    <span class="token comment"># echo "sshpass -p '$password' ssh $user@$host $cmd"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"sshpass -p '<span class="token variable">$password</span>' ssh <span class="token variable">$user</span>@<span class="token variable">$host</span> <span class="token entity" title="\&quot;">\"</span><span class="token variable">$cmd</span><span class="token entity" title="\&quot;">\"</span>"</span><span class="token punctuation">&#125;</span><span class="token comment"># 获取 SCP 命令</span><span class="token function-name function">get_scp_command</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">extra_dir</span><span class="token operator">=</span><span class="token variable">$2</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">files</span><span class="token operator">=</span><span class="token variable">$3</span>        <span class="token builtin class-name">local</span> <span class="token assign-left variable">user_password</span><span class="token operator">=</span><span class="token variable">$&#123;HOSTS<span class="token punctuation">[</span>$host<span class="token punctuation">]</span>&#125;</span>        <span class="token comment"># root:idss:/opt/idss/ck_cluste</span>    <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">':'</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span> user password install_path<span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token variable">$user_password</span>"</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$extra_dir</span>"</span> <span class="token operator">!=</span> <span class="token string">"."</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token assign-left variable">install_path</span><span class="token operator">=</span><span class="token variable">$extra_dir</span>    <span class="token keyword">fi</span>    <span class="token assign-left variable">mkdir_cmd</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>get_ssh_command $host <span class="token string">"mkdir -p <span class="token variable">$install_path</span>"</span><span class="token variable">)</span></span>    <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable">$mkdir_cmd</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"sshpass -p '<span class="token variable">$password</span>' scp -r <span class="token variable">$files</span> <span class="token variable">$user</span>@<span class="token variable">$host</span>:<span class="token variable">$install_path</span>"</span><span class="token punctuation">&#125;</span><span class="token function-name function">get_install_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">user_password</span><span class="token operator">=</span><span class="token variable">$&#123;HOSTS<span class="token punctuation">[</span>$host<span class="token punctuation">]</span>&#125;</span>        <span class="token comment"># root:idss:/opt/idss/ck_cluste</span>    <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">':'</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span> user password install_path<span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token variable">$user_password</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$install_path</span><span class="token punctuation">&#125;</span><span class="token comment"># ssh_command=$(get_scp_command "10.87.102.206" "/Users/admin/scripts/my_app/ckcluster/dep/jdk-8u202-nonroot.tar.gz /Users/admin/scripts/my_app/ckcluster/dep/apache-zookeeper-3.7.2-bin.tar.gz")</span><span class="token comment"># echo $ssh_command</span><span class="token comment"># scp_command=$(get_ssh_command "10.87.102.206" "ls /opt/idss/ck_cluste")</span><span class="token comment"># echo $scp_command</span><span class="token comment"># `$scp_command`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5、gen-cluster-config-sh"><a href="#5、gen-cluster-config-sh" class="headerlink" title="5、gen_cluster_config.sh"></a>5、gen_cluster_config.sh</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 定义基础路径和模板文件名</span><span class="token keyword">function</span> <span class="token function-name function">gen_config</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment"># 生成 zookeeper 配置</span><span class="token assign-left variable">ZOOKEEPER_CONFIG</span><span class="token operator">=</span><span class="token string">"&lt;zookeeper><span class="token entity" title="\n">\n</span>"</span><span class="token comment"># 循环遍历 zk_node_*_host 和 zk_node_*_port 变量</span><span class="token assign-left variable">zk_index</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token assign-left variable">host_var</span><span class="token operator">=</span><span class="token string">"zk_node_<span class="token variable">$&#123;zk_index&#125;</span>_host"</span>    <span class="token assign-left variable">port_var</span><span class="token operator">=</span><span class="token string">"zk_node_<span class="token variable">$&#123;zk_index&#125;</span>_port"</span>    <span class="token comment"># 检查变量是否已定义，如果未定义则跳出循环</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$&#123;<span class="token operator">!</span>host_var&#125;</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$&#123;<span class="token operator">!</span>port_var&#125;</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">break</span>    <span class="token keyword">fi</span>        <span class="token assign-left variable">ZOOKEEPER_CONFIG</span><span class="token operator">+=</span><span class="token string">"    &lt;node index=<span class="token entity" title="\&quot;">\"</span><span class="token variable">$&#123;zk_index&#125;</span><span class="token entity" title="\&quot;">\"</span>><span class="token entity" title="\n">\n</span>"</span>    <span class="token assign-left variable">ZOOKEEPER_CONFIG</span><span class="token operator">+=</span><span class="token string">"        &lt;host><span class="token variable">$&#123;<span class="token operator">!</span>host_var&#125;</span>&lt;/host><span class="token entity" title="\n">\n</span>"</span>    <span class="token assign-left variable">ZOOKEEPER_CONFIG</span><span class="token operator">+=</span><span class="token string">"        &lt;port><span class="token variable">$&#123;<span class="token operator">!</span>port_var&#125;</span>&lt;/port><span class="token entity" title="\n">\n</span>"</span>    <span class="token assign-left variable">ZOOKEEPER_CONFIG</span><span class="token operator">+=</span><span class="token string">"    &lt;/node><span class="token entity" title="\n">\n</span>"</span>        <span class="token assign-left variable">zk_index</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>zk_index <span class="token operator">+</span> <span class="token number">1</span><span class="token variable">))</span></span><span class="token keyword">done</span><span class="token assign-left variable">ZOOKEEPER_CONFIG</span><span class="token operator">+=</span><span class="token string">"&lt;/zookeeper>"</span><span class="token comment"># 生成 remote_servers 配置</span><span class="token builtin class-name">declare</span> <span class="token parameter variable">-A</span> shard_nodes config_content<span class="token assign-left variable">ck_index</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># 首先读取所有节点信息并根据 shard 进行分组</span><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token assign-left variable">host_var</span><span class="token operator">=</span><span class="token string">"ck_node_<span class="token variable">$&#123;ck_index&#125;</span>_host"</span>    <span class="token assign-left variable">tcp_port_var</span><span class="token operator">=</span><span class="token string">"ck_node_<span class="token variable">$&#123;ck_index&#125;</span>_tcp_port"</span>    <span class="token assign-left variable">http_port_var</span><span class="token operator">=</span><span class="token string">"ck_node_<span class="token variable">$&#123;ck_index&#125;</span>_http_port"</span>    <span class="token assign-left variable">interserver_port_var</span><span class="token operator">=</span><span class="token string">"ck_node_<span class="token variable">$&#123;ck_index&#125;</span>_interserver_http_port"</span>    <span class="token assign-left variable">user_var</span><span class="token operator">=</span><span class="token string">"ck_node_<span class="token variable">$&#123;ck_index&#125;</span>_user"</span>    <span class="token assign-left variable">password_var</span><span class="token operator">=</span><span class="token string">"ck_node_<span class="token variable">$&#123;ck_index&#125;</span>_password"</span>    <span class="token assign-left variable">shard_var</span><span class="token operator">=</span><span class="token string">"ck_node_<span class="token variable">$&#123;ck_index&#125;</span>_shard"</span>    <span class="token assign-left variable">replica_var</span><span class="token operator">=</span><span class="token string">"ck_node_<span class="token variable">$&#123;ck_index&#125;</span>_replica"</span>    <span class="token comment"># 检查所有变量是否为空，若有一个为空则跳出循环</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$&#123;<span class="token operator">!</span>host_var&#125;</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">\</span>       <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$&#123;<span class="token operator">!</span>tcp_port_var&#125;</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">\</span>       <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$&#123;<span class="token operator">!</span>http_port_var&#125;</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">\</span>       <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$&#123;<span class="token operator">!</span>interserver_port_var&#125;</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">\</span>       <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$&#123;<span class="token operator">!</span>user_var&#125;</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">\</span>       <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$&#123;<span class="token operator">!</span>password_var&#125;</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">\</span>       <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$&#123;<span class="token operator">!</span>shard_var&#125;</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">\</span>       <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$&#123;<span class="token operator">!</span>replica_var&#125;</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">break</span>    <span class="token keyword">fi</span>    <span class="token comment"># 将当前节点信息存入以 shard 为 key 的数组</span>    shard_nodes<span class="token punctuation">[</span><span class="token string">"<span class="token variable">$&#123;<span class="token operator">!</span>shard_var&#125;</span>"</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;-</span><span class="token string">NODE            &lt;replica>                &lt;host><span class="token variable">$&#123;<span class="token operator">!</span>host_var&#125;</span>&lt;/host>                &lt;port><span class="token variable">$&#123;<span class="token operator">!</span>tcp_port_var&#125;</span>&lt;/port>                &lt;user><span class="token variable">$&#123;<span class="token operator">!</span>user_var&#125;</span>&lt;/user>                &lt;password><span class="token variable">$&#123;<span class="token operator">!</span>password_var&#125;</span>&lt;/password>            &lt;/replica><span class="token entity" title="\n">\n</span>NODE</span>    <span class="token variable">)</span></span>    <span class="token assign-left variable">NODE_CK_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;BASE_CK_PATH&#125;</span>/ck_node_<span class="token variable">$&#123;ck_index&#125;</span>"</span>    <span class="token assign-left variable">config_template</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> $<span class="token punctuation">&#123;</span>CONFIG_FOLDER<span class="token punctuation">&#125;</span>/config_template.xml<span class="token variable">)</span></span>    <span class="token assign-left variable">config_template</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$config_template</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s|\<span class="token variable">$&#123;BASE_CK_PATH&#125;</span>|<span class="token variable">$&#123;NODE_CK_PATH&#125;</span>|g"</span><span class="token variable">)</span></span>    <span class="token assign-left variable">config_template</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$config_template</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s|\<span class="token variable">$&#123;HTTP_PORT&#125;</span>|<span class="token variable">$&#123;<span class="token operator">!</span>http_port_var&#125;</span>|g"</span><span class="token variable">)</span></span>    <span class="token assign-left variable">config_template</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$config_template</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s|\<span class="token variable">$&#123;TCP_PORT&#125;</span>|<span class="token variable">$&#123;<span class="token operator">!</span>tcp_port_var&#125;</span>|g"</span><span class="token variable">)</span></span>    <span class="token assign-left variable">config_template</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$config_template</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s|\<span class="token variable">$&#123;INTERSERVER_HTTP_PORT&#125;</span>|<span class="token variable">$&#123;<span class="token operator">!</span>interserver_port_var&#125;</span>|g"</span><span class="token variable">)</span></span>    <span class="token assign-left variable">config_template</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$config_template</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s|\<span class="token variable">$&#123;MACROS_SHARD&#125;</span>|<span class="token variable">$&#123;<span class="token operator">!</span>shard_var&#125;</span>|g"</span><span class="token variable">)</span></span>    <span class="token assign-left variable">config_template</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$config_template</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s|\<span class="token variable">$&#123;MACROS_REPLICA&#125;</span>|<span class="token variable">$&#123;<span class="token operator">!</span>replica_var&#125;</span>|g"</span><span class="token variable">)</span></span>    <span class="token assign-left variable">config_template</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$config_template</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s|\<span class="token variable">$&#123;CK_PASSWORD&#125;</span>|<span class="token variable">$&#123;<span class="token operator">!</span>password_var&#125;</span>|g"</span><span class="token variable">)</span></span>        <span class="token assign-left variable">config_template</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$config_template</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s|\<span class="token variable">$&#123;ck_index&#125;</span>|<span class="token variable">$&#123;<span class="token operator">!</span>ck_index&#125;</span>|g"</span><span class="token variable">)</span></span>            <span class="token comment"># 将生成的配置内容存入字典</span>    config_content<span class="token punctuation">[</span><span class="token string">"config_node<span class="token variable">$&#123;ck_index&#125;</span>"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$config_template</span>"</span>    <span class="token comment"># users文件生成</span>    <span class="token assign-left variable">users_template</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> $<span class="token punctuation">&#123;</span>CONFIG_FOLDER<span class="token punctuation">&#125;</span>/users_template.xml<span class="token variable">)</span></span>    <span class="token assign-left variable">users_template</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$users_template</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s|\<span class="token variable">$&#123;CK_PASSWORD&#125;</span>|<span class="token variable">$&#123;<span class="token operator">!</span>password_var&#125;</span>|g"</span><span class="token variable">)</span></span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$users_template</span>"</span> <span class="token operator">></span> <span class="token string">"<span class="token variable">$&#123;CONFIG_FOLDER&#125;</span>/users_node<span class="token variable">$&#123;ck_index&#125;</span>.xml"</span>    <span class="token assign-left variable">ck_index</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>ck_index <span class="token operator">+</span> <span class="token number">1</span><span class="token variable">))</span></span><span class="token keyword">done</span><span class="token comment"># 构建最终的 XML 配置</span><span class="token assign-left variable">REMOTE_SERVERS_CONFIG</span><span class="token operator">=</span><span class="token string">"&lt;remote_servers><span class="token entity" title="\n">\n</span>"</span><span class="token assign-left variable">REMOTE_SERVERS_CONFIG</span><span class="token operator">+=</span><span class="token string">"    &lt;<span class="token variable">$&#123;CK_CLUSTER_NAME&#125;</span>><span class="token entity" title="\n">\n</span>"</span><span class="token keyword">for</span> <span class="token for-or-select variable">shard</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$&#123;<span class="token operator">!</span>shard_nodes<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token assign-left variable">REMOTE_SERVERS_CONFIG</span><span class="token operator">+=</span><span class="token string">"        &lt;shard><span class="token entity" title="\n">\n</span>"</span>    <span class="token assign-left variable">REMOTE_SERVERS_CONFIG</span><span class="token operator">+=</span><span class="token string">"            &lt;internal_replication>true&lt;/internal_replication>  <span class="token entity" title="\n">\n</span>"</span>    <span class="token assign-left variable">REMOTE_SERVERS_CONFIG</span><span class="token operator">+=</span><span class="token string">"<span class="token variable">$&#123;shard_nodes<span class="token punctuation">[</span>$shard<span class="token punctuation">]</span>&#125;</span>"</span>    <span class="token assign-left variable">REMOTE_SERVERS_CONFIG</span><span class="token operator">+=</span><span class="token string">"        &lt;/shard><span class="token entity" title="\n">\n</span>"</span><span class="token keyword">done</span><span class="token assign-left variable">REMOTE_SERVERS_CONFIG</span><span class="token operator">+=</span><span class="token string">"    &lt;/<span class="token variable">$&#123;CK_CLUSTER_NAME&#125;</span>><span class="token entity" title="\n">\n</span>"</span><span class="token assign-left variable">REMOTE_SERVERS_CONFIG</span><span class="token operator">+=</span><span class="token string">"&lt;/remote_servers>"</span><span class="token comment"># 动态修改配置文件（插入 Zookeeper\CK集群 配置）</span><span class="token keyword">for</span> <span class="token for-or-select variable">node_config</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$&#123;<span class="token operator">!</span>config_content<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token string">"处理 <span class="token variable">$node_config</span> ..."</span>    <span class="token comment"># 创建临时文件</span>    <span class="token assign-left variable">temp_file</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;node_config&#125;</span>_tmp.xml"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$&#123;config_content<span class="token punctuation">[</span>$node_config<span class="token punctuation">]</span>&#125;</span>"</span> <span class="token operator">></span> <span class="token string">"<span class="token variable">$temp_file</span>"</span>    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">''</span> <span class="token string">'/&lt;\/yandex>/d'</span> <span class="token string">"<span class="token variable">$temp_file</span>"</span>    <span class="token comment"># linux下为</span>    <span class="token comment"># sed -i '/&lt;\/yandex>/d' "$temp_file"    </span>    <span class="token comment"># 拼接 Zookeeper 和 Remote Servers 配置</span>    <span class="token assign-left variable">combined_insert</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;ZOOKEEPER_CONFIG&#125;</span><span class="token variable">$&#123;REMOTE_SERVERS_CONFIG&#125;</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$combined_insert</span>"</span> <span class="token operator">>></span> <span class="token string">"<span class="token variable">$temp_file</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"&lt;/yandex>"</span> <span class="token operator">>></span> <span class="token string">"<span class="token variable">$temp_file</span>"</span>        <span class="token function">mv</span> <span class="token string">"<span class="token variable">$temp_file</span>"</span> <span class="token string">"<span class="token variable">$CONFIG_FOLDER</span>/<span class="token variable">$&#123;node_config&#125;</span>.xml"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"生成 <span class="token variable">$node_config</span> 完成: <span class="token variable">$&#123;node_config&#125;</span>.xml"</span><span class="token keyword">done</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6、config-template-xml"><a href="#6、config-template-xml" class="headerlink" title="6、config_template.xml"></a>6、config_template.xml</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>yandex<span class="token operator">></span>    <span class="token operator">&lt;</span>logger<span class="token operator">></span>        <span class="token operator">&lt;</span>level<span class="token operator">></span>notice<span class="token operator">&lt;</span>/level<span class="token operator">></span>        <span class="token operator">&lt;</span>log<span class="token operator">></span><span class="token variable">$&#123;BASE_CK_PATH&#125;</span>/log/clickhouse-server.log<span class="token operator">&lt;</span>/log<span class="token operator">></span>        <span class="token operator">&lt;</span>errorlog<span class="token operator">></span><span class="token variable">$&#123;BASE_CK_PATH&#125;</span>/log/clickhouse-server.err.log<span class="token operator">&lt;</span>/errorlog<span class="token operator">></span>        <span class="token operator">&lt;</span>size<span class="token operator">></span>1000M<span class="token operator">&lt;</span>/size<span class="token operator">></span>        <span class="token operator">&lt;</span>count<span class="token operator">></span><span class="token number">1</span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/count<span class="token operator">></span>    <span class="token operator">&lt;</span>/logger<span class="token operator">></span>    <span class="token operator">&lt;</span>path<span class="token operator">></span><span class="token variable">$&#123;BASE_CK_PATH&#125;</span>/data/<span class="token operator">&lt;</span>/path<span class="token operator">></span>    <span class="token operator">&lt;</span>tmp_path<span class="token operator">></span><span class="token variable">$&#123;BASE_CK_PATH&#125;</span>/tmp/<span class="token operator">&lt;</span>/tmp_path<span class="token operator">></span>    <span class="token operator">&lt;</span>user_files_path<span class="token operator">></span><span class="token variable">$&#123;BASE_CK_PATH&#125;</span>/data/user_files/<span class="token operator">&lt;</span>/user_files_path<span class="token operator">></span>    <span class="token operator">&lt;</span>users_config<span class="token operator">></span><span class="token variable">$&#123;BASE_CK_PATH&#125;</span>/config/users_node<span class="token variable">$&#123;ck_index&#125;</span>.xml<span class="token operator">&lt;</span>/users_config<span class="token operator">></span>        <span class="token operator">&lt;</span>users<span class="token operator">></span>        <span class="token operator">&lt;</span>default<span class="token operator">></span>            <span class="token operator">&lt;</span>password<span class="token operator">></span><span class="token variable">$&#123;CK_PASSWORD&#125;</span><span class="token operator">&lt;</span>/password<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- 空密码 --<span class="token operator">></span>            <span class="token operator">&lt;</span>networks<span class="token operator">></span>                <span class="token operator">&lt;</span>ip<span class="token operator">></span>::/<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/ip<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- 允许所有IP访问 --<span class="token operator">></span>            <span class="token operator">&lt;</span>/networks<span class="token operator">></span>            <span class="token operator">&lt;</span>profile<span class="token operator">></span>default<span class="token operator">&lt;</span>/profile<span class="token operator">></span>            <span class="token operator">&lt;</span>quota<span class="token operator">></span>default<span class="token operator">&lt;</span>/quota<span class="token operator">></span>            <span class="token operator">&lt;</span>access_management<span class="token operator">></span><span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/access_management<span class="token operator">></span>        <span class="token operator">&lt;</span>/default<span class="token operator">></span>    <span class="token operator">&lt;</span>/users<span class="token operator">></span>        <span class="token operator">&lt;</span>default_profile<span class="token operator">></span>default<span class="token operator">&lt;</span>/default_profile<span class="token operator">></span>    <span class="token operator">&lt;</span>default_database<span class="token operator">></span>default<span class="token operator">&lt;</span>/default_database<span class="token operator">></span>    <span class="token operator">&lt;</span>http<span class="token operator">></span>        <span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token variable">$&#123;HTTP_PORT&#125;</span><span class="token operator">&lt;</span>/port<span class="token operator">></span>        <span class="token operator">&lt;</span>max_connections<span class="token operator">></span><span class="token number">102</span><span class="token operator"><span class="token file-descriptor important">4</span>&lt;</span>/max_connections<span class="token operator">></span>        <span class="token operator">&lt;</span>async_insert<span class="token operator">></span><span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/async_insert<span class="token operator">></span>    <span class="token operator">&lt;</span>/http<span class="token operator">></span>    <span class="token operator">&lt;</span>listen_host<span class="token operator">></span><span class="token number">0.0</span>.0.<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/listen_host<span class="token operator">></span>    <span class="token operator">&lt;</span>listen_host<span class="token operator">></span>::<span class="token operator">&lt;</span>/listen_host<span class="token operator">></span>    <span class="token operator">&lt;</span>http_port<span class="token operator">></span><span class="token variable">$&#123;HTTP_PORT&#125;</span><span class="token operator">&lt;</span>/http_port<span class="token operator">></span>    <span class="token operator">&lt;</span>tcp_port<span class="token operator">></span><span class="token variable">$&#123;TCP_PORT&#125;</span><span class="token operator">&lt;</span>/tcp_port<span class="token operator">></span>    <span class="token operator">&lt;</span>interserver_http_port<span class="token operator">></span><span class="token variable">$&#123;INTERSERVER_HTTP_PORT&#125;</span><span class="token operator">&lt;</span>/interserver_http_port<span class="token operator">></span>    <span class="token operator">&lt;</span>distributed_ddl<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- Path <span class="token keyword">in</span> ZooKeeper to queue with DDL queries --<span class="token operator">></span>        <span class="token operator">&lt;</span>path<span class="token operator">></span>/clickhouse/task_queue/ddl<span class="token operator">&lt;</span>/path<span class="token operator">></span>    <span class="token operator">&lt;</span>/distributed_ddl<span class="token operator">></span>    <span class="token operator">&lt;</span>macros<span class="token operator">></span>        <span class="token operator">&lt;</span>shard<span class="token operator">></span><span class="token variable">$&#123;MACROS_SHARD&#125;</span><span class="token operator">&lt;</span>/shard<span class="token operator">></span>        <span class="token operator">&lt;</span>replica<span class="token operator">></span><span class="token variable">$&#123;MACROS_REPLICA&#125;</span><span class="token operator">&lt;</span>/replica<span class="token operator">></span>    <span class="token operator">&lt;</span>/macros<span class="token operator">></span><span class="token operator">&lt;</span>/yandex<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7、users-template-xml"><a href="#7、users-template-xml" class="headerlink" title="7、users_template.xml"></a>7、users_template.xml</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>yandex<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- Profiles of settings. --<span class="token operator">></span>    <span class="token operator">&lt;</span>profiles<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- Default settings. --<span class="token operator">></span>        <span class="token operator">&lt;</span>default<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- Maximum memory usage <span class="token keyword">for</span> processing single query, <span class="token keyword">in</span> bytes. --<span class="token operator">></span>            <span class="token operator">&lt;</span>max_memory_usage<span class="token operator">></span><span class="token number">1000000000</span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/max_memory_usage<span class="token operator">></span>            <span class="token operator">&lt;</span>load_balancing<span class="token operator">></span>random<span class="token operator">&lt;</span>/load_balancing<span class="token operator">></span>        <span class="token operator">&lt;</span>/default<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- Profile that allows only <span class="token builtin class-name">read</span> queries. --<span class="token operator">></span>        <span class="token operator">&lt;</span>readonly<span class="token operator">></span>            <span class="token operator">&lt;</span>readonly<span class="token operator">></span><span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/readonly<span class="token operator">></span>        <span class="token operator">&lt;</span>/readonly<span class="token operator">></span>    <span class="token operator">&lt;</span>/profiles<span class="token operator">></span>    <span class="token operator">&lt;</span>users<span class="token operator">></span>        <span class="token operator">&lt;</span>default<span class="token operator">></span>            <span class="token operator">&lt;</span>password<span class="token operator">></span><span class="token variable">$&#123;CK_PASSWORD&#125;</span><span class="token operator">&lt;</span>/password<span class="token operator">></span>             <span class="token operator">&lt;</span>networks<span class="token operator">></span>                <span class="token operator">&lt;</span>ip<span class="token operator">></span>::/<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/ip<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- 允许所有IP访问 --<span class="token operator">></span>            <span class="token operator">&lt;</span>/networks<span class="token operator">></span>            <span class="token operator">&lt;</span>profile<span class="token operator">></span>default<span class="token operator">&lt;</span>/profile<span class="token operator">></span>            <span class="token operator">&lt;</span>quota<span class="token operator">></span>default<span class="token operator">&lt;</span>/quota<span class="token operator">></span>            <span class="token operator">&lt;</span>access_management<span class="token operator">></span><span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/access_management<span class="token operator">></span>        <span class="token operator">&lt;</span>/default<span class="token operator">></span>    <span class="token operator">&lt;</span>/users<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- Quotas. --<span class="token operator">></span>    <span class="token operator">&lt;</span>quotas<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- Name of quota. --<span class="token operator">></span>        <span class="token operator">&lt;</span>default<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- Limits <span class="token keyword">for</span> <span class="token function">time</span> interval. You could specify many intervals with different limits. --<span class="token operator">></span>            <span class="token operator">&lt;</span>interval<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span>-- Length of interval. --<span class="token operator">></span>                <span class="token operator">&lt;</span>duration<span class="token operator">></span><span class="token number">360</span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/duration<span class="token operator">></span>                <span class="token operator">&lt;</span>distributed_product_mode<span class="token operator">></span>allow<span class="token operator">&lt;</span>/distributed_product_mode<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span>-- No limits. Just calculate resource usage <span class="token keyword">for</span> <span class="token function">time</span> interval. --<span class="token operator">></span>                <span class="token operator">&lt;</span>queries<span class="token operator">></span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/queries<span class="token operator">></span>                <span class="token operator">&lt;</span>errors<span class="token operator">></span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/errors<span class="token operator">></span>                <span class="token operator">&lt;</span>result_rows<span class="token operator">></span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/result_rows<span class="token operator">></span>                <span class="token operator">&lt;</span>read_rows<span class="token operator">></span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/read_rows<span class="token operator">></span>                <span class="token operator">&lt;</span>execution_time<span class="token operator">></span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/execution_time<span class="token operator">></span>            <span class="token operator">&lt;</span>/interval<span class="token operator">></span>        <span class="token operator">&lt;</span>/default<span class="token operator">></span>    <span class="token operator">&lt;</span>/quotas<span class="token operator">></span><span class="token operator">&lt;</span>/yandex<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clickhouse运维篇（二）：多机器手动部署ck集群.</title>
      <link href="/2024/09/28/clickhouse-yun-wei-pian-er-duo-ji-qi-shou-dong-bu-shu-ck-ji-qun/"/>
      <url>/2024/09/28/clickhouse-yun-wei-pian-er-duo-ji-qi-shou-dong-bu-shu-ck-ji-qun/</url>
      
        <content type="html"><![CDATA[<blockquote><p>熟悉流程并且有真正部署需求可以看一下我的另一篇简化部署的文章，因为多节点配置还是比较麻烦的先要jdk、zookeeper，再ck，还有各种配置文件登录不同机器上手动改配置文件还挺容易出错的。<br><a href="https://blog.csdn.net/qq_42873554/article/details/143367712?spm=1001.2014.3001.5501">clickhouse运维篇（三）：生产环境一键生成配置并快速部署ck集群</a></p></blockquote><h1 id="1、-安装jdk"><a href="#1、-安装jdk" class="headerlink" title="1、 安装jdk"></a>1、 安装jdk</h1><p>上传jdk安装包到各节点</p><p>1、解压安装包 （这里举例解压到&#x2F;opt&#x2F;jdk8u333）</p><p>2、 执行 sh setup.sh install</p><p>3、 修改环境变量</p><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>vi &#x2F;etc&#x2F;profile</p><p>在文件末尾加</p><pre class="line-numbers language-none"><code class="language-none">#javaexport JAVA_HOME&#x3D;&#x2F;opt&#x2F;jdk8u333export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;rt.jar:$&#123;JAVA_HOME&#125;export PATH&#x3D;$PATH:$&#123;JAVA_HOME&#125;&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4、 执行指令生效</p><pre class="line-numbers language-none"><code class="language-none">source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2、-zookeeper集群搭建（选举机制，奇数节点部署）"><a href="#2、-zookeeper集群搭建（选举机制，奇数节点部署）" class="headerlink" title="2、 zookeeper集群搭建（选举机制，奇数节点部署）"></a>2、 zookeeper集群搭建（选举机制，奇数节点部署）</h1><p>举例三个节点：</p><p>172.168.1.206</p><p>172.168.1.207</p><p>172.168.1.208</p><p>上传安装包到各节点</p><p>解压安装包（这里举例解压到&#x2F;opt&#x2F;app&#x2F;zookeeper-3.7.2）</p><p>1、创建目录</p><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;opt&#x2F;app&#x2F;zookeeper-3.7.2&#x2F;zkData<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、 复制zoo_sample.cfg文件命名为 zoo.cfg</p><pre class="line-numbers language-none"><code class="language-none">cp zoo_sample.cfg zoo.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、 在各个节点创建一个id（距离下边在206、207、208三个节点的zkData目录下分别创建）</p><pre class="line-numbers language-none"><code class="language-none">echo 1 &gt;&#x2F;opt&#x2F;app&#x2F;zookeeper-3.7.2&#x2F;zkData&#x2F;myidecho 2 &gt;&#x2F;opt&#x2F;app&#x2F;zookeeper-3.7.2&#x2F;zkData&#x2F;myidecho 3 &gt;&#x2F;opt&#x2F;app&#x2F;zookeeper-3.7.2&#x2F;zkData&#x2F;myid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4、修改zoo.cfg文件</p><pre class="line-numbers language-none"><code class="language-none">vi zoo.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>clientPort为16871</p><p>dataDir为上边创建的zkData</p><p>server.后边的1、2、3为机器节点id；</p><p><strong>server.1&#x3D;172.168.1.206:2888:3888</strong></p><p><strong>server.2&#x3D;172.168.1.207:2888:3888</strong></p><p><strong>server.3&#x3D;172.168.1.208:2888:3888</strong></p><pre class="line-numbers language-none"><code class="language-none">tickTime&#x3D;2000initLimit&#x3D;10syncLimit&#x3D;5dataDir&#x3D;&#x2F;opt&#x2F;app&#x2F;zookeeper-3.7.2&#x2F;zkDataclientPort&#x3D;16871server.1&#x3D;172.168.1.206:2888:3888server.2&#x3D;172.168.1.207:2888:3888server.3&#x3D;172.168.1.208:2888:3888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、 在其余节点重复以上操作，在bin目录下执行启动脚本</p><pre class="line-numbers language-none"><code class="language-none">sh zkServer.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、 查看集群状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./zkServer.sh status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明集群搭建完成，172.168.1.208是主节点</p><h1 id="3、-clickhouse集群规划"><a href="#3、-clickhouse集群规划" class="headerlink" title="3、 clickhouse集群规划"></a>3、 clickhouse集群规划</h1><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184817_badb70f7-25fe-4651-b680-461d6f4c80f8.png" alt="在这里插入图片描述"></p><ol><li>根据集群部署分配的服务器进行预先考虑</li></ol><p>a. 需要多少个分片  【多少台机器多少个分片，最好一个机器不要多分片，会导致查询的负载不平衡，导致短筒效应 (保证分片数&lt;&#x3D;机器数最佳)】</p><p>b. 每个分片多少个副本 【默认同一个分片的副本不要在同一个机器上，不能起到容灾作用，一般情况一个分片内两个实例即可，一主一副】</p><ol start="2"><li><p>同一个实例不能既是主分片又是副本分片，想要部署m分片每个分片内n个实例的集群就需要部署 m*n 个clickhouse实例。</p></li><li><p>例如，所以如果只有三台机器，想部署3分片每个分片2实例的集群就需要3*2&#x3D;6个 实例【遵循上面1.a中 分片数&lt;&#x3D;机器数】。 如果机器1上有了shard1的分片，副本实例就最好启动在机器2或者机器3上【遵循上面1.b中 同一分片副本不在相同机器】<br><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184822_39cbd16f-6ee8-41cd-87a7-8cf856273803.png" alt="在这里插入图片描述"></p></li></ol><h1 id="4、-clickhouse集群搭建"><a href="#4、-clickhouse集群搭建" class="headerlink" title="4、 clickhouse集群搭建"></a>4、 clickhouse集群搭建</h1><p>举例三个节点：</p><p>172.168.1.206</p><p>172.168.1.207</p><p>172.168.1.208</p><p>上传安装包到各节点</p><p>1、解压安装包 （这里举例解压到&#x2F;opt&#x2F;app&#x2F;clickhouse-23.4.2.9)</p><p>2、 修改配置文件，打开config目录</p><pre class="line-numbers language-none"><code class="language-none">cd configvi config.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、 修改config.xml文件</p><p>设置clickhouse端口16860</p><p>打开所有地址监听</p><p>tcp端口默认9000（可以按需修改）</p><pre class="line-numbers language-none"><code class="language-none">&lt;http_port&gt;16860&lt;&#x2F;http_port&gt;&lt;listen_host&gt;::&lt;&#x2F;listen_host&gt;&lt;tcp_port&gt;9000&lt;&#x2F;tcp_port&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加集群节点信息 【三机器两分片、每个分片两个实例的配置文件】</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; clickhose xml需要修改的内容    &lt;remote_servers&gt;        &lt;!-- 可自定义clickhouse集群名 --&gt;        &lt;ck_cluster&gt;            &lt;!-- 数据分片1  --&gt;            &lt;shard&gt;                &lt;internal_replication&gt;true&lt;&#x2F;internal_replication&gt;                &lt;!-- 副本1 --&gt;                &lt;replica&gt;                    &lt;host&gt;172.168.1.206&lt;&#x2F;host&gt;                    &lt;port&gt;9000&lt;&#x2F;port&gt;                    &lt;user&gt;default&lt;&#x2F;user&gt;                    &lt;password&gt;my_password&lt;&#x2F;password&gt;                &lt;&#x2F;replica&gt;                &lt;!-- 副本2 --&gt;                &lt;replica&gt;                    &lt;host&gt;172.168.1.207&lt;&#x2F;host&gt;                    &lt;port&gt;9000&lt;&#x2F;port&gt;                    &lt;user&gt;default&lt;&#x2F;user&gt;                    &lt;password&gt;my_password&lt;&#x2F;password&gt;                &lt;&#x2F;replica&gt;            &lt;&#x2F;shard&gt;            &lt;!-- 数据分片2  --&gt;            &lt;shard&gt;                &lt;internal_replication&gt;true&lt;&#x2F;internal_replication&gt;                &lt;replica&gt;                    &lt;host&gt;172.168.1.207&lt;&#x2F;host&gt;                    &lt;port&gt;9001&lt;&#x2F;port&gt;                    &lt;user&gt;default&lt;&#x2F;user&gt;                    &lt;password&gt;my_password&lt;&#x2F;password&gt;                &lt;&#x2F;replica&gt;                &lt;replica&gt;                    &lt;host&gt;172.168.1.208&lt;&#x2F;host&gt;                    &lt;port&gt;9000&lt;&#x2F;port&gt;                    &lt;user&gt;default&lt;&#x2F;user&gt;                    &lt;password&gt;my_password&lt;&#x2F;password&gt;                &lt;&#x2F;replica&gt;            &lt;&#x2F;shard&gt;        &lt;&#x2F;ck_cluster&gt;    &lt;&#x2F;remote_servers&gt;    &lt;macros&gt;        &lt;shard&gt;02&lt;&#x2F;shard&gt;        &lt;replica&gt;replica_208&lt;&#x2F;replica&gt;    &lt;&#x2F;macros&gt;    &lt;zookeeper&gt;        &lt;!-- index内容为server.id --&gt;        &lt;node index&#x3D;&quot;1&quot;&gt;            &lt;host&gt;172.168.1.206&lt;&#x2F;host&gt;            &lt;port&gt;16871&lt;&#x2F;port&gt;        &lt;&#x2F;node&gt;        &lt;node index&#x3D;&quot;2&quot;&gt;            &lt;host&gt;172.168.1.207&lt;&#x2F;host&gt;            &lt;port&gt;16871&lt;&#x2F;port&gt;        &lt;&#x2F;node&gt;        &lt;node index&#x3D;&quot;3&quot;&gt;            &lt;host&gt;172.168.1.208&lt;&#x2F;host&gt;            &lt;port&gt;16871&lt;&#x2F;port&gt;        &lt;&#x2F;node&gt;    &lt;&#x2F;zookeeper&gt;&lt;!-- 如果一个机器上部署多个实例这几个端口不要冲突 --&gt;    &lt;http_port&gt;16860&lt;&#x2F;http_port&gt;    &lt;tcp_port&gt;9000&lt;&#x2F;tcp_port&gt;    &lt;interserver_http_host&gt;172.168.1.208&lt;&#x2F;interserver_http_host&gt;&lt;interserver_http_port&gt;9009&lt;&#x2F;interserver_http_port&gt;    &lt;http&gt;        &lt;max_connections&gt;1024&lt;&#x2F;max_connections&gt;        &lt;async_insert&gt;1&lt;&#x2F;async_insert&gt; &lt;!-- 启用异步插入 --&gt;    &lt;&#x2F;http&gt;&lt;!-- vim下输入 &#x2F;clickhouse-23.4  查找path相关tag是否配置正确--&gt;&lt;path&gt;&#x2F;opt&#x2F;app&#x2F;my_app-2.4&#x2F;clickhouse-23.4.2.9&#x2F;data&#x2F;&lt;&#x2F;path&gt;  &lt;format_schema_path&gt;&#x2F;opt&#x2F;app&#x2F;my_app-2.4&#x2F;clickhouse-23.4.2.9&#x2F;data&#x2F;format_schemas&#x2F;&lt;&#x2F;format_schema_path&gt;    &lt;log&gt;&#x2F;opt&#x2F;app&#x2F;my_app-2.4&#x2F;clickhouse-23.4.2.9&#x2F;log&#x2F;clickhouse-server&#x2F;clickhouse-server.log&lt;&#x2F;log&gt;    &lt;errorlog&gt;&#x2F;opt&#x2F;app&#x2F;my_app-2.4&#x2F;clickhouse-23.4.2.9&#x2F;log&#x2F;clickhouse-server&#x2F;clickhouse-server.err.log&lt;&#x2F;errorlog&gt;    &lt;tmp_path&gt;&#x2F;opt&#x2F;app&#x2F;my_app-2.4&#x2F;clickhouse-23.4.2.9&#x2F;tmp&#x2F;&lt;&#x2F;tmp_path&gt;    &lt;user_files_path&gt;&#x2F;opt&#x2F;app&#x2F;my_app-2.4&#x2F;clickhouse-23.4.2.9&#x2F;data&#x2F;user_files&#x2F;&lt;&#x2F;user_files_path&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、修改users.xml文件</p><p>设置default账号的密码</p><pre class="line-numbers language-none"><code class="language-none">&lt;password&gt;my_password&lt;&#x2F;password&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、其余节点重复以上步骤，然后启动服务（注意修改config.xml中的<macros>值）</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;opt&#x2F;app&#x2F;my_app-2.4&#x2F;clickhouse-23.4.2.9&#x2F;bin&#x2F;clickhouse server --config-file &#x2F;opt&#x2F;app&#x2F;my_app-2.4&#x2F;clickhouse-23.4.2.9&#x2F;config&#x2F;config.xml --pid-file &#x2F;opt&#x2F;app&#x2F;my_app-2.4&#x2F;clickhouse-23.4.2.9&#x2F;clickhouse.pid --daemon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="5、-配置nginx代理"><a href="#5、-配置nginx代理" class="headerlink" title="5、 配置nginx代理"></a>5、 配置nginx代理</h1><p>编辑nginx配置文件底部加入clickhouse反向代理供web服务调用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span>  /opt/app/my_app-2.4/nginx/conf/my_app.confupstream clickhouse_cluster <span class="token punctuation">&#123;</span>    server <span class="token number">172.168</span>.1.206:16860<span class="token punctuation">;</span>    server <span class="token number">172.168</span>.1.207:16860<span class="token punctuation">;</span>    server <span class="token number">172.168</span>.1.207:16861<span class="token punctuation">;</span>        server <span class="token number">172.168</span>.1.208:16860<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment"># 新增的 ClickHouse 反向代理并配置相应的黑白名单策略， 入的流量应该是访问ck集群的流量，</span><span class="token comment"># 所以应该是访问源的网段也就是my_app对应的网段或者ip</span>server <span class="token punctuation">&#123;</span>    listen <span class="token number">1442</span><span class="token punctuation">;</span>    allow localhost<span class="token punctuation">;</span> allow <span class="token number">192.168</span>.13.0/24<span class="token punctuation">;</span> allow <span class="token number">10.1</span>.5.0/16<span class="token punctuation">;</span>        deny all<span class="token punctuation">;</span>    location / <span class="token punctuation">&#123;</span>        proxy_pass http://clickhouse_cluster<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>● nginx反向代理验证</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# curl localhost:1442Ok.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="6、-集群验证"><a href="#6、-集群验证" class="headerlink" title="6、 集群验证"></a>6、 集群验证</h1><p>这里使用dbever工具验证</p><p>1、执行sql，查看ck集群节点状态</p><pre class="line-numbers language-none"><code class="language-none">SELECT * from system.clusters;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、执行sql，查看zookeeper中&#x2F;clickhouse的节点是否存在</p><pre class="line-numbers language-none"><code class="language-none">SELECT * FROM system.zookeeper WHERE path &#x3D; &#39;&#x2F;clickhouse&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果截图如上则表示分布式集群部署成功<br> 查看各个节点状态，关注最后一列可以看出各个节点的与集群的连接状况【比如第三行数字22就是实例与cluster连接有问题】</p><h1 id="7、-分布式，本地表测试"><a href="#7、-分布式，本地表测试" class="headerlink" title="7、 分布式，本地表测试"></a>7、 分布式，本地表测试</h1><ul><li>语句加<code>on cluster ck_cluster</code> 就是在所有实例上执行</li></ul><p>创建一个表</p><pre class="line-numbers language-none"><code class="language-none">-- 删除本地表DROP TABLE IF EXISTS test_table_local on cluster ck_cluster SYNC;-- 创建本地表CREATE TABLE test_table_local ON CLUSTER ck_cluster(    &#96;tenantId&#96;        UInt64 CODEC (Delta(8), ZSTD(1)),    &#96;alarmId&#96;         String,    &#96;grade&#96;           Int32,) ENGINE &#x3D; ReplicatedMergeTree(&#39;&#x2F;clickhouse&#x2F;tables&#x2F;&#123;uuid&#125;&#x2F;&#123;shard&#125;&#x2F;audit_log_local&#39;, &#39;&#123;replica&#125;&#39;);-- 删除分布式表DROP TABLE IF EXISTS test_table_all on cluster ck_cluster SYNC;-- 创建分布式表CREATE TABLE test_table_all ON CLUSTER ck_cluster as test_table_local ENGINE &#x3D; Distributed(&#39;ck_cluster&#39;, &#39;default&#39;, &#39;test_table_local&#39;, rand());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分布式表测试</p><pre class="line-numbers language-none"><code class="language-none">SELECT count(*) FROM test_table_all;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本地表测试</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO test_table_local (id, name, grade) VALUES (1,&#39;jack&#39;,60);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clickhouse运维篇（一）：docker-compose 快速部署clickhouse集群.</title>
      <link href="/2024/09/27/clickhouse-yun-wei-pian-yi-docker-compose-kuai-su-bu-shu-clickhouse-ji-qun/"/>
      <url>/2024/09/27/clickhouse-yun-wei-pian-yi-docker-compose-kuai-su-bu-shu-clickhouse-ji-qun/</url>
      
        <content type="html"><![CDATA[<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p><strong>注意事项：</strong></p><ol><li><strong>镜像版本号注意保持一致   [zookeeper:3.7,   clickhouse&#x2F;clickhouse-server:22.5.4]</strong></li><li>config里面的参数有些是必须的，日志报错缺少参数去官方文档里找 <a href="https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings">config.xm参数官网</a></li></ol><p>在开始之前，请确保您的系统已经安装了以下工具：</p><ul><li><a href="https://docs.docker.com/get-docker/">Docker</a></li><li><a href="https://docs.docker.com/compose/install/">Docker Compose</a></li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>首先，我们需要为 ClickHouse 集群创建目录结构来存放数据和配置文件。执行以下命令来创建目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> clickhouse_cluster/<span class="token punctuation">&#123;</span>zk/data1,zk/data2,zk/data3,zk/datalog1,zk/datalog2,zk/datalog3,ck/data/clickhouse01,ck/data/clickhouse02,ck/data/clickhouse03,ck/config/clickhouse01,ck/config/clickhouse02,ck/config/clickhouse03<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="第一步：编写-docker-compose-yml-文件"><a href="#第一步：编写-docker-compose-yml-文件" class="headerlink" title="第一步：编写 docker-compose.yml 文件"></a>第一步：编写 <code>docker-compose.yml</code> 文件</h2><p>在 <code>clickhouse_cluster</code> 目录下创建 <code>docker-compose.yml</code> 文件，这个文件定义了 ZooKeeper 和三个 ClickHouse 节点。为了安全性，我们会替换敏感数据如密码。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span><span class="token comment"># localhost:2181,localhost:2182,localhost:2183</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx_server    <span class="token key atrule">restart</span><span class="token punctuation">:</span> no    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"80:80"</span>        <span class="token comment"># 映射80端口，用于HTTP服务</span>      <span class="token punctuation">-</span> <span class="token string">"443:443"</span>      <span class="token comment"># 映射443端口，用于HTTPS服务</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./nginx/nginx.conf<span class="token punctuation">:</span>/etc/nginx/nginx.conf   <span class="token comment"># 挂载自定义的 Nginx 配置文件</span>      <span class="token punctuation">-</span> ./nginx/logs<span class="token punctuation">:</span>/var/log/nginx                <span class="token comment"># 挂载日志目录</span>      <span class="token punctuation">-</span> ./nginx/certs<span class="token punctuation">:</span>/etc/nginx/certs             <span class="token comment"># 挂载证书目录（用于HTTPS）</span>  <span class="token key atrule">zookeeper1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span><span class="token number">3.7</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zookeeper1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zookeeper1    <span class="token key atrule">restart</span><span class="token punctuation">:</span> no    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"2181:2181"</span>      <span class="token punctuation">-</span> <span class="token string">"2888:2888"</span>  <span class="token comment"># 集群通信端口</span>      <span class="token punctuation">-</span> <span class="token string">"3888:3888"</span>  <span class="token comment"># 选举端口</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">ZOO_MY_ID</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">ZOO_SERVERS</span><span class="token punctuation">:</span> server.1=zookeeper1<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.2=zookeeper2<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.3=zookeeper3<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./zk/data1<span class="token punctuation">:</span>/data      <span class="token punctuation">-</span> ./zk/datalog1<span class="token punctuation">:</span>/datalog  <span class="token key atrule">zookeeper2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span><span class="token number">3.7</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zookeeper2        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zookeeper2    <span class="token key atrule">restart</span><span class="token punctuation">:</span> no    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"2182:2181"</span>      <span class="token punctuation">-</span> <span class="token string">"2889:2888"</span>  <span class="token comment"># 集群通信端口</span>      <span class="token punctuation">-</span> <span class="token string">"3889:3888"</span>  <span class="token comment"># 选举端口</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">ZOO_MY_ID</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">ZOO_SERVERS</span><span class="token punctuation">:</span> server.1=zookeeper1<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.2=zookeeper2<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.3=zookeeper3<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./zk/data2<span class="token punctuation">:</span>/data      <span class="token punctuation">-</span> ./zk/datalog2<span class="token punctuation">:</span>/datalog          <span class="token key atrule">zookeeper3</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span><span class="token number">3.7</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zookeeper3        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zookeeper3    <span class="token key atrule">restart</span><span class="token punctuation">:</span> no    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"2183:2181"</span>      <span class="token punctuation">-</span> <span class="token string">"2890:2888"</span>  <span class="token comment"># 集群通信端口</span>      <span class="token punctuation">-</span> <span class="token string">"3890:3888"</span>  <span class="token comment"># 选举端口</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">ZOO_MY_ID</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token key atrule">ZOO_SERVERS</span><span class="token punctuation">:</span> server.1=zookeeper1<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.2=zookeeper2<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.3=zookeeper3<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./zk/data3<span class="token punctuation">:</span>/data      <span class="token punctuation">-</span> ./zk/datalog3<span class="token punctuation">:</span>/datalog  <span class="token key atrule">clickhouse01</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> clickhouse/clickhouse<span class="token punctuation">-</span>server<span class="token punctuation">:</span>23.4.2    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> clickhouse01    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> clickhouse01    <span class="token key atrule">restart</span><span class="token punctuation">:</span> no    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8123:8123"</span>   <span class="token comment"># HTTP接口</span>      <span class="token punctuation">-</span> <span class="token string">"9000:9000"</span>   <span class="token comment"># TCP接口</span>      <span class="token punctuation">-</span> <span class="token string">"9009:9009"</span>   <span class="token comment"># Internode通信接口</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./ck/data/clickhouse01<span class="token punctuation">:</span>/var/lib/clickhouse      <span class="token punctuation">-</span> ./ck/config/clickhouse01<span class="token punctuation">:</span>/etc/clickhouse<span class="token punctuation">-</span>server      <span class="token comment"># - ./config/clickhouse01/users.xml:/etc/clickhouse-server/users.d/default-user.xml</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">CLICKHOUSE_DB</span><span class="token punctuation">:</span> default      <span class="token comment"># CLICKHOUSE_USER: default</span>      <span class="token key atrule">CLICKHOUSE_PASSWORD</span><span class="token punctuation">:</span> <span class="token string">"your_secure_password"</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> zookeeper1      <span class="token punctuation">-</span> zookeeper2      <span class="token punctuation">-</span> zookeeper3  <span class="token key atrule">clickhouse02</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> clickhouse/clickhouse<span class="token punctuation">-</span>server<span class="token punctuation">:</span>23.4.2    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> clickhouse02    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> clickhouse02        <span class="token key atrule">restart</span><span class="token punctuation">:</span> no    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8124:8123"</span>   <span class="token comment"># HTTP接口</span>      <span class="token punctuation">-</span> <span class="token string">"9001:9000"</span>   <span class="token comment"># TCP接口</span>      <span class="token punctuation">-</span> <span class="token string">"9010:9009"</span>   <span class="token comment"># Internode通信接口</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./ck/data/clickhouse02<span class="token punctuation">:</span>/var/lib/clickhouse      <span class="token punctuation">-</span> ./ck/config/clickhouse02<span class="token punctuation">:</span>/etc/clickhouse<span class="token punctuation">-</span>server    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">CLICKHOUSE_DB</span><span class="token punctuation">:</span> default      <span class="token comment"># CLICKHOUSE_USER: default</span>      <span class="token key atrule">CLICKHOUSE_PASSWORD</span><span class="token punctuation">:</span> <span class="token string">"your_secure_password"</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> zookeeper1      <span class="token punctuation">-</span> zookeeper2      <span class="token punctuation">-</span> zookeeper3  <span class="token key atrule">clickhouse03</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> clickhouse/clickhouse<span class="token punctuation">-</span>server<span class="token punctuation">:</span>23.4.2    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> clickhouse03    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> clickhouse03            <span class="token key atrule">restart</span><span class="token punctuation">:</span> no    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8125:8123"</span>   <span class="token comment"># HTTP接口</span>      <span class="token punctuation">-</span> <span class="token string">"9002:9000"</span>   <span class="token comment"># TCP接口</span>      <span class="token punctuation">-</span> <span class="token string">"9011:9009"</span>   <span class="token comment"># Internode通信接口</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./ck/data/clickhouse03<span class="token punctuation">:</span>/var/lib/clickhouse      <span class="token punctuation">-</span> ./ck/config/clickhouse03<span class="token punctuation">:</span>/etc/clickhouse<span class="token punctuation">-</span>server    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">CLICKHOUSE_DB</span><span class="token punctuation">:</span> default      <span class="token comment"># CLICKHOUSE_USER: default</span>      <span class="token key atrule">CLICKHOUSE_PASSWORD</span><span class="token punctuation">:</span> <span class="token string">"your_secure_password"</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> zookeeper1      <span class="token punctuation">-</span> zookeeper2      <span class="token punctuation">-</span> zookeeper3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关键点说明："><a href="#关键点说明：" class="headerlink" title="关键点说明："></a>关键点说明：</h3><ul><li><strong>Zookeeper</strong>：Zookeeper 用于协调 ClickHouse 集群中的分布式事务。</li><li><strong>ClickHouse 节点</strong>：我们设置了三个 ClickHouse 节点（<code>clickhouse01</code>、<code>clickhouse02</code> 和 <code>clickhouse03</code>），它们通过不同的端口进行通信。</li><li><strong>密码</strong>：为了安全性，密码使用占位符 <code>&quot;your_secure_password&quot;</code>，请确保使用强密码替换。</li></ul><h2 id="第二步：编写-ClickHouse-配置文件"><a href="#第二步：编写-ClickHouse-配置文件" class="headerlink" title="第二步：编写 ClickHouse 配置文件"></a>第二步：编写 ClickHouse 配置文件</h2><p>接下来，创建每个 ClickHouse 节点的配置文件。以 <code>config/clickhouse01/config.xml</code> 为例，其他节点的配置类似。我们将替换原始文件中的敏感信息。</p><p>在 <code>clickhouse_cluster/config/clickhouse01</code> 目录下创建 <code>config.xml</code> 文件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>yandex</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>default</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>max_memory_usage</span><span class="token punctuation">></span></span>10000000000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>max_memory_usage</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>readonly</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>readonly</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>default</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/var/lib/clickhouse/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tmp_path</span><span class="token punctuation">></span></span>/var/lib/clickhouse/tmp/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tmp_path</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user_files_path</span><span class="token punctuation">></span></span>/var/lib/clickhouse/user_files/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user_files_path</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http_port</span><span class="token punctuation">></span></span>8123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http_port</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log</span><span class="token punctuation">></span></span>/var/log/clickhouse-server/clickhouse.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>errorlog</span><span class="token punctuation">></span></span>/var/log/clickhouse-server/clickhouse_error.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>errorlog</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>format_schema_path</span><span class="token punctuation">></span></span>/var/lib/clickhouse/format_schemas/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>format_schema_path</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>default_profile</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>default_profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users_config</span><span class="token punctuation">></span></span>users.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>users_config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mark_cache_size</span><span class="token punctuation">></span></span>5368709120<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mark_cache_size</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zookeeper</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- index内容为server.id --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>zookeeper1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>zookeeper2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>zookeeper3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zookeeper</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remote_servers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my_clickhouse_cluster</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>clickhouse01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>clickhouse02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>clickhouse03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>clickhouse04<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>clickhouse05<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>clickhouse06<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my_clickhouse_cluster</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>remote_servers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listen_host</span><span class="token punctuation">></span></span>::<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listen_host</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listen_host</span><span class="token punctuation">></span></span>0.0.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listen_host</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>yandex</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关键配置说明："><a href="#关键配置说明：" class="headerlink" title="关键配置说明："></a>关键配置说明：</h3><ul><li><strong>ZooKeeper</strong>：配置了 ClickHouse 连接 Zookeeper，使用 <code>zookeeper1:2181\zookeeper1:2181\zookeeper1:2181</code> 地址。</li><li><strong>集群配置</strong>：<code>remote_servers</code> 配置了集群中的三个节点，分别对应 <code>clickhouse01</code>、<code>clickhouse02</code> 和 <code>clickhouse03</code>。</li></ul><h2 id="第三步：编写-users-xml-文件"><a href="#第三步：编写-users-xml-文件" class="headerlink" title="第三步：编写 users.xml 文件"></a>第三步：编写 <code>users.xml</code> 文件</h2><p>在 <code>config/clickhouse01/</code> 目录下创建 <code>users.xml</code> 文件，用于定义用户及其权限。为了安全起见，密码将以占位符形式存在。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>yandex</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>default</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>max_memory_usage</span><span class="token punctuation">></span></span>10000000000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>max_memory_usage</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use_uncompressed_cache</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use_uncompressed_cache</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load_balancing</span><span class="token punctuation">></span></span>random<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load_balancing</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>default</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>default</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>your_secure_password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- Password could be specified in plaintext or in SHA256 (in hex format).                 If you want to specify password in plaintext (not recommended), place it in 'password' element.                 Example: &lt;password>qwerty&lt;/password>.                 Password could be empty.                 If you want to specify SHA256, place it in 'password_sha256_hex' element.                 Example: &lt;password_sha256_hex>65e84be33532fb784c48129675f9eff3a682b27168c0ea744b2cf58ee02337c5&lt;/password_sha256_hex>                 How to generate decent password:                 Execute: PASSWORD=$(base64 &lt; /dev/urandom | head -c8); echo "$PASSWORD"; echo -n "$PASSWORD" | sha256sum | tr -d '-'                 In first line will be password and in second - corresponding SHA256.                 也可以使用加密的密码，用上面的shell命令就可以生成            --></span>            <span class="token comment">&lt;!-- &lt;password_double_sha1_hex>&lt;/password_double_sha1_hex> --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>networks</span> <span class="token attr-name">incl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>networks<span class="token punctuation">"</span></span> <span class="token attr-name">replace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>replace<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ip</span><span class="token punctuation">></span></span>::1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ip</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ip</span><span class="token punctuation">></span></span>127.0.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ip</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>networks</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>quota</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>quota</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>default</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>readonly_user</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>your_readonly_password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>networks</span> <span class="token attr-name">incl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>networks<span class="token punctuation">"</span></span> <span class="token attr-name">replace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>replace<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ip</span><span class="token punctuation">></span></span>::/0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ip</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>networks</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>readonly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>quota</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>quota</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>readonly_user</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>users</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>yandex</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用户权限说明："><a href="#用户权限说明：" class="headerlink" title="用户权限说明："></a>用户权限说明：</h3><ul><li><code>default</code> 用户具有默认的读写权限。</li><li><code>readonly_user</code> 用户具有只读权限，并且可以从任意 IP 访问。</li></ul><h2 id="第四步：启动-ClickHouse-集群"><a href="#第四步：启动-ClickHouse-集群" class="headerlink" title="第四步：启动 ClickHouse 集群"></a>第四步：启动 ClickHouse 集群</h2><p>在 <code>clickhouse_cluster</code> 目录下，运行以下命令来启动整个集群：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>docker-compose up -d</code> 将启动所有服务，包括 ZooKeeper 和六个 ClickHouse 节点。</p><h2 id="第五步：验证集群部署"><a href="#第五步：验证集群部署" class="headerlink" title="第五步：验证集群部署"></a>第五步：验证集群部署</h2><ol><li><p>1.运行以下命令查看容器状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>确保所有容器都处于 “Up” 状态。</p></li><li><p>2.通过 HTTP 接口访问任意 ClickHouse 节点，查看是否可以成功连接：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://localhost:8123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 返回类似于 <code>Ok.</code> 的响应即表示成功。</p></li><li><p>3.从单节点查询集群状态</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> clickhouse01 <span class="token function">bash</span> clickhouse-client<span class="token keyword">select</span> * from system.clusters<span class="token punctuation">;</span><span class="token keyword">select</span> * from system.zookeeper where <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">'/clickhouse'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184800_dfc947f0-4201-4972-9762-541afea7ab01.png" alt="在这里插入图片描述"></p></li></ol><h2 id="六：配置nginx反向代理实现ck集群负载均衡的读写"><a href="#六：配置nginx反向代理实现ck集群负载均衡的读写" class="headerlink" title="六：配置nginx反向代理实现ck集群负载均衡的读写"></a>六：配置nginx反向代理实现ck集群负载均衡的读写</h2><pre class="line-numbers language-none"><code class="language-none">worker_processes auto;events &#123;    worker_connections 1024;  # 设置工作进程的最大连接数&#125;http &#123;    upstream clickhouse_cluster &#123;        server localhost:8123 max_fails&#x3D;3 fail_timeout&#x3D;30s;        server localhost:8124 max_fails&#x3D;3 fail_timeout&#x3D;30s;        server localhost:8125 max_fails&#x3D;3 fail_timeout&#x3D;30s;    &#125;    server &#123;        listen 8080;        location &#x2F; &#123;            proxy_pass http:&#x2F;&#x2F;clickhouse_cluster;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七：文件夹结构"><a href="#七：文件夹结构" class="headerlink" title="七：文件夹结构"></a>七：文件夹结构</h2><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184806_0c793390-74e1-4cdd-9646-c233f6f27402.png" alt="在这里插入图片描述"></p><p>参考链接：<br><a href="https://www.cnblogs.com/yoyo1216/p/13731225.html">https://www.cnblogs.com/yoyo1216/p/13731225.html</a><br><a href="https://www.cnblogs.com/syw20170419/p/16250500.html">https://www.cnblogs.com/syw20170419/p/16250500.html</a><br><a href="https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings">https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java日志框架 总结 slf4j、log4j、logback</title>
      <link href="/2023/01/07/java-ri-zhi-kuang-jia-zong-jie-slf4j-log4j-logback/"/>
      <url>/2023/01/07/java-ri-zhi-kuang-jia-zong-jie-slf4j-log4j-logback/</url>
      
        <content type="html"><![CDATA[<h1 id="Java日志技术"><a href="#Java日志技术" class="headerlink" title="Java日志技术"></a>Java日志技术</h1><h2 id="1-日志的概念"><a href="#1-日志的概念" class="headerlink" title="1.日志的概念"></a>1.日志的概念</h2><h3 id="1-1-日志文件种类"><a href="#1-1-日志文件种类" class="headerlink" title="1.1 日志文件种类"></a>1.1 日志文件种类</h3><ul><li>调试日志</li><li>系统日志</li></ul><h2 id="2-Java日志框架"><a href="#2-Java日志框架" class="headerlink" title="2.Java日志框架"></a>2.Java日志框架</h2><h3 id="2-1-为什么要使用日志框架"><a href="#2-1-为什么要使用日志框架" class="headerlink" title="2.1 为什么要使用日志框架"></a>2.1 为什么要使用日志框架</h3><ol><li>软件复杂，设计的知识、内容、为题太多。</li><li>小系统不需要使用日志框架, 使用别人的框架你就可以集中精力完成系统的业务逻辑。</li></ol><h3 id="2-2-流行的日志框架-日志门面技术"><a href="#2-2-流行的日志框架-日志门面技术" class="headerlink" title="2.2 流行的日志框架[日志门面技术]"></a>2.2 流行的日志框架[日志门面技术]</h3><blockquote><p>日志门面技术,就是面向接口编程。多种日志框架无缝切换。[类似JDBC]</p></blockquote><blockquote><p>冷门：JCL是门面技术但也提供了实现，slf4j也提供了实现但是也不用。log4j是实现技术但也提供了门面API但是一般也不用 。</p></blockquote><h4 id="2-2-1-日志门面"><a href="#2-2-1-日志门面" class="headerlink" title="2.2.1 日志门面"></a>2.2.1 日志门面</h4><ul><li>JCL、slf4j</li></ul><h5 id="日志门面的优点"><a href="#日志门面的优点" class="headerlink" title="日志门面的优点"></a>日志门面的优点</h5><ul><li>1.面向接口编程,减少耦合 [通过导入不同的日志实现类,灵活切换框架,统一配置便于项目日志管理] </li><li>2.统一的API，并隐藏了不同框架的底部的细节,隐藏了日志实现框架 的API。方便学习及使用。</li></ul><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184824_58ce5af4-b5eb-447b-8ee5-b5524eec433a.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-sxkplitf-1630495502298)(/Users/admin/Documents/my-note/image-old/image-20200405110730005.png)]"></p><h4 id="2-2-2-日志实现"><a href="#2-2-2-日志实现" class="headerlink" title="2.2.2 日志实现"></a>2.2.2 日志实现</h4><ul><li>JUL[jdk自带]、logback[spring默认]、log4j、log4j2[性能最好]</li></ul><h2 id="3-日志框架从入门到不想入门"><a href="#3-日志框架从入门到不想入门" class="headerlink" title="3. 日志框架从入门到不想入门"></a>3. 日志框架从入门到不想入门</h2><h3 id="3-0-所有的配置文件"><a href="#3-0-所有的配置文件" class="headerlink" title="3.0 所有的配置文件"></a>3.0 所有的配置文件</h3><h4 id="3-0-1-JUL-核心是logManager以及Logger对象代码"><a href="#3-0-1-JUL-核心是logManager以及Logger对象代码" class="headerlink" title="3.0.1 JUL [核心是logManager以及Logger对象代码]"></a>3.0.1 JUL [核心是logManager以及Logger对象代码]</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">## RootLogger处理器（获取时设置）</span><span class="token key attr-name">handlers</span><span class="token punctuation">=</span> <span class="token value attr-value">java.util.logging.ConsoleHandler</span><span class="token comment">## RootLogger处理器（打印日志时设置）</span><span class="token key attr-name">.handlers</span><span class="token punctuation">=</span> <span class="token value attr-value">RootLogger.java.util.logging.FileHandler</span><span class="token comment"># RootLogger日志等级</span><span class="token key attr-name">.level</span><span class="token punctuation">=</span> <span class="token value attr-value">INFO</span><span class="token comment">## TestLog日志处理器</span><span class="token key attr-name">TestLog.handlers</span><span class="token punctuation">=</span> <span class="token value attr-value">java.util.logging.FileHandler</span><span class="token comment"># TestLog日志等级</span><span class="token key attr-name">TestLog.level</span><span class="token punctuation">=</span> <span class="token value attr-value">INFO</span><span class="token comment"># 忽略父日志处理</span><span class="token key attr-name">TestLog.useParentHandlers</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token comment">## 控制台处理器</span><span class="token comment"># 输出日志级别</span><span class="token key attr-name">java.util.logging.ConsoleHandler.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">INFO</span><span class="token comment"># 输出日志格式</span><span class="token key attr-name">java.util.logging.ConsoleHandler.formatter</span> <span class="token punctuation">=</span> <span class="token value attr-value">java.util.logging.SimpleFormatter</span><span class="token comment">## 文件处理器</span><span class="token comment"># 输出日志级别</span><span class="token key attr-name">java.util.logging.FileHandler.level</span><span class="token punctuation">=</span><span class="token value attr-value">INFO</span><span class="token comment"># 输出日志格式</span><span class="token key attr-name">java.util.logging.FileHandler.formatter</span> <span class="token punctuation">=</span> <span class="token value attr-value">java.util.logging.SimpleFormatter</span><span class="token comment"># 输出日志文件路径</span><span class="token key attr-name">java.util.logging.FileHandler.pattern</span> <span class="token punctuation">=</span> <span class="token value attr-value">D:\\TestLog.log</span><span class="token comment"># 输出日志文件限制大小（50000字节）</span><span class="token key attr-name">java.util.logging.FileHandler.limit</span> <span class="token punctuation">=</span> <span class="token value attr-value">50000</span><span class="token comment"># 输出日志文件限制个数</span><span class="token key attr-name">java.util.logging.FileHandler.count</span> <span class="token punctuation">=</span> <span class="token value attr-value">10</span><span class="token comment"># 输出日志文件 是否是追加</span><span class="token key attr-name">java.util.logging.FileHandler.append</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-0-2-Log4j-核心是配置文件以及Appender"><a href="#3-0-2-Log4j-核心是配置文件以及Appender" class="headerlink" title="3.0.2 Log4j[核心是配置文件以及Appender]"></a>3.0.2 Log4j[核心是配置文件以及Appender]</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token value attr-value">trace,console</span><span class="token comment"># 自定义logger</span><span class="token key attr-name">log4j.logger.com.biturd</span> <span class="token punctuation">=</span> <span class="token value attr-value">info, file</span><span class="token comment"># 命名规范一般是包名,这个是自定义的</span><span class="token comment"># 这个是继承rootLogger的 级别会覆盖,appender追加</span><span class="token key attr-name">log4j.logger.org.apache</span> <span class="token punctuation">=</span> <span class="token value attr-value">error</span><span class="token comment"># 日志灵活输出</span><span class="token key attr-name">log4j.appender.console</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.ConsoleAppender</span><span class="token key attr-name">log4j.appender.console.layout</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.PatternLayout</span><span class="token key attr-name">log4j.appender.console.layout.conversionPattern</span> <span class="token punctuation">=</span> <span class="token value attr-value">[%p]%r %l %d&#123;yyyy-mm-dd HH:mm:ss.SSS&#125; %m %n</span><span class="token key attr-name">log4j.appender.file</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.FileAppender</span><span class="token key attr-name">log4j.appender.file.layout</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.PatternLayout</span><span class="token key attr-name">log4j.appender.file.layout.conversionPattern</span> <span class="token punctuation">=</span> <span class="token value attr-value">[%p]%r %l %d&#123;yyyy-mm-dd HH:mm:ss.SSS&#125; %m%n</span><span class="token comment">#指定日志输出的位置[ognl表达式]</span><span class="token key attr-name">log4j.appender.file.file</span> <span class="token punctuation">=</span> <span class="token value attr-value">/logs/log4j.log</span><span class="token key attr-name">log4j.appender.file.encoding</span> <span class="token punctuation">=</span> <span class="token value attr-value">UTF-8</span><span class="token key attr-name">log4j.appender.rollingFileAppender</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.RollingFileAppender</span><span class="token key attr-name">log4j.appender.rollingFileAppender.layout</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.PatternLayout</span><span class="token key attr-name">log4j.appender.rollingFileAppender.layout.conversionPattern</span> <span class="token punctuation">=</span> <span class="token value attr-value">[%p]%r %l %d&#123;yyyy-mm-dd HH:mm:ss.SSS&#125; %m%n</span><span class="token comment">#指定日志输出的位置[ognl表达式]</span><span class="token key attr-name">log4j.appender.rollingFileAppender.file</span> <span class="token punctuation">=</span> <span class="token value attr-value">/logs/log4j.log</span><span class="token key attr-name">log4j.appender.rollingFileAppender.encoding</span> <span class="token punctuation">=</span> <span class="token value attr-value">UTF-8</span><span class="token key attr-name">log4j.appender.rollingFileAppender.maxFileSize</span> <span class="token punctuation">=</span> <span class="token value attr-value">1MB</span><span class="token key attr-name">log4j.appender.rollingFileAppender.maxBackupIndex</span> <span class="token punctuation">=</span> <span class="token value attr-value">10</span><span class="token key attr-name">log4j.appender.dailyRollingFileAppender</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.DailyRollingFileAppender</span><span class="token key attr-name">log4j.appender.dailyRollingFileAppender.layout</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.PatternLayout</span><span class="token key attr-name">log4j.appender.dailyRollingFileAppender.layout.conversionPattern</span> <span class="token punctuation">=</span> <span class="token value attr-value">[%p]%r %l %d&#123;yyyy-mm-dd HH:mm:ss.SSS&#125; %m%n</span><span class="token comment">#指定日志输出的位置[ognl表达式]</span><span class="token key attr-name">log4j.appender.dailyRollingFileAppender.file</span> <span class="token punctuation">=</span> <span class="token value attr-value">/logs/log4j.log</span><span class="token key attr-name">log4j.appender.dailyRollingFileAppender.encoding</span> <span class="token punctuation">=</span> <span class="token value attr-value">UTF-8</span><span class="token key attr-name">log4j.appender.dailyRollingFileAppender.datePattern</span> <span class="token punctuation">=</span> <span class="token value attr-value">'.'yyyy-MM-dd-HH-mm-ss</span><span class="token key attr-name">log4j.appender.dbAppender</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.jdbc.JDBCAppender</span><span class="token key attr-name">log4j.appender.dbAppender.layout</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.PatternLayout</span><span class="token key attr-name">log4j.appender.dbAppender.driver</span> <span class="token punctuation">=</span> <span class="token value attr-value">com.mysql.jdbc.Driver </span><span class="token key attr-name">log4j.appender.dbAppender.url</span> <span class="token punctuation">=</span> <span class="token value attr-value">jdbc:mysql:///test</span><span class="token comment"># jdbc:mysql://localhost:3306/test</span><span class="token key attr-name">log4j.appender.dbAppender.user</span> <span class="token punctuation">=</span> <span class="token value attr-value">root</span><span class="token key attr-name">log4j.appender.dbAppender.password</span> <span class="token punctuation">=</span> <span class="token value attr-value">root</span><span class="token key attr-name">log4j.appender.dbAppender.sql</span> <span class="token punctuation">=</span> <span class="token value attr-value">INSERT INTO LOGGING (log_date, log_level, location, message) VALUES ('%d&#123;ISO8601&#125;', '%-5p', '%C,%L', '%m')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-JUL-实现框架"><a href="#3-1-JUL-实现框架" class="headerlink" title="3.1 JUL[实现框架]"></a>3.1 JUL[实现框架]</h3><pre class="line-numbers language-none"><code class="language-none">两种方法输出日志    logger.log(Level.INFO, &quot;msg&quot;);  &#x2F;&#x2F; 通用方法    logger.info(&quot;123456&quot;); &#x2F;&#x2F; 专用方法  logger.[级别](&quot;[信息]&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">组件[非具体类]调用过程- Application- Logger设置两个内容1. Level2. 日志消息内容- Handler指定输出路径[控制台、文件、网络]- Layouts[Formatters] (输出前进行格式化)- Filter[细粒度的日志拦截]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="日志级别控制"><a href="#日志级别控制" class="headerlink" title="日志级别控制"></a>日志级别控制</h4><blockquote><p>一共七个日志级别，通过值来控制,默认只输出默认取值比Logger.INFO高的。 如果手动设置Logger的级别那么就输出比手动设置的高的级别。</p></blockquote><blockquote><p>Maven中的dependency如果是<scope>是test写在 main目录下面就会报错[导包找不到]</p></blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@Testpublic void testQuick() throws Exception&#123;    Logger logger &#x3D; Logger.getLogger(&quot;com.biturd.JULTest&quot;);  &#x2F;&#x2F; 每一个日志记录器都需要有一个唯一标识    logger.info(&quot;hello jul&quot;);    logger.log(Level.INFO, &quot;msg&quot;);    String name &#x3D; &quot;123456&quot;;    int a &#x3D; 123456;    logger.log(Level.INFO, &quot;用户信息: 字符串&#123;0&#125;，数字&#123;1&#125;&quot;,new Object[]&#123;name,a&#125;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">OFF</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"OFF"</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">SEVERE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"SEVERE"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">WARNING</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"WARNING"</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">INFO</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"INFO"</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">CONFIG</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"CONFIG"</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">FINE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"FINE"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">FINER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"FINER"</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">FINEST</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"FINEST"</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">ALL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"ALL"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"com.biturd.JULTest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每一个日志记录器都需要有一个唯一标识 通常是全限定类名</span>    logger<span class="token punctuation">.</span><span class="token function">severe</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">"warning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">fine</span><span class="token punctuation">(</span><span class="token string">"fine"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">finer</span><span class="token punctuation">(</span><span class="token string">"finer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">finest</span><span class="token punctuation">(</span><span class="token string">"finest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184828_b3b73e21-d4a8-44fe-be10-6029b9e1e319.png" alt="在这里插入图片描述"></p><h4 id="底层的原理及自定义配置文件"><a href="#底层的原理及自定义配置文件" class="headerlink" title="底层的原理及自定义配置文件"></a>底层的原理及自定义配置文件</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span> logger<span class="token operator">-</span> demandLogger<span class="token operator">-</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getLogManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">ensureLogManagerInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>加载配置文件<span class="token punctuation">]</span>                        <span class="token operator">-</span> readConfiguration      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">SecurityException</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// if a configuration class is specified, load it and use it.</span>        <span class="token class-name">String</span> cname <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.util.logging.config.class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cname <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// Instantiate the named class.  It is its constructor's</span>                <span class="token comment">// responsibility to initialize the logging configuration, by</span>                <span class="token comment">// calling readConfiguration(InputStream) with a suitable stream.</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clz <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>cname<span class="token punctuation">)</span><span class="token punctuation">;</span>                    clz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clz <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>cname<span class="token punctuation">)</span><span class="token punctuation">;</span>                    clz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logging configuration class \""</span> <span class="token operator">+</span> cname <span class="token operator">+</span> <span class="token string">"\" failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// keep going and useful config file.</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> fname <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.util.logging.config.file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fname <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fname <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fname <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Can't find java.home ??"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span> <span class="token string">"lib"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"logging.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fname <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">BufferedInputStream</span> bin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">readConfiguration</span><span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token class-name">E</span><span class="token operator">:</span>\<span class="token class-name">Java</span>\jre\lib\logging<span class="token punctuation">.</span>properties     logManager是单例对象<span class="token punctuation">,</span>所以前面后面所有的都是一个对象 加载流肯定应用了。    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 加载配置文件</span>      <span class="token class-name">InputStream</span> ins <span class="token operator">=</span>  <span class="token class-name">JULTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"logging.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 创建logManager</span>      <span class="token class-name">LogManager</span> logManager <span class="token operator">=</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getLogManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 通过logManager加载配置文件</span>logManager<span class="token punctuation">.</span><span class="token function">readConfiguration</span><span class="token punctuation">(</span>ins<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"com.biturd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">severe</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      logger<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">"warning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      logger<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      logger<span class="token punctuation">.</span><span class="token function">fine</span><span class="token punctuation">(</span><span class="token string">"fine"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      logger<span class="token punctuation">.</span><span class="token function">finer</span><span class="token punctuation">(</span><span class="token string">"finer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      logger<span class="token punctuation">.</span><span class="token function">finest</span><span class="token punctuation">(</span><span class="token string">"finest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置文件总览"><a href="#配置文件总览" class="headerlink" title="配置文件总览"></a>配置文件总览</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">## RootLogger处理器（获取时设置）</span><span class="token key attr-name">handlers</span><span class="token punctuation">=</span> <span class="token value attr-value">java.util.logging.ConsoleHandler</span><span class="token comment">## RootLogger处理器（打印日志时设置）</span><span class="token key attr-name">.handlers</span><span class="token punctuation">=</span> <span class="token value attr-value">RootLogger.java.util.logging.FileHandler</span><span class="token comment"># RootLogger日志等级</span><span class="token key attr-name">.level</span><span class="token punctuation">=</span> <span class="token value attr-value">INFO</span><span class="token comment">## TestLog日志处理器</span><span class="token key attr-name">TestLog.handlers</span><span class="token punctuation">=</span> <span class="token value attr-value">java.util.logging.FileHandler</span><span class="token comment"># TestLog日志等级</span><span class="token key attr-name">TestLog.level</span><span class="token punctuation">=</span> <span class="token value attr-value">INFO</span><span class="token comment"># 忽略父日志处理</span><span class="token key attr-name">TestLog.useParentHandlers</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token comment">## 控制台处理器</span><span class="token comment"># 输出日志级别</span><span class="token key attr-name">java.util.logging.ConsoleHandler.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">INFO</span><span class="token comment"># 输出日志格式</span><span class="token key attr-name">java.util.logging.ConsoleHandler.formatter</span> <span class="token punctuation">=</span> <span class="token value attr-value">java.util.logging.SimpleFormatter</span><span class="token comment">## 文件处理器</span><span class="token comment"># 输出日志级别</span><span class="token key attr-name">java.util.logging.FileHandler.level</span><span class="token punctuation">=</span><span class="token value attr-value">INFO</span><span class="token comment"># 输出日志格式</span><span class="token key attr-name">java.util.logging.FileHandler.formatter</span> <span class="token punctuation">=</span> <span class="token value attr-value">java.util.logging.SimpleFormatter</span><span class="token comment"># 输出日志文件路径</span><span class="token key attr-name">java.util.logging.FileHandler.pattern</span> <span class="token punctuation">=</span> <span class="token value attr-value">D:\\TestLog.log</span><span class="token comment"># 输出日志文件限制大小（50000字节）</span><span class="token key attr-name">java.util.logging.FileHandler.limit</span> <span class="token punctuation">=</span> <span class="token value attr-value">50000</span><span class="token comment"># 输出日志文件限制个数</span><span class="token key attr-name">java.util.logging.FileHandler.count</span> <span class="token punctuation">=</span> <span class="token value attr-value">10</span><span class="token comment"># 输出日志文件 是否是追加</span><span class="token key attr-name">java.util.logging.FileHandler.append</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-Log4j-实现框架"><a href="#3-2-Log4j-实现框架" class="headerlink" title="3.2 Log4j[实现框架]"></a>3.2 Log4j[实现框架]</h3><h4 id="0-代码示例"><a href="#0-代码示例" class="headerlink" title="0.代码示例"></a>0.代码示例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">QuickStartLog4j</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 不使用配置文件 用默认的方式</span><span class="token comment">//        BasicConfigurator.configure();</span>        <span class="token comment">// 获取日志记录器对象</span>        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>log4jTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 日志记录输出</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello log4j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"造成系统崩溃的严重错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 常用的</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"不会让系统停止的错误信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"可能发生错误警告信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"运行信息,数据连接、网络连接、IO、操作等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"调试信息,一般在开发中使用,记录程序变量参数传递信息等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"追踪信息,记录程序所有的流程信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-Log4j组件"><a href="#1-Log4j组件" class="headerlink" title="1.Log4j组件"></a>1.Log4j组件</h4><ul><li>Loggers [日志记录器] 控制日志的输出级别与日志是否输出</li><li>Appenders [输出端] 日志的输出方式</li><li>Layout [日志格式化] 控制日志的输出格式</li></ul><h5 id="1-Loggers日志记录器-默认继承RootLogger"><a href="#1-Loggers日志记录器-默认继承RootLogger" class="headerlink" title="1). Loggers日志记录器 [默认继承RootLogger]"></a>1). Loggers日志记录器 [默认继承RootLogger]</h5><blockquote><p>早期叫Category,所以可以视为是Category类的别名</p></blockquote><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184830_d6570cbd-4f9a-4625-b602-e5cdf9bfef89.png" alt="在这里插入图片描述"></p><h5 id="2-Appenders"><a href="#2-Appenders" class="headerlink" title="2). Appenders"></a>2). Appenders</h5><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184833_4b0966a2-f5e1-483f-90de-36b65b291a26.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-d4FKTTiH-1630495502308)(/Users/admin/Documents/my-note/image-old/image-20200403092804928.png)]"></p><h5 id="3-Layouts"><a href="#3-Layouts" class="headerlink" title="3). Layouts"></a>3). Layouts</h5><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184837_22a62715-51e1-4cb0-bed0-f81b1e981c8c.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-NuWbtfpo-1630495502310)(/Users/admin/Documents/my-note/image-old/image-20200403093159621.png)]"></p><h4 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2. 源码分析"></a>2. 源码分析</h4><pre class="line-numbers language-none"><code class="language-none">- org.apache.log4j.logger- org.apache.log4j.logManager [读取配置信息]- 在Loader.getResource();读取配置文件- OptionConverter.selectAndConfigure();加载配置文件内部信息- 然后把配置信息都加到rootLogger上- configureRootCategory()- parseCategory()- parseCategory()解析信息 [StringTokenizer st &#x3D; new StringTokenizer(value, &quot;,&quot;);]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184840_9bca110d-a9d8-4e67-b321-942b469bd712.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-UCENH4ER-1630495502311)(/Users/admin/Documents/my-note/image-old/image-20200403115422584.png)]"></p><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184843_b593bbbf-3545-4c7f-a6a5-dc96bd48100c.png" alt="在这里插入图片描述"></p><blockquote><p> &#x3D;&#x3D;不知道配置文件写什么就在这查&#x3D;&#x3D;。&lt;&lt;学习框架方法论&gt;&gt;</p></blockquote><blockquote><p>除了这里还有就是ognl表达式 set方法</p></blockquote><h4 id="3-其他"><a href="#3-其他" class="headerlink" title="3.其他"></a>3.其他</h4><h5 id="3-1-Loglog-Log4j内置的日志的开关"><a href="#3-1-Loglog-Log4j内置的日志的开关" class="headerlink" title="3.1 Loglog: Log4j内置的日志的开关"></a>3.1 Loglog: Log4j内置的日志的开关</h5><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184846_cc28390f-dd16-4c81-ac1f-74cb0128a71d.png" alt="在这里插入图片描述"></p><h5 id="3-2-Layout的使用"><a href="#3-2-Layout的使用" class="headerlink" title="3.2 Layout的使用"></a>3.2 Layout的使用</h5><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184849_055bed73-b105-4af2-8db3-10caaa8cc394.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-uUPANV7w-1630495502319)(/Users/admin/Documents/my-note/image-old/image-20200404204902538.png)]"></p><p>通过ognl表达式来指定。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token value attr-value">trace,console</span><span class="token key attr-name">log4j.appender.console</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.ConsoleAppender</span><span class="token key attr-name">log4j.appender.console.layout</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.PatternLayout</span><span class="token key attr-name">log4j.appender.console.layout.conversionPattern</span> <span class="token punctuation">=</span> <span class="token value attr-value">[%p]%r %l %d&#123;yyyy-mm-dd HH:mm:ss.SSS&#125; %m%n</span><span class="token comment"># %l == %c+%t+%F+%L</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184851_62313913-ff17-4101-b0ae-1b8a3db61cf1.png" alt="在这里插入图片描述"></p><h5 id="3-3-Appender的使用"><a href="#3-3-Appender的使用" class="headerlink" title="3.3 Appender的使用"></a>3.3 Appender的使用</h5><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184856_6fee5906-6525-4889-bfe3-d1c34e348015.png" alt="在这里插入图片描述"></p><ul><li>Console</li><li>File[两个子类,可以选择用父类或子类]<ul><li>Rolling [按大小拆分]</li><li>DailyRolling [按时间拆分]</li></ul></li></ul><h6 id="3-3-1-File"><a href="#3-3-1-File" class="headerlink" title="3.3.1 File"></a>3.3.1 File</h6><blockquote><p>需要指定一个输出文件</p></blockquote><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184859_f4ed1354-a630-41fa-8db9-cdb2f4658f74.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-9LBENhsf-1630495502325)(/Users/admin/Documents/my-note/image-old/image-20200404210001421.png)]"></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">log4j.appender.file</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.FileAppender</span><span class="token key attr-name">log4j.appender.file.layout</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.PatternLayout</span><span class="token key attr-name">log4j.appender.file.layout.conversionPattern</span> <span class="token punctuation">=</span> <span class="token value attr-value">[%p]%r %l %d&#123;yyyy-mm-dd HH:mm:ss.SSS&#125; %m%n</span><span class="token comment">#指定日志输出的位置[ognl表达式]</span><span class="token key attr-name">log4j.appender.file.file</span> <span class="token punctuation">=</span> <span class="token value attr-value">/logs/log4j.log</span><span class="token key attr-name">log4j.appender.file.encoding</span> <span class="token punctuation">=</span> <span class="token value attr-value">UTF-8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-3-2-Rolling"><a href="#3-3-2-Rolling" class="headerlink" title="3.3.2 Rolling"></a>3.3.2 Rolling</h6><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">log4j.appender.rollingFileAppender</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.RollingFileAppender</span><span class="token key attr-name">log4j.appender.rollingFileAppender.layout</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.PatternLayout</span><span class="token key attr-name">log4j.appender.rollingFileAppender.layout.conversionPattern</span> <span class="token punctuation">=</span> <span class="token value attr-value">[%p]%r %l %d&#123;yyyy-mm-dd HH:mm:ss.SSS&#125; %m%n</span><span class="token comment">#指定日志输出的位置[ognl表达式]</span><span class="token key attr-name">log4j.appender.rollingFileAppender.file</span> <span class="token punctuation">=</span> <span class="token value attr-value">/logs/log4j.log</span><span class="token key attr-name">log4j.appender.rollingFileAppender.encoding</span> <span class="token punctuation">=</span> <span class="token value attr-value">UTF-8</span><span class="token key attr-name">log4j.appender.rollingFileAppender.maxFileSize</span> <span class="token punctuation">=</span> <span class="token value attr-value">1MB</span><span class="token key attr-name">log4j.appender.rollingFileAppender.maxBackupIndex</span> <span class="token punctuation">=</span> <span class="token value attr-value">10  </span><span class="token comment"># [超过十个会覆盖久远的日志]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-3-3-DailyRolling"><a href="#3-3-3-DailyRolling" class="headerlink" title="3.3.3 DailyRolling"></a>3.3.3 DailyRolling</h6><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">log4j.appender.dailyRollingFileAppender</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.DailyRollingFileAppender</span><span class="token key attr-name">log4j.appender.dailyRollingFileAppender.layout</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.PatternLayout</span><span class="token key attr-name">log4j.appender.dailyRollingFileAppender.layout.conversionPattern</span> <span class="token punctuation">=</span> <span class="token value attr-value">[%p]%r %l %d&#123;yyyy-mm-dd HH:mm:ss.SSS&#125; %m%n</span><span class="token comment">#指定日志输出的位置[ognl表达式]</span><span class="token key attr-name">log4j.appender.dailyRollingFileAppender.file</span> <span class="token punctuation">=</span> <span class="token value attr-value">/logs/log4j.log</span><span class="token key attr-name">log4j.appender.dailyRollingFileAppender.encoding</span> <span class="token punctuation">=</span> <span class="token value attr-value">UTF-8</span><span class="token key attr-name">log4j.appender.dailyRollingFileAppender.datePattern</span> <span class="token punctuation">=</span> <span class="token value attr-value">'.'yyyy-MM-dd-HH-mm-ss </span><span class="token comment"># [完全的，最合适的是按照天划分]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-3-4-JDBCAppender"><a href="#3-3-4-JDBCAppender" class="headerlink" title="3.3.4 &#x3D;&#x3D;JDBCAppender&#x3D;&#x3D;"></a>3.3.4 &#x3D;&#x3D;JDBCAppender&#x3D;&#x3D;</h6><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">log4j.appender.dbAppender</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.jdbc.JDBCAppender</span><span class="token key attr-name">log4j.appender.dbAppender.layout</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.PatternLayout</span><span class="token key attr-name">log4j.appender.dbAppender.driver</span> <span class="token punctuation">=</span> <span class="token value attr-value">com.mysql.jdbc.Driver </span><span class="token key attr-name">log4j.appender.dbAppender.url</span> <span class="token punctuation">=</span> <span class="token value attr-value">jdbc:mysql:///test</span><span class="token comment"># jdbc:mysql://localhost:3306/test</span><span class="token key attr-name">log4j.appender.dbAppender.user</span> <span class="token punctuation">=</span> <span class="token value attr-value">root</span><span class="token key attr-name">log4j.appender.dbAppender.password</span> <span class="token punctuation">=</span> <span class="token value attr-value">root</span><span class="token key attr-name">log4j.appender.dbAppender.sql</span> <span class="token punctuation">=</span> <span class="token value attr-value">INSERT INTO log(preject_name, create_date, log_level, category,file_name,thread_name,line,all_category, message) VALUES ('pro_name', '%d&#123;yyyy-MM-dd HH:mm:ss&#125;', '%p', '%c', '%F','%t', '%L' , '%l' ,'%m')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-4-自定义logger"><a href="#3-4-自定义logger" class="headerlink" title="3.4 自定义logger"></a>3.4 自定义logger</h5><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">log4j.logger.com.biturd</span> <span class="token punctuation">=</span> <span class="token value attr-value">info, file</span><span class="token comment"># 命名规范一般是包名,这个是自定义的</span><span class="token comment"># 这个是继承rootLogger的 级别会覆盖,appender追加</span><span class="token key attr-name">log4j.logger.org.apache</span> <span class="token punctuation">=</span> <span class="token value attr-value">error</span><span class="token comment"># 日志灵活输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认是继承rootlogger的</p><ul><li>实验前</li></ul><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184902_2f742aa8-5a6e-425c-aca9-cc95927c589b.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Skg5yDys-1630495502326)(/Users/admin/Documents/my-note/image-old/image-20200405082951614.png)]"></p><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184905_0087c89f-c297-4761-9edb-8c2303ea0752.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-i55PYQ54-1630495502328)(/Users/admin/Documents/my-note/image-old/image-20200405083024130.png)]"></p><blockquote><p>没有打印123456</p></blockquote><ul><li>实验后<br><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184909_ef920014-30b2-4f56-bcdb-9bc43ccf93b7.png" alt="在这里插入图片描述"></li></ul><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184912_c9f0bf2f-f7c9-4607-9573-5aaef731a19d.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-1ECKDThc-1630495502333)(/Users/admin/Documents/my-note/image-old/image-20200405082824218.png)]"></p><blockquote><p>打印123456</p></blockquote><p>可见log4j是&#x3D;&#x3D;通过包名来判断如何使用自定义的日志记录器&#x3D;&#x3D;</p><ul><li>原理</li></ul><p>日志打印logger对象通过包名与配置文件的多个自定义的logger对比，如果没有找到就用默认的rootlogger。</p><h3 id="3-3-JCL-门面框架-只支持这几种所以淘汰了"><a href="#3-3-JCL-门面框架-只支持这几种所以淘汰了" class="headerlink" title="3.3 JCL[门面框架] [只支持这几种所以淘汰了]"></a>3.3 JCL[门面框架] [只支持这几种所以淘汰了]</h3><blockquote><p>门面框架出现背景： 初期小项目用jul-&gt; 后期用log4j 需要切换框架，麻烦 </p></blockquote><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184915_8de27000-0a7b-4a89-807b-d037c717ad01.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-wzt2g6Pq-1630495502378)(/Users/admin/Documents/my-note/image-old/image-20200405083911433.png)]"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuickJCL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">JCLTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>1.没有log4j依赖时，默认使用jul</li></ul><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184918_c7bae7bd-802b-4f92-ad72-df37f53a2e37.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-G06jdQIr-1630495502382)(/Users/admin/Documents/my-note/image-old/image-20200405093515568.png)]"></p><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184920_9fb2cb91-9dcd-4fef-8ed6-a1f48341af9d.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-syR2SHug-1630495502385)(/Users/admin/Documents/my-note/image-old/image-20200405093429447.png)]"></p><ul><li>有log4j依赖时，默认使用log4j</li></ul><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184923_6c1580d7-38d0-49cf-ab7e-8d3457606501.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-UEM2lObh-1630495502387)(/Users/admin/Documents/my-note/image-old/image-20200405093613785.png)]"></p><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184926_058eb3c3-d836-4622-9075-dc14e4ef5074.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-UbPFndTo-1630495502388)(/Users/admin/Documents/my-note/image-old/image-20200405093843684.png)]"></p><h4 id="3-3-1-原理"><a href="#3-3-1-原理" class="headerlink" title="3.3.1 原理"></a>3.3.1 原理</h4><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184929_abfa9633-1725-469c-a34d-14fc41f9ce08.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-JEiU0OLG-1630495502390)(/Users/admin/Documents/my-note/image-old/image-20200405102418149.png)]"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 查找的log类的范围</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classesToDiscover <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token constant">LOGGING_IMPL_LOG4J_LOGGER</span><span class="token punctuation">,</span>            <span class="token string">"org.apache.commons.logging.impl.Jdk14Logger"</span><span class="token punctuation">,</span>            <span class="token string">"org.apache.commons.logging.impl.Jdk13LumberjackLogger"</span><span class="token punctuation">,</span>            <span class="token string">"org.apache.commons.logging.impl.SimpleLog"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 查找log类的具体实现</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>classesToDiscover<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> <span class="token function">createLogFromClass</span><span class="token punctuation">(</span>classesToDiscover<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> logCategory<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 利用反射技术根据名字字符串查找类</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>logAdapterClassName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> currentCL<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> originalClassNotFoundException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果找到了</span>                constructor <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>logConstructorSignature<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> o <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Note that we do this test after trying to create an instance</span>                <span class="token comment">// [rather than testing Log.class.isAssignableFrom(c)] so that</span>                <span class="token comment">// we don't complain about Log hierarchy problems when the</span>                <span class="token comment">// adapter couldn't be instantiated anyway.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Log</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    logAdapterClass <span class="token operator">=</span> c<span class="token punctuation">;</span>                    logAdapter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Log</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token comment">// 适配器将找到的log类的构造方法、以及log类的Name适配为实例属性。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logAdapterClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> affectState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// We've succeeded, so set instance fields</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>logClassName   <span class="token operator">=</span> logAdapterClassName<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>logConstructor <span class="token operator">=</span> constructor<span class="token punctuation">;</span>            <span class="token comment">// Identify the &lt;code>setLogFactory&lt;/code> method (if there is one)</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>logMethod <span class="token operator">=</span> logAdapterClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setLogFactory"</span><span class="token punctuation">,</span> logMethodSignature<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">&#125;</span><span class="token keyword">return</span> logAdapter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-SLF4j-门面框架"><a href="#3-4-SLF4j-门面框架" class="headerlink" title="3.4 SLF4j[门面框架]"></a>3.4 SLF4j[门面框架]</h3><pre class="line-numbers language-none"><code class="language-none">Note that SLF4J-enabling your library implies the addition of only a single mandatory dependency, namely slf4j-api.jar. If no binding is found on the class path, then SLF4J will default to a no-operation implementation.slf4j意味着仅添加一个强制性依赖项，slf4j-api.jar。如果在类路径上没有找到绑定,他就默认无操作实现。[只是一套接口]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-4-1-原理："><a href="#3-4-1-原理：" class="headerlink" title="3.4.1 原理："></a>3.4.1 原理：</h4><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184932_261e3335-28bf-4fab-b325-4a314e7a6fa3.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 如果有多个实现就打印，并使用第一个实现框架</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAmbiguousStaticLoggerBinderPathSet</span><span class="token punctuation">(</span>binderPathSet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"Class path contains multiple SLF4J bindings."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Iterator</span> i$ <span class="token operator">=</span> binderPathSet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-2-日志桥接技术"><a href="#3-4-2-日志桥接技术" class="headerlink" title="3.4.2 日志桥接技术"></a>3.4.2 日志桥接技术</h4><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184935_25649de2-1be3-489e-985f-210772947100.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-UngUJ6DV-1630495502394)(/Users/admin/Documents/my-note/image-old/image-20200405232257770.png)]"></p><h4 id="3-4-3-桥接技术-死循环的原因-桥接不能和适配器同时出现-jar包"><a href="#3-4-3-桥接技术-死循环的原因-桥接不能和适配器同时出现-jar包" class="headerlink" title="3.4.3 [桥接技术]死循环的原因 [桥接不能和适配器同时出现(jar包)]"></a>3.4.3 [桥接技术]死循环的原因 [桥接不能和适配器同时出现(jar包)]</h4><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184938_fe8a32c1-437e-4c91-8223-e7dbeac982aa.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ekVHT1OV-1630495502395)(/Users/admin/Documents/my-note/image-old/image-20200405231826182.png)]"></p><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184941_53ad72ec-76d5-447d-a5f0-a75c45372422.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-1W5SHKTY-1630495502398)(/Users/admin/Documents/my-note/image-old/image-20200405232029754.png)]"></p><h3 id="3-5-logback-实现框架"><a href="#3-5-logback-实现框架" class="headerlink" title="3.5 logback[实现框架]"></a>3.5 logback[实现框架]</h3><p><a href="https://www.cnblogs.com/gavincoder/p/10091757.html">https://www.cnblogs.com/gavincoder/p/10091757.html</a></p><h4 id="3-5-0-基础代码"><a href="#3-5-0-基础代码" class="headerlink" title="3.5.0 基础代码"></a>3.5.0 基础代码</h4><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184944_c55759a6-0f7d-41ff-8691-70a634c59189.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-8IOlcpJl-1630495502399)(/Users/admin/Documents/my-note/image-old/image-20200406071803831.png)]"></p><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184947_77de8ad6-a006-4e86-b121-14d50d030eeb.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-cjObYrM4-1630495502401)(/Users/admin/Documents/my-note/image-old/image-20200406071937720.png)]"></p><p>依赖关系</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 只需要导入logback-classic就可以了,被依赖的会自动导入 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5level] %logger&#123;36&#125; - %msg%n<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log_back<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/logs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>console<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>System.err<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>$&#123;pattern&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.FileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 日志保存的位置 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>$&#123;log_dir&#125;/logback.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>$&#123;pattern&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>htmlFile<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.FileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>$&#123;log_dir&#125;/logback.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.encoder.LayoutWrappingEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.html.HTMLLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5level] %logger&#123;36&#125; - %msg%n"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rollFile<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>$&#123;log_dir&#125;/logback.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>$&#123;pattern&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>$&#123;log_dir&#125;/rolling.%d&#123;yyyy-MM-dd&#125;.log.gz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>1MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ALL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>console<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender-ref</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-1-三个模块"><a href="#3-5-1-三个模块" class="headerlink" title="3.5.1 三个模块"></a>3.5.1 三个模块</h4><ul><li>logback-core: 其他两个模块的基础</li><li>logback-classic: log4j的改良版本[ 完整实现了slf4j的api ]</li><li>logback-access: 访问模块和servlet容器集成提供通过Http访问日志的功能</li></ul><h4 id="3-5-2-高阶用法-过滤器及异步日志、自定义logger"><a href="#3-5-2-高阶用法-过滤器及异步日志、自定义logger" class="headerlink" title="3.5.2 高阶用法 [ 过滤器及异步日志、自定义logger ]"></a>3.5.2 高阶用法 [ 过滤器及异步日志、自定义logger ]</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">  <span class="token comment">&lt;!-- 过滤器用法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rollFile<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>$&#123;log_dir&#125;/logback.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>$&#123;pattern&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>$&#123;log_dir&#125;/rolling.%d&#123;yyyy-MM-dd&#125;.log.gz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>1MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMisMatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMisMatch</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 异步日志 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>async<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.AsyncAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!-- 指定一个具体的Appender --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rollFile<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ALL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>console<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender-ref</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>async<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender-ref</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 自定义logger对象 additivity决定是否集成rootLogger --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.biturd<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-3-log4j格式转logback-pattern变了"><a href="#3-5-3-log4j格式转logback-pattern变了" class="headerlink" title="3.5.3 log4j格式转logback [ pattern变了 ]"></a>3.5.3 log4j格式转logback [ pattern变了 ]</h4><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184950_6ac26599-8bec-4e4d-becd-9f47a7a1fd67.png" alt="在这里插入图片描述"></p><h4 id="3-5-4-logback-access使用"><a href="#3-5-4-logback-access使用" class="headerlink" title="3.5.4 logback-access使用"></a>3.5.4 logback-access使用</h4><blockquote><p>使用这个来替换tomcat或jetty的日志<br><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184953_47858b67-cee0-4e0f-a488-eaaad19ab99b.png" alt="在这里插入图片描述"></p></blockquote><h3 id="3-6-log4j2-实现框架"><a href="#3-6-log4j2-实现框架" class="headerlink" title="3.6 log4j2[实现框架]"></a>3.6 log4j2[实现框架]</h3><blockquote><p>虽然也是日志门面,但是习惯上还是用slf4j做日志门面</p></blockquote><h4 id="1-log4j2日志门面用法-了解"><a href="#1-log4j2日志门面用法-了解" class="headerlink" title="1.log4j2日志门面用法[了解]"></a>1.log4j2日志门面用法[了解]</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment">&lt;!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL --></span><span class="token comment">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出--></span><span class="token comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN<span class="token punctuation">"</span></span> <span class="token attr-name">monitorInterval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--先定义所有的appender--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appenders</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--这个输出控制台的配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>console</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SYSTEM_OUT<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--输出日志的格式--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>console</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log/test.log<span class="token punctuation">"</span></span> <span class="token attr-name">append</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileInfo<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;sys:user.home&#125;/logs/info.log<span class="token punctuation">"</span></span>                     <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;sys:user.home&#125;/logs/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100 MB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileWarn<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;sys:user.home&#125;/logs/warn.log<span class="token punctuation">"</span></span>                     <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;sys:user.home&#125;/logs/$$&#123;date:yyyy-MM&#125;/warn-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100 MB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileError<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;sys:user.home&#125;/logs/error.log<span class="token punctuation">"</span></span>                     <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;sys:user.home&#125;/logs/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100 MB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appenders</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>loggers</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileInfo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileWarn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileError<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>loggers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-log4j2异步日志原理"><a href="#2-log4j2异步日志原理" class="headerlink" title="2. log4j2异步日志原理"></a>2. log4j2异步日志原理</h4><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101184957_ba5c627c-81a9-49dc-8ded-3ceb775e4a8d.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-iTd2Op1i-1630495502409)(/Users/admin/Documents/my-note/image-old/image-20200414122159052.png)]"></p><p>两种方式</p><ul><li>AsyncAppender</li><li>AsyncLogger</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">      <span class="token comment">&lt;!-- log4j2异步日志需要提供的依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lmax<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>disruptor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101185001_fe5cc76d-7ad9-4a64-ae32-62bdc856f8ed.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-zjEX5Jc3-1630495502415)(/Users/admin/Documents/my-note/image-old/image-20200414123002440.png)]"></p><h3 id="3-7-SpringBoot中的应用"><a href="#3-7-SpringBoot中的应用" class="headerlink" title="3.7 SpringBoot中的应用"></a>3.7 SpringBoot中的应用</h3><p><em>虽然使用默认logback,可以不导入logback.xml文件，而是在application.xml里面也能设置日志框架的信息,但是一般比较粗略,所以还是需要特定的配置文件的</em></p><blockquote><p>SpringBoot的Starters包含了一系列可以集成到应用里面的依赖包，你可以一站式集成Spring及其他技术，而不需要到处找示例代码和依赖包。如你想使用Spring JPA访问数据库，只要加入spring-boot-starter-data-jpa启动器依赖就能使用了。<a href="https://blog.csdn.net/qq_35974759/article/details/87168257">https://blog.csdn.net/qq_35974759/article/details/87168257</a></p><p>Starters包含了许多项目中需要用到的依赖，它们能快速持续的运行，都是一系列得到支持的管理传递性依赖。</p></blockquote><blockquote><p> 依赖关系: 指向谁就依赖谁</p></blockquote><h3 id="3-8-代码总结"><a href="#3-8-代码总结" class="headerlink" title="3.8 代码总结"></a>3.8 代码总结</h3><h4 id="JUL"><a href="#JUL" class="headerlink" title="JUL"></a>JUL</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"com.biturd.JULTest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 每一个日志记录器都需要有一个唯一标识</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello jul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">INFO</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">        <span class="token comment">// 不使用配置文件 用默认的方式</span><span class="token comment">//        BasicConfigurator.configure();</span>        <span class="token class-name">LogLog</span><span class="token punctuation">.</span><span class="token function">setInternalDebugging</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取日志记录器对象</span>        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>log4jTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 日志记录输出</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello log4j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"造成系统崩溃的严重错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 常用的</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"不会让系统停止的错误信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"可能发生错误警告信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"运行信息,数据连接、网络连接、IO、操作等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"调试信息,一般在开发中使用,记录程序变量参数传递信息等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"追踪信息,记录程序所有的流程信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JCL"><a href="#JCL" class="headerlink" title="JCL"></a>JCL</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">JCLTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="slf4j-重点"><a href="#slf4j-重点" class="headerlink" title="slf4j[重点]"></a>slf4j[重点]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Slf4jTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSlf4j</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="log4j2-自己的门面"><a href="#log4j2-自己的门面" class="headerlink" title="log4j2[自己的门面]"></a>log4j2[自己的门面]</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>log4j2Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"fatal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"warn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"trace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="slf4j的各种依赖关系-比较重要就再说一遍"><a href="#slf4j的各种依赖关系-比较重要就再说一遍" class="headerlink" title="slf4j的各种依赖关系[ 比较重要就再说一遍 ]"></a>slf4j的各种依赖关系[ 比较重要就再说一遍 ]</h4><h5 id="1-slf4j-jdk"><a href="#1-slf4j-jdk" class="headerlink" title="1. slf4j-jdk"></a>1. slf4j-jdk</h5><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101185004_af7f7277-0acd-4bc4-82d7-3cd46f4e9a28.png" alt="在这里插入图片描述"></p><h5 id="2-slf4j-log4j"><a href="#2-slf4j-log4j" class="headerlink" title="2.  slf4j-log4j"></a>2.  slf4j-log4j</h5><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101185008_06057faa-3c20-4918-90a5-90891b5970bb.png" alt="在这里插入图片描述"></p><h5 id="3-slf4j-logback"><a href="#3-slf4j-logback" class="headerlink" title="3. slf4j-logback"></a>3. slf4j-logback</h5><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101185011_58c23e1e-3781-4095-bf5b-f57eda80fe01.png" alt="在这里插入图片描述"></p><h4 id="4-slf4j-log4j2"><a href="#4-slf4j-log4j2" class="headerlink" title="4.slf4j-log4j2"></a>4.slf4j-log4j2</h4><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101185015_8638e825-4d47-420d-b5a4-b6202dd0ae83.png" alt="在这里插入图片描述"></p><h4 id="其他的比如桥接技术-详细的-https-blog-csdn-net-jeikerxiao-article-details-62423749"><a href="#其他的比如桥接技术-详细的-https-blog-csdn-net-jeikerxiao-article-details-62423749" class="headerlink" title="其他的比如桥接技术[ 详细的: https://blog.csdn.net/jeikerxiao/article/details/62423749 ]"></a>其他的比如桥接技术[ 详细的: <a href="https://blog.csdn.net/jeikerxiao/article/details/62423749">https://blog.csdn.net/jeikerxiao/article/details/62423749</a> ]</h4><p>使用slf4j统一各种日志<br>当项目是使用多种日志API时，可以统一适配到slf4j，然后通过slf4j适配底层实现。</p><p>中间使用slf4j进行统一项目中使用的多种日志框架的API，然后转发到slf4j,slf4j再底层用开发者想用的一个日志框架来进行日志系统的实现。从而达到了多种日志的统一实现。</p><ul><li><p>旧日志API到slf4j的适配器</p></li><li><p>slf4j到新日志实现的适配器</p></li></ul><hr><blockquote><p> 问题：目前的应用程序（application）中已经使用了以下的几种API来进行日志的编程：</p></blockquote><ol><li>commons-logging</li><li>jdk-loging<br>现在想统一将日志的输出交给log4j1。</li></ol><p>解决方法：[两种]</p><ol><li>将上面的日志系统全部转换到slf4j   [ 桥接技术 ]<ol><li>移除commons-logging(可以不移除)，使用jcl-over-slf4j(桥接)将commons-logging的底层日志输出切换到sl4j.</li><li>使用jul-to-slf4j(桥接)，将jul的日志输出切换到slf4j.</li></ol></li><li>让slf4j选择log4j1作为底层日志输出<ol><li>加入slf4j-api.jar</li><li>加入slf4j-log4j12.jar</li><li>加入log4j.jar</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim高阶比较好用操作记录</title>
      <link href="/2022/11/07/vim-gao-jie-bi-jiao-hao-yong-cao-zuo-ji-lu/"/>
      <url>/2022/11/07/vim-gao-jie-bi-jiao-hao-yong-cao-zuo-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="1、普通操作"><a href="#1、普通操作" class="headerlink" title="1、普通操作"></a>1、普通操作</h2><p>[c\d\y都同理，动作]</p><ul><li>dw删除到词尾、</li><li>db删除到词首、</li><li>dfa删除到向后查找到a的位置、</li><li>dFa删除到向前差找到a的位置</li><li>d&#x2F;abc 删除到找到abc</li></ul><h2 id="2、标记使用"><a href="#2、标记使用" class="headerlink" title="2、标记使用"></a>2、标记使用</h2><p>在 Vim 中，标记可以帮助您记住文本的位置。标记是在文本中设置的位置，可以使用单个字符作为名称进行标识。以下是在 Vim 中使用标记的一些常用命令：</p><ul><li>设置标记: ma, mb, mc, … （将标记设置为a, b, c等等）</li><li>跳转到标记行首: ‘a, ‘b, ‘c, … （跳转到标记a, b, c等等所在的行首位置）</li><li>跳转到标记: &#96;a, … （跳转到标记a的位置）</li><li>查看所有标记: :marks （显示所有标记的列表）</li><li>删除标记: :delmarks a, :delmarks a b c ,（删除标记a，或删除多个标记） 删除所有标记: :delmarks!</li><li>删除从光标到标记：d&#96;a   d’a【中间的行】   动作：d、c、y</li></ul><p>在使用标记时，您可以将其用于定位文件中的重要位置，例如跳转到特定的行、函数、段落等。标记在 Vim 中非常有用，可以使您更有效地浏览和编辑文本。</p><h2 id="3、操作’”-包围的文本"><a href="#3、操作’”-包围的文本" class="headerlink" title="3、操作’”[{包围的文本"></a>3、操作’”[{包围的文本</h2><p>diw:  d[操作]、i[范围]、w[操作对象]</p><p>其中，di( 表示“删除内部括号”，即删除圆括号内的所有文本。<br>da( 表示“删除包括括号”，即删除圆括号内的所有文本。</p><p>操作：</p><ul><li>y 复制文本</li><li>c 修改文本</li><li>d 删除文本</li><li>v 选择文本<br>范围：</li><li>i  内部的</li><li>a 包括括号</li><li>s 删除括号【vim-surround插件】<br>ysiw( 增加括号、csw( cs([ 更改环绕<br><a href="http://yyq123.github.io/learn-vim/learn-vim-plugin-surround.html">http://yyq123.github.io/learn-vim/learn-vim-plugin-surround.html</a><br><a href="https://github.com/tpope/vim-surround">https://github.com/tpope/vim-surround</a></li></ul><p>操作对象：</p><ul><li>w 词语</li><li>p 段落</li><li>W 词语包含空格</li><li>[ ( { 各种括号</li><li>‘ “ &#96; 各种引号</li><li>&lt;</li><li><tag></li><li>b\BA block [(</li></ul><h2 id="4、多行操作"><a href="#4、多行操作" class="headerlink" title="4、多行操作"></a>4、多行操作</h2><p>1、normal方式操作每一行<br><a href="https://zhuanlan.zhihu.com/p/45433187">https://zhuanlan.zhihu.com/p/45433187</a></p><p>2、块选中操作每一行<br>ctrl+v  块选中后,  shift + i  后进入编辑模式，如下图,这时大家看到，只有第一行被修改了，下面的并没有插入&#x2F;&#x2F;。这是没有关系的，这时只要按esc键两次,就可以发现刚选中的块都被修改了</p><p>3、multi-select插件<br><a href="https://wklken.me/posts/2015/06/07/vim-plugin-multiplecursors.html">https://wklken.me/posts/2015/06/07/vim-plugin-multiplecursors.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wrk压测工具使用</title>
      <link href="/2022/09/07/wrk-ya-ce-gong-ju-shi-yong/"/>
      <url>/2022/09/07/wrk-ya-ce-gong-ju-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1、wrk命令行使用"><a href="#1、wrk命令行使用" class="headerlink" title="1、wrk命令行使用"></a>1、wrk命令行使用</h2><pre class="line-numbers language-none"><code class="language-none">Usage: wrk &lt;options&gt; &lt;url&gt;  Options:    -c, --connections &lt;N&gt;  Connections to keep open  &#x2F;&#x2F; 连接数量、并发数量    -d, --duration    &lt;T&gt;  Duration of test &#x2F;&#x2F; 持续时间    -t, --threads     &lt;N&gt;  Number of threads to use &#x2F;&#x2F; 线程数量    -s, --script      &lt;S&gt;  Load Lua script file  &#x2F;&#x2F; 运行、lua脚本的位置    -H, --header      &lt;H&gt;  Add header to request   &#x2F;&#x2F; 添加请求头        --latency          Print latency statistics  &#x2F;&#x2F; 延时        --timeout     &lt;T&gt;  Socket&#x2F;request timeout &#x2F;&#x2F; 超时的时间    -v, --version          Print version details  Numeric arguments may include a SI unit (1k, 1M, 1G)   &#x2F;&#x2F; 数字单位  Time arguments may include a time unit (2s, 2m, 2h) &#x2F;&#x2F; 时间单位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wrk -c 30 -d 5s -t 10 –latency –timeout 2s <a href="http://baidu.com/">http://baidu.com</a><br>以30个连接 压测5s用10个线程  ，超时设置为2s，打印耗时分布</p><pre class="line-numbers language-none"><code class="language-none">&gt; wrk -t4 -c30 -d30s --latency -s .&#x2F;wrk.lua  http:&#x2F;&#x2F;localhost:8082&#x2F;v1&#x2F;genRunning 30s test @ http:&#x2F;&#x2F;localhost:8082&#x2F;v1&#x2F;gen  4 threads and 30 connections  Thread Stats   Avg      Stdev     Max   +&#x2F;- Stdev    Latency    71.19ms  223.75ms   1.89s    93.06%    Req&#x2F;Sec   732.64    764.31     2.43k    77.51%  Latency Distribution     50%    4.61ms     75%   13.88ms     90%  140.69ms     99%    1.18s   36497 requests in 30.04s, 7.87MB read  Socket errors: connect 0, read 0, write 0, timeout 116Requests&#x2F;sec:   1215.05Transfer&#x2F;sec:    268.17KB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、wrk-的lua脚本编写"><a href="#2、wrk-的lua脚本编写" class="headerlink" title="2、wrk 的lua脚本编写"></a>2、wrk 的lua脚本编写</h2><p>其他的内置变量：<a href="https://www.cnblogs.com/paul8339/p/6283279.html">https://www.cnblogs.com/paul8339/p/6283279.html</a><br>官方示例脚本：<a href="https://github.com/wg/wrk/tree/master/scripts">https://github.com/wg/wrk/tree/master/scripts</a></p><pre class="line-numbers language-none"><code class="language-none">-- type: story-uimage,timestamp: 1666085563746, signature: VB64XLKEZ8OG1W7T:f5a440d2ceb8e8f7b6d4f1753db39c7b-- https:&#x2F;&#x2F;www.escapelife.site&#x2F;posts&#x2F;4b014d0b.html-- # 实现上传文件测试与json类似-- # 同样是设置wrk.body和wrk.headers的值, 只是body较麻烦一些--  https:&#x2F;&#x2F;www.runoob.com&#x2F;lua&#x2F;lua-basic-syntax.html-- wrk -t8 -c10000 -d60s --latency -s .&#x2F;wrk.lua  http:&#x2F;&#x2F;localhost:8082&#x2F;v1&#x2F;s3&#x2F;url&#x2F;signature-- go tool pprof -http :8090 http:&#x2F;&#x2F;localhost:8082&#x2F;debug&#x2F;pprof&#x2F;heap-- genObjectparams &#x3D; &#123;    [&quot;timestamp&quot;] &#x3D; &quot;1666256428050&quot;,    [&quot;type&quot;]&#x3D;&quot;test-type&quot;&#125;-- getSignature-- params &#x3D; &#123;--     [&quot;timestamp&quot;] &#x3D; &quot;1666181475552&quot;,--     [&quot;signature&quot;] &#x3D; &quot;test-signature&quot;,-- &#125;-- 1、拼装form-dataform &#x3D; &quot;&quot;for key, value in pairs(params) do    form &#x3D; form .. &quot;------WebKitFormBoundaryX3bY6PBMcxB1vCan\r\n&quot;    form &#x3D; form .. &quot;Content-Disposition: form-data; name&#x3D;&quot;&quot; .. key .. &quot;&quot;\r\n\r\n&quot;    form &#x3D; form .. value .. &quot;\r\n&quot;endform &#x3D; form .. &quot;------WebKitFormBoundaryX3bY6PBMcxB1vCan--&quot;wrk.method &#x3D; &quot;POST&quot;wrk.headers[&quot;Content-Type&quot;] &#x3D; &quot;multipart&#x2F;form-data;boundary&#x3D;------WebKitFormBoundaryX3bY6PBMcxB1vCan&quot;wrk.body &#x3D; form--curl -H &#39;BaseUrlModule: ossmanager&#39; -H &#39;Host: clotho-kr.spatio.inc&#39; -H &#39;User-Agent: okhttp&#x2F;4.8.0&#39; -H &#39;ApiName: &#x2F;ossmanager&#x2F;image&#x2F;pub&#x2F;s3&#x2F;gen&#39; -H &#39;Cookie: JSESSIONID&#x3D;&#123;ogtydvjtsdbnmevxnwu&#125;1b214bda2934cf3cb3ae15317be757bae4&#39; -H &#39;X-Spatio-Timezone: +0800&#39; -H &#39;X-Spatio-Language: zh-CN&#39; -H &#39;X-Spatio-Region: kr&#39; -H &#39;X-Spatio-Timestamp: 1666251461505&#39; -H &#39;tp: 1666251461506&#39; -H &#39;sk: 51733C934F95818E0CCDAAAB47ACD461&#39; -H &#39;once: 8fT91P&#39; -H &#39;Content-Type: application&#x2F;json&#39; --data-binary &#39;&#123;&quot;tok&quot;:&quot;Da1SR6uR7m0FZPaoHLW23O6BIqLf-lgpD2a2HXD06SXxy_bJpLGX1JsjuWqGRzDOXVpTkEMAnfLJ-LaOmREKiS76S_TBWZeJTXoiJhtCmEVhmfZBxXeE-qZqZ57ek0GblA03e8taLY4l9yQGFcRCCVi72d6BUl24pUPLkxK1TLlRRtm2owt9oe2gtNV5MA0pg4EWBwctP3hFtoDiCptJCw&quot;&#125;&#39; --compressed &#39;http:&#x2F;&#x2F;clotho-kr.spatio.inc&#x2F;ossmanager&#x2F;image&#x2F;pub&#x2F;s3&#x2F;gen?&#x3D;&amp;uv&#x3D;1.0.0&amp;net_type&#x3D;wifi&amp;uev&#x3D;1&amp;api_version&#x3D;100000&amp;distribution&#x3D;default&amp;mobile_model&#x3D;M2012K11AC&amp;pkg&#x3D;1&amp;platform&#x3D;1&amp;cv&#x3D;1.0.0.176&amp;appid&#x3D;localside&amp;uq_id&#x3D;0502e89e0323fa642d4ae8929abf1615371d&amp;request_id&#x3D;localside_MMPP10101010101000000000_1666251461505&amp;brand&#x3D;Redmi&#39;-- 2、x-www-form-- wrk.body &#x3D; &quot;foo&#x3D;bar&amp;baz&#x3D;quux&quot;-- wrk.headers[&quot;Content-Type&quot;] &#x3D; &quot;application&#x2F;x-www-form-urlencoded&quot;-- 3、json-- wrk.body &#x3D; &quot;&#123;&quot;foo&quot;:&quot;bar&quot;,&quot;baz&quot;:&quot;quux&quot;&#125;&quot;-- wrk.headers[&quot;Content-Type&quot;] &#x3D; &quot;application&#x2F;json&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 压测 </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅入不出设计模式---1、概览.</title>
      <link href="/2022/01/07/qian-ru-bu-chu-she-ji-mo-shi-1-gai-lan/"/>
      <url>/2022/01/07/qian-ru-bu-chu-she-ji-mo-shi-1-gai-lan/</url>
      
        <content type="html"><![CDATA[<h2 id="1-设计模式分类"><a href="#1-设计模式分类" class="headerlink" title="1. 设计模式分类"></a>1. 设计模式分类</h2><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101185018_57d4663a-25a7-4ca5-a336-ceed6bf1e23f.png" alt="在这里插入图片描述"></p><ul><li>从范围上分为两类：<ol><li>类[通过对象关系建立，编译时就确定下来的] (几乎所有模式都用了继承，所以类模式只指那些集中于处理类间关系的模式)</li><li>对象[在运行时可以变化，更具有动态性]</li></ol></li><li>从使用场景分为三类：<ol><li>创建型[类模式将对象的部分创建工作延迟到子类，对象模式将对象的部分创建延迟到另一个对象中]、</li><li>结构型[类模式使用继承组合类，对象模式描述了对象的组装方式]、</li><li>行为型[类模式使用继承描述算法和控制流，对象模式描述了一组对象怎样协作完成单个对象无法完成的任务]</li></ol></li></ul><h2 id="2-设计模式之间的关系"><a href="#2-设计模式之间的关系" class="headerlink" title="2. 设计模式之间的关系"></a>2. 设计模式之间的关系</h2><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101185022_3ceedaf1-0985-4f2f-a9aa-e436b90f60c0.png" alt="在这里插入图片描述"></p><h2 id="3-概括设计模式【灵活的方面】⭐️"><a href="#3-概括设计模式【灵活的方面】⭐️" class="headerlink" title="3. 概括设计模式【灵活的方面】⭐️"></a>3. 概括设计模式【灵活的方面】⭐️</h2><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-gp/20241101185025_158e28fa-7960-4105-9d47-6f3c881ade7d.png" alt="在这里插入图片描述"></p><h2 id="4-个人的总结"><a href="#4-个人的总结" class="headerlink" title="4.个人的总结"></a>4.个人的总结</h2><p>晚上回来再总结。。。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 架构 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
