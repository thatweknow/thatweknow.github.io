<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>clickhouse运维篇（二）：多机器手动部署ck集群</title>
      <link href="/2024/11/01/clickhouse-yun-wei-pian-er-duo-ji-qi-shou-dong-bu-shu-ck-ji-qun/"/>
      <url>/2024/11/01/clickhouse-yun-wei-pian-er-duo-ji-qi-shou-dong-bu-shu-ck-ji-qun/</url>
      
        <content type="html"><![CDATA[<blockquote><p>熟悉流程并且有真正部署需求可以看一下我的另一篇简化部署的文章，因为多节点配置还是比较麻烦的先要jdk、zookeeper，再ck，还有各种配置文件登录不同机器上手动改配置文件还挺容易出错的。<br><a href="https://blog.csdn.net/qq_42873554/article/details/143367712?spm=1001.2014.3001.5501">clickhouse运维篇（三）：生产环境一键生成配置并快速部署ck集群</a></p></blockquote><p>@<a href="%E5%A4%9A%E6%9C%BA%E5%99%A8%E6%89%8B%E5%8A%A8%E9%83%A8%E7%BD%B2ck%E9%9B%86%E7%BE%A4">TOC</a></p><h1 id="1、-安装jdk"><a href="#1、-安装jdk" class="headerlink" title="1、 安装jdk"></a>1、 安装jdk</h1><p>上传jdk安装包到各节点</p><p>1、解压安装包 （这里举例解压到&#x2F;opt&#x2F;jdk8u333）</p><p>2、 执行 sh setup.sh install</p><p>3、 修改环境变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>vi &#x2F;etc&#x2F;profile</p><p>在文件末尾加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#java</span><br><span class="line">export JAVA_HOME=/opt/jdk8u333</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/jre/lib/rt.jar:$&#123;JAVA_HOME&#125;</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin</span><br></pre></td></tr></table></figure><p>4、 执行指令生效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h1 id="2、-zookeeper集群搭建（选举机制，奇数节点部署）"><a href="#2、-zookeeper集群搭建（选举机制，奇数节点部署）" class="headerlink" title="2、 zookeeper集群搭建（选举机制，奇数节点部署）"></a>2、 zookeeper集群搭建（选举机制，奇数节点部署）</h1><p>举例三个节点：</p><p>172.168.1.206</p><p>172.168.1.207</p><p>172.168.1.208</p><p>上传安装包到各节点</p><p>解压安装包（这里举例解压到&#x2F;opt&#x2F;app&#x2F;zookeeper-3.7.2）</p><p>1、创建目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /opt/app/zookeeper-3.7.2/zkData</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、 复制zoo_sample.cfg文件命名为 zoo.cfg</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、 在各个节点创建一个id（距离下边在206、207、208三个节点的zkData目录下分别创建）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 1 &gt;/opt/app/zookeeper-3.7.2/zkData/myid</span><br><span class="line">echo 2 &gt;/opt/app/zookeeper-3.7.2/zkData/myid</span><br><span class="line">echo 3 &gt;/opt/app/zookeeper-3.7.2/zkData/myid</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、修改zoo.cfg文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi zoo.cfg</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>clientPort为16871</p><p>dataDir为上边创建的zkData</p><p>server.后边的1、2、3为机器节点id；</p><p><strong>server.1&#x3D;172.168.1.206:2888:3888</strong></p><p><strong>server.2&#x3D;172.168.1.207:2888:3888</strong></p><p><strong>server.3&#x3D;172.168.1.208:2888:3888</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/opt/app/zookeeper-3.7.2/zkData</span><br><span class="line">clientPort=16871</span><br><span class="line">server.1=172.168.1.206:2888:3888</span><br><span class="line">server.2=172.168.1.207:2888:3888</span><br><span class="line">server.3=172.168.1.208:2888:3888</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5、 在其余节点重复以上操作，在bin目录下执行启动脚本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh zkServer.sh start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6、 查看集群状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./zkServer.sh status</span><br></pre></td></tr></table></figure><p>说明集群搭建完成，172.168.1.208是主节点</p><h1 id="3、-clickhouse集群规划"><a href="#3、-clickhouse集群规划" class="headerlink" title="3、 clickhouse集群规划"></a>3、 clickhouse集群规划</h1><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-data/20241101161154_93d3a247-7ee5-4ad5-a59d-6aa3b573953a.png" alt="在这里插入图片描述"></p><ol><li>根据集群部署分配的服务器进行预先考虑</li></ol><p>a. 需要多少个分片  【多少台机器多少个分片，最好一个机器不要多分片，会导致查询的负载不平衡，导致短筒效应 (保证分片数&lt;&#x3D;机器数最佳)】</p><p>b. 每个分片多少个副本 【默认同一个分片的副本不要在同一个机器上，不能起到容灾作用，一般情况一个分片内两个实例即可，一主一副】</p><ol start="2"><li><p>同一个实例不能既是主分片又是副本分片，想要部署m分片每个分片内n个实例的集群就需要部署 m*n 个clickhouse实例。</p></li><li><p>例如，所以如果只有三台机器，想部署3分片每个分片2实例的集群就需要3*2&#x3D;6个 实例【遵循上面1.a中 分片数&lt;&#x3D;机器数】。 如果机器1上有了shard1的分片，副本实例就最好启动在机器2或者机器3上【遵循上面1.b中 同一分片副本不在相同机器】<br><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-data/20241101161158_41226103-aad4-430f-b79f-84507395c6b7.png" alt="在这里插入图片描述"></p></li></ol><h1 id="4、-clickhouse集群搭建"><a href="#4、-clickhouse集群搭建" class="headerlink" title="4、 clickhouse集群搭建"></a>4、 clickhouse集群搭建</h1><p>举例三个节点：</p><p>172.168.1.206</p><p>172.168.1.207</p><p>172.168.1.208</p><p>上传安装包到各节点</p><p>1、解压安装包 （这里举例解压到&#x2F;opt&#x2F;app&#x2F;clickhouse-23.4.2.9)</p><p>2、 修改配置文件，打开config目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd config</span><br><span class="line">vi config.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、 修改config.xml文件</p><p>设置clickhouse端口16860</p><p>打开所有地址监听</p><p>tcp端口默认9000（可以按需修改）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;http_port&gt;16860&lt;/http_port&gt;</span><br><span class="line">&lt;listen_host&gt;::&lt;/listen_host&gt;</span><br><span class="line">&lt;tcp_port&gt;9000&lt;/tcp_port&gt;</span><br></pre></td></tr></table></figure><p>添加集群节点信息 【三机器两分片、每个分片两个实例的配置文件】</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// clickhose xml需要修改的内容</span><br><span class="line">    &lt;remote_servers&gt;</span><br><span class="line">        &lt;!-- 可自定义clickhouse集群名 --&gt;</span><br><span class="line">        &lt;ck_cluster&gt;</span><br><span class="line">            &lt;!-- 数据分片1  --&gt;</span><br><span class="line">            &lt;shard&gt;</span><br><span class="line">                &lt;internal_replication&gt;true&lt;/internal_replication&gt;</span><br><span class="line">                &lt;!-- 副本1 --&gt;</span><br><span class="line">                &lt;replica&gt;</span><br><span class="line">                    &lt;host&gt;172.168.1.206&lt;/host&gt;</span><br><span class="line">                    &lt;port&gt;9000&lt;/port&gt;</span><br><span class="line">                    &lt;user&gt;default&lt;/user&gt;</span><br><span class="line">                    &lt;password&gt;my_password&lt;/password&gt;</span><br><span class="line">                &lt;/replica&gt;</span><br><span class="line">                &lt;!-- 副本2 --&gt;</span><br><span class="line">                &lt;replica&gt;</span><br><span class="line">                    &lt;host&gt;172.168.1.207&lt;/host&gt;</span><br><span class="line">                    &lt;port&gt;9000&lt;/port&gt;</span><br><span class="line">                    &lt;user&gt;default&lt;/user&gt;</span><br><span class="line">                    &lt;password&gt;my_password&lt;/password&gt;</span><br><span class="line">                &lt;/replica&gt;</span><br><span class="line">            &lt;/shard&gt;</span><br><span class="line">            &lt;!-- 数据分片2  --&gt;</span><br><span class="line">            &lt;shard&gt;</span><br><span class="line">                &lt;internal_replication&gt;true&lt;/internal_replication&gt;</span><br><span class="line">                &lt;replica&gt;</span><br><span class="line">                    &lt;host&gt;172.168.1.207&lt;/host&gt;</span><br><span class="line">                    &lt;port&gt;9001&lt;/port&gt;</span><br><span class="line">                    &lt;user&gt;default&lt;/user&gt;</span><br><span class="line">                    &lt;password&gt;my_password&lt;/password&gt;</span><br><span class="line">                &lt;/replica&gt;</span><br><span class="line">                &lt;replica&gt;</span><br><span class="line">                    &lt;host&gt;172.168.1.208&lt;/host&gt;</span><br><span class="line">                    &lt;port&gt;9000&lt;/port&gt;</span><br><span class="line">                    &lt;user&gt;default&lt;/user&gt;</span><br><span class="line">                    &lt;password&gt;my_password&lt;/password&gt;</span><br><span class="line">                &lt;/replica&gt;</span><br><span class="line">            &lt;/shard&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/ck_cluster&gt;</span><br><span class="line">    &lt;/remote_servers&gt;</span><br><span class="line"></span><br><span class="line">    &lt;macros&gt;</span><br><span class="line">        &lt;shard&gt;02&lt;/shard&gt;</span><br><span class="line">        &lt;replica&gt;replica_208&lt;/replica&gt;</span><br><span class="line">    &lt;/macros&gt;</span><br><span class="line"></span><br><span class="line">    &lt;zookeeper&gt;</span><br><span class="line">        &lt;!-- index内容为server.id --&gt;</span><br><span class="line">        &lt;node index=&quot;1&quot;&gt;</span><br><span class="line">            &lt;host&gt;172.168.1.206&lt;/host&gt;</span><br><span class="line">            &lt;port&gt;16871&lt;/port&gt;</span><br><span class="line">        &lt;/node&gt;</span><br><span class="line">        &lt;node index=&quot;2&quot;&gt;</span><br><span class="line">            &lt;host&gt;172.168.1.207&lt;/host&gt;</span><br><span class="line">            &lt;port&gt;16871&lt;/port&gt;</span><br><span class="line">        &lt;/node&gt;</span><br><span class="line">        &lt;node index=&quot;3&quot;&gt;</span><br><span class="line">            &lt;host&gt;172.168.1.208&lt;/host&gt;</span><br><span class="line">            &lt;port&gt;16871&lt;/port&gt;</span><br><span class="line">        &lt;/node&gt;</span><br><span class="line">    &lt;/zookeeper&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 如果一个机器上部署多个实例这几个端口不要冲突 --&gt;</span><br><span class="line">    &lt;http_port&gt;16860&lt;/http_port&gt;</span><br><span class="line">    &lt;tcp_port&gt;9000&lt;/tcp_port&gt;</span><br><span class="line">    &lt;interserver_http_host&gt;172.168.1.208&lt;/interserver_http_host&gt;</span><br><span class="line">&lt;interserver_http_port&gt;9009&lt;/interserver_http_port&gt;</span><br><span class="line">    &lt;http&gt;</span><br><span class="line">        &lt;max_connections&gt;1024&lt;/max_connections&gt;</span><br><span class="line">        &lt;async_insert&gt;1&lt;/async_insert&gt; &lt;!-- 启用异步插入 --&gt;</span><br><span class="line">    &lt;/http&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- vim下输入 /clickhouse-23.4  查找path相关tag是否配置正确--&gt;&lt;path&gt;/opt/app/my_app-2.4/clickhouse-23.4.2.9/data/&lt;/path&gt;</span><br><span class="line">  &lt;format_schema_path&gt;/opt/app/my_app-2.4/clickhouse-23.4.2.9/data/format_schemas/&lt;/format_schema_path&gt;</span><br><span class="line">    &lt;log&gt;/opt/app/my_app-2.4/clickhouse-23.4.2.9/log/clickhouse-server/clickhouse-server.log&lt;/log&gt;</span><br><span class="line">    &lt;errorlog&gt;/opt/app/my_app-2.4/clickhouse-23.4.2.9/log/clickhouse-server/clickhouse-server.err.log&lt;/errorlog&gt;</span><br><span class="line">    &lt;tmp_path&gt;/opt/app/my_app-2.4/clickhouse-23.4.2.9/tmp/&lt;/tmp_path&gt;</span><br><span class="line">    &lt;user_files_path&gt;/opt/app/my_app-2.4/clickhouse-23.4.2.9/data/user_files/&lt;/user_files_path&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、修改users.xml文件</p><p>设置default账号的密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;password&gt;my_password&lt;/password&gt;</span><br></pre></td></tr></table></figure><p>5、其余节点重复以上步骤，然后启动服务（注意修改config.xml中的<macros>值）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/opt/app/my_app-2.4/clickhouse-23.4.2.9/bin/clickhouse server --config-file /opt/app/my_app-2.4/clickhouse-23.4.2.9/config/config.xml --pid-file /opt/app/my_app-2.4/clickhouse-23.4.2.9/clickhouse.pid --daemon</span><br></pre></td></tr></table></figure><h1 id="5、-配置nginx代理"><a href="#5、-配置nginx代理" class="headerlink" title="5、 配置nginx代理"></a>5、 配置nginx代理</h1><p>编辑nginx配置文件底部加入clickhouse反向代理供web服务调用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim  /opt/app/my_app-2.4/nginx/conf/my_app.conf</span><br><span class="line"></span><br><span class="line">upstream clickhouse_cluster &#123;</span><br><span class="line">    server 172.168.1.206:16860;</span><br><span class="line">    server 172.168.1.207:16860;</span><br><span class="line">    server 172.168.1.207:16861;    </span><br><span class="line">    server 172.168.1.208:16860;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增的 ClickHouse 反向代理并配置相应的黑白名单策略， 入的流量应该是访问ck集群的流量，</span></span><br><span class="line"><span class="comment"># 所以应该是访问源的网段也就是my_app对应的网段或者ip</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 1442;</span><br><span class="line">    allow localhost;</span><br><span class="line"> allow 192.168.13.0/24;</span><br><span class="line"> allow 10.1.5.0/16;    </span><br><span class="line">    deny all;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://clickhouse_cluster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>● nginx反向代理验证</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# curl localhost:1442</span><br><span class="line">Ok.</span><br></pre></td></tr></table></figure><h1 id="6、-集群验证"><a href="#6、-集群验证" class="headerlink" title="6、 集群验证"></a>6、 集群验证</h1><p>这里使用dbever工具验证</p><p>1、执行sql，查看ck集群节点状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * from system.clusters;</span><br></pre></td></tr></table></figure><p>2、执行sql，查看zookeeper中&#x2F;clickhouse的节点是否存在</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM system.zookeeper WHERE path = &#x27;/clickhouse&#x27;;</span><br></pre></td></tr></table></figure><p>如果截图如上则表示分布式集群部署成功<br> 查看各个节点状态，关注最后一列可以看出各个节点的与集群的连接状况【比如第三行数字22就是实例与cluster连接有问题】</p><h1 id="7、-分布式，本地表测试"><a href="#7、-分布式，本地表测试" class="headerlink" title="7、 分布式，本地表测试"></a>7、 分布式，本地表测试</h1><ul><li>语句加<code>on cluster ck_cluster</code> 就是在所有实例上执行</li></ul><p>创建一个表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 删除本地表</span><br><span class="line">DROP TABLE IF EXISTS test_table_local on cluster ck_cluster SYNC;</span><br><span class="line"></span><br><span class="line">-- 创建本地表</span><br><span class="line">CREATE TABLE test_table_local ON CLUSTER ck_cluster</span><br><span class="line">(</span><br><span class="line">    `tenantId`        UInt64 CODEC (Delta(8), ZSTD(1)),</span><br><span class="line">    `alarmId`         String,</span><br><span class="line">    `grade`           Int32,</span><br><span class="line">) ENGINE = ReplicatedMergeTree(&#x27;/clickhouse/tables/&#123;uuid&#125;/&#123;shard&#125;/audit_log_local&#x27;, &#x27;&#123;replica&#125;&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 删除分布式表</span><br><span class="line">DROP TABLE IF EXISTS test_table_all on cluster ck_cluster SYNC;</span><br><span class="line">-- 创建分布式表</span><br><span class="line">CREATE TABLE test_table_all ON CLUSTER ck_cluster as test_table_local ENGINE = Distributed(&#x27;ck_cluster&#x27;, &#x27;default&#x27;, &#x27;test_table_local&#x27;, rand());</span><br></pre></td></tr></table></figure><p>分布式表测试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT count(*) FROM test_table_all;</span><br></pre></td></tr></table></figure><p>本地表测试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO test_table_local (id, name, grade) VALUES (1,&#x27;jack&#x27;,60);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> common </category>
          
      </categories>
      
      
        <tags>
            
            <tag> common </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、golang原理篇---从源代码文件到可执行文件过程发生了哪些事情？</title>
      <link href="/2024/11/01/yi-golang-yuan-li-pian-cong-yuan-dai-ma-wen-jian-dao-ke-zhi-xing-wen-jian-guo-cheng-fa-sheng-liao-na-xie-shi-qing/"/>
      <url>/2024/11/01/yi-golang-yuan-li-pian-cong-yuan-dai-ma-wen-jian-dao-ke-zhi-xing-wen-jian-guo-cheng-fa-sheng-liao-na-xie-shi-qing/</url>
      
        <content type="html"><![CDATA[<p>主要过程：</p><ul><li>前端编译<ol><li>根据架构初始化不同的链接器Link结构体</li><li>根据一些参数  比如，go compile后用户输入的参数初始化Link结构体里面的一些字段</li><li>词法分析、语法分析 生成ast抽象语法树，类型检查。一些关键字转换为runtime里的函数</li><li>逃逸分析</li></ol></li><li>后端编译<ol><li>初始化生成中间代码的配置。ssaconfig</li><li>编译顶层函数，生成、优化ssa。</li><li>汇编代码生成机器码</li></ol></li></ul><p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h2 id="1-compile包为编译器的入口"><a href="#1-compile包为编译器的入口" class="headerlink" title="1. compile包为编译器的入口"></a>1. compile包为编译器的入口</h2><p>【本文的go代码为1.16，更高版本的可能文件差别很大】</p><p><a href="https://github.com/golang/go%EF%BC%8Cgolang%E6%BA%90%E4%BB%A3%E7%A0%81%E4%B8%AD%E8%B7%AF%E5%BE%84%E4%B8%BA">https://github.com/golang/go，golang源代码中路径为</a></p><p><code>src/cmd/compile</code>的包即为compile的全部代码，承担了将golang从.go文件编译成为二进制可执行文件的全部过程。</p><p><code>src/cmd/compile/main.go</code>即为编译器程序的入口文件。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// disable timestamps for reproducible output</span></span><br><span class="line">log.SetFlags(<span class="number">0</span>)</span><br><span class="line">log.SetPrefix(<span class="string">&quot;compile: &quot;</span>)</span><br><span class="line"><span class="comment">// objabi.GOARCH获取硬件平台，然后根据硬件平台选择不同的archInit初始函数</span></span><br><span class="line">archInit, ok := archInits[objabi.GOARCH]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;compile: unknown architecture %q\n&quot;</span>, objabi.GOARCH)</span><br><span class="line">os.Exit(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个函数是根据硬件平台进行编译的全过程</span></span><br><span class="line">gc.Main(archInit)</span><br><span class="line">gc.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-词法、语法分析"><a href="#2-词法、语法分析" class="headerlink" title="2. 词法、语法分析"></a>2. 词法、语法分析</h2><p><code>lines := parseFiles(flag.Args())</code>对输入的文件进行词法与语法分析得到对应的抽象语法树。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd/compile/main.go:main()-&gt;</span><br><span class="line">gc.Main(archInit)</span><br><span class="line">  cmd/compile/internal/gc/main.go:Main(archInit func(*Arch))-&gt;</span><br><span class="line">    lines := parseFiles(flag.Args())</span><br><span class="line">    cmd/compile/internal/gc/noder.go:parseFiles()-&gt;</span><br><span class="line">syntax.Parse(base, f, p.error, p.pragma, syntax.CheckBranches)</span><br><span class="line">      cmd/compile/internal/syntax/syntax.go:Parse(base *PosBase, src io.Reader.......)-&gt;</span><br><span class="line">      p.fileOrNil()</span><br><span class="line">      cmd/compile/internal/syntax/parser.go:(p *parser) fileOrNil() *File -&gt;</span><br></pre></td></tr></table></figure><h3 id="2-1-文法分析"><a href="#2-1-文法分析" class="headerlink" title="2.1 文法分析"></a>2.1 文法分析</h3><p><code>cmd/compile/internal/syntax/parser.go:func (p *parser) fileOrNil() *File </code>是整个文法分析的过程。这个过程中是夹杂着词法分析的。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">SourceFile = PackageClause <span class="string">&quot;;&quot;</span> &#123; ImportDecl <span class="string">&quot;;&quot;</span> &#125; &#123; TopLevelDecl <span class="string">&quot;;&quot;</span> &#125; </span><br></pre></td></tr></table></figure><p>每个 Go 源代码文件最终都会被解析成一个独立的抽象语法树，所以语法树最顶层的结构或者开始符号都是 SourceFile<br>每一个文件都包含一个 package 的定义以及可选的 import 声明和其他的顶层声明（TopLevelDecl）<br>每一个 SourceFile 在编译器中都对应一个<code> cmd/compile/internal/syntax.File</code> 结构体</p><p>这个过程的代码中，<code>p.next() got() want()</code>都是词法分析的过程。</p><h3 id="2-2-词法分析"><a href="#2-2-词法分析" class="headerlink" title="2.2 词法分析"></a>2.2 词法分析</h3><p>Go 语言的词法解析是通过 <code>src/cmd/compile/internal/syntax/scanner.go</code> 文件中的 <code>cmd/compile/internal/syntax.scanner</code> 结构体实现的，这个结构体会持有当前扫描的数据源文件、启用的模式和当前被扫描到的 Token。</p><p><code>parser结构体就是p既是语法解析器，又是词法解析器【结构体内嵌】,p.next()惰性加载进行词法分析为token作为语法分析的输入。</code></p><p><code>src/cmd/compile/internal/syntax/tokens.go</code> 文件中定义了 Go 语言中支持的全部 Token 类型, 通过next()方法进行判断。s.next()又调用了s.nextch()获取文件中最近的未被解析的字符，然后根据当前字符的不同执行不同的 case。</p><p>在 for 循环中不断获取最新的字符，将字符通过<code> cmd/compile/internal/syntax.source.nextch</code> 方法追加到 <code>cmd/compile/internal/syntax.scanner</code> 持有的缓冲区中。</p><h2 id="3-类型检查"><a href="#3-类型检查" class="headerlink" title="3. 类型检查"></a>3. 类型检查</h2><h3 id="3-1-静态、动态类型"><a href="#3-1-静态、动态类型" class="headerlink" title="3.1 静态、动态类型"></a>3.1 静态、动态类型</h3><ul><li>静态类型检查是基于对源代码的分析来确定运行程序类型安全的过程，如果我们的代码能够通过静态类型检查，那么当前程序在一定程度上可以满足类型安全的要求，它能够减少程序在运行时的类型检查，也可以被看作是一种代码优化的方式。</li></ul><blockquote><p>作为一个开发者来说，静态类型检查能够帮助我们在编译期间发现程序中出现的类型错误，一些动态类型的编程语言都会有社区提供的工具为这些编程语言加入静态类型检查，例如 JavaScript 的 <a href="https://flow.org/">Flow</a><a href="https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-typecheck/#fn:4">4</a>，这些工具能够在编译期间发现代码中的类型错误。</p><p>相信很多读者也都听过『动态类型一时爽，代码重构火葬场』，使用 Python、Ruby 等编程语言的开发者一定对这句话深有体会，静态类型为代码在编译期间提供了约束，编译器能够在编译期间约束变量的类型。</p><p>静态类型检查在重构时能够帮助我们节省大量时间并避免遗漏，但是如果编程语言仅支持动态类型检查，那么就需要写大量的单元测试保证重构不会出现类型错误。当然这里并不是说测试不重要，我们写的<strong>任何代码都应该有良好的测试</strong>，这与语言没有太多的关系。</p></blockquote><ul><li>动态类型检查是在运行时确定程序类型安全的过程，它需要编程语言在编译时为所有的对象加入类型标签等信息，运行时可以使用这些存储的类型信息来实现动态派发、向下转型、反射以及其他特性。动态类型检查能为工程师提供更多的操作空间，让我们能在运行时获取一些类型相关的上下文并根据对象的类型完成一些动态操作。</li></ul><blockquote><p>只使用动态类型检查的编程语言叫做动态类型编程语言，常见的动态类型编程语言就包括 JavaScript、Ruby 和 PHP，虽然这些编程语言在使用上非常灵活也不需要经过编译，但是有问题的代码不会因为更加灵活就会减少错误，该出错时仍然会出错，它们在提高灵活性的同时，也提高了对工程师的要求。</p></blockquote><ul><li>静态类型检查和动态类型检查不是完全冲突和对立的，很多编程语言都会同时使用两种类型检查，例如：Java 不仅在编译期间提前检查类型发现类型错误，还为对象添加了类型信息，在运行时使用反射根据对象的类型动态地执行方法增强灵活性并减少冗余代码。</li></ul><h3 id="3-2-go语言"><a href="#3-2-go语言" class="headerlink" title="3.2 go语言"></a>3.2 go语言</h3><p>Go 语言的编译器不仅使用静态类型检查来保证程序运行的类型安全，还会在编程期间引入类型信息，让工程师能够使用反射来判断参数和变量的类型。当我们想要将 <code>interface&#123;&#125;</code> 转换成具体类型时会进行动态类型检查，如果无法发生转换就会发生程序崩溃。</p><p>类型检查是 Go 语言编译的第二个阶段，在词法和语法分析之后我们得到了每个文件对应的抽象语法树，随后的类型检查会遍历抽象语法树中的节点，对每个节点的类型进行检验，找出其中存在的语法错误，在这个过程中也可能会对抽象语法树进行改写，这不仅能够去除一些不会被执行的代码、对代码进行优化以提高执行效率，而且也会修改 <code>make</code>、<code>new</code> 等关键字对应节点的操作类型。</p><p><code>make</code> 和 <code>new</code> 这些内置函数其实并不会直接对应某些函数的实现，它们会在编译期间被转换成真正存在的其他函数。</p><h2 id="4-中间代码生成"><a href="#4-中间代码生成" class="headerlink" title="4. 中间代码生成"></a>4. 中间代码生成</h2><p>词法与语法分析以及类型检查两个部分都属于编译器前端，它们负责对源代码进行分析并检查其中存在的词法和语法错误，经过这两个阶段生成的抽象语法树已经不存在语法错误了。</p><p>而中间代码生成则属于编译器的后端工作。</p><p>为什么需要中间代码：</p><p>编译器面对的复杂场景，很多编译器需要将源代码翻译成多种机器码，直接翻译高级编程语言相对比较困难。将编程语言到机器码的过程拆成中间代码生成和机器码生成两个简单步骤可以简化该问题，中间代码是一种更接近机器语言的表示形式，对中间代码的优化和分析相比直接分析高级编程语言更容易。</p><p>Go 语言编译器的中间代码具有静态单赋值（SSA）的特性，一个变量只会被赋值一次，进而优化执行的步骤。</p><p>这些用于遍历抽象语法树的函数会将一些关键字和内建函数转换成函数调用，<br>例如： 上述函数会将 panic、recover 两个内建函数转换成 runtime.gopanic 和 runtime.gorecover 两个真正运行时函数，<br>而关键字 new 也会被转换成调用 runtime.newobject 函数。</p><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-data/20241101161213_def485bf-4e69-41db-9d0c-4475a614f273.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-g5F57sq4-1641023703277)(img/2019-02-05-golang-keyword-and-builtin-mapping.png)]"></p><p>上图是从关键字或内建函数到运行时函数的映射，其中涉及 Channel、哈希、make、new 关键字以及控制流中的关键字 select 等。<br>转换后的全部函数都属于运行时包，我们能在 src&#x2F;cmd&#x2F;compile&#x2F;internal&#x2F;gc&#x2F;builtin&#x2F;runtime.go 文件中找到函数对应的签名和定义。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makemap64</span><span class="params">(mapType *<span class="type">byte</span>, hint <span class="type">int64</span>, mapbuf *any)</span></span> (hmap <span class="keyword">map</span>[any]any)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makemap</span><span class="params">(mapType *<span class="type">byte</span>, hint <span class="type">int</span>, mapbuf *any)</span></span> (hmap <span class="keyword">map</span>[any]any)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makemap_small</span><span class="params">()</span></span> (hmap <span class="keyword">map</span>[any]any)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapaccess1</span><span class="params">(mapType *<span class="type">byte</span>, hmap <span class="keyword">map</span>[any]any, key *any)</span></span> (val *any)</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makechan64</span><span class="params">(chanType *<span class="type">byte</span>, size <span class="type">int64</span>)</span></span> (hchan <span class="keyword">chan</span> any)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makechan</span><span class="params">(chanType *<span class="type">byte</span>, size <span class="type">int</span>)</span></span> (hchan <span class="keyword">chan</span> any)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这里的定义只是让 Go 语言完成编译，它们的实现都在另一个 <a href="https://github.com/golang/go/tree/master/src/runtime"><code>runtime</code></a> 包中。简单总结一下，编译器会将 Go 语言关键字转换成运行时包中的函数，也就是说关键字和内置函数的功能是由编译器和运行时共同完成的。</p><p>遍历节点时几个 Channel 操作是如何转换成运行时对应方法的，首先介绍向 Channel 发送消息或者从 Channel 接收消息两个操作，编译器会分别使用 <code>OSEND</code> 和 <code>ORECV</code> 表示发送和接收消息两个操作，在 <a href="https://draveness.me/golang/tree/cmd/compile/internal/gc.walkexpr"><code>cmd/compile/internal/gc.walkexpr</code></a> 函数中会根据节点类型的不同进入不同的分支：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">walkexpr</span><span class="params">(n *Node, init *Nodes)</span></span> *Node &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> OSEND:</span><br><span class="line">n1 := n.Right</span><br><span class="line">n1 = assignconv(n1, n.Left.Type.Elem(), <span class="string">&quot;chan send&quot;</span>)</span><br><span class="line">n1 = walkexpr(n1, init)</span><br><span class="line">n1 = nod(OADDR, n1, <span class="literal">nil</span>)</span><br><span class="line">n = mkcall1(chanfn(<span class="string">&quot;chansend1&quot;</span>, <span class="number">2</span>, n.Left.Type), <span class="literal">nil</span>, init, n.Left, n1)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当遇到 OSEND 操作时，会使用 cmd&#x2F;compile&#x2F;internal&#x2F;gc.mkcall1 创建一个操作为 OCALL 的节点，这个节点包含当前调用的函数 runtime.chansend1 和参数，新的 OCALL 节点会替换当前的 OSEND 节点，这就完成了对 OSEND 子树的改写。</p><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-data/20241101161223_451d348e-191d-4665-a8f0-cf950a6976bd.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-tmGnS3zD-1641023703278)(img/2019-12-23-15771129929846-golang-ocall-node.png)]"></p><p>首先，从 AST 到 SSA 的转化过程中，编译器会生成将函数调用的参数放到栈上的中间代码，处理参数之后才会生成一条运行函数的命令 ssa.OpStaticCall：[cmd&#x2F;compile&#x2F;internal&#x2F;obj.LSym，表示该方法已经注册到运行时包中]</p><ol><li>当使用 defer 关键字时，插入 runtime.deferproc 函数；</li><li>当使用 go 关键字时，插入 runtime.newproc 函数符号；</li><li>在遇到其他情况时会插入表示普通函数对应的符号；</li></ol><p>cmd&#x2F;compile&#x2F;internal&#x2F;gc&#x2F;ssa.go 这个拥有将近 7000 行代码的文件包含用于处理不同节点的各种方法，编译器会根据节点类型的不同在一个巨型 switch 语句处理不同的情况，这也是我们在编译器这种独特的场景下才能看到的现象。</p><p>中间代码的生成过程是从 AST 抽象语法树到 SSA 中间代码的转换过程，在这期间会对语法树中的关键字再进行改写，改写后的语法树会经过多轮处理转变成最后的 SSA 中间代码，相关代码中包括了大量 switch 语句、复杂的函数和调用栈，阅读和分析起来也非常困难。</p><p>很多 Go 语言中的关键字和内置函数都是在这个阶段被转换成运行时包中方法的，作者在后面的章节会从具体的语言关键字和内置函数的角度介绍一些数据结构和内置函数的实现。</p><h2 id="5-机器码生成"><a href="#5-机器码生成" class="headerlink" title="5. 机器码生成"></a>5. 机器码生成</h2><p>机器码的生成在 Go 的编译器中主要由两部分协同工作，其中一部分是负责 SSA 中间代码降级和根据目标架构进行特定处理的 <a href="https://github.com/golang/go/tree/master/src/cmd/compile/internal/ssa"><code>cmd/compile/internal/ssa</code></a> 包，另一部分是负责生成机器码的 <a href="https://github.com/golang/go/tree/master/src/cmd/internal/obj"><code>cmd/internal/obj</code></a><a href="https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-machinecode/#fn:4">4</a>：</p><ul><li><a href="https://github.com/golang/go/tree/master/src/cmd/compile/internal/ssa"><code>cmd/compile/internal/ssa</code></a> 主要负责对 SSA 中间代码进行降级、执行架构特定的优化和重写并生成 <a href="https://draveness.me/golang/tree/cmd/compile/internal/obj.Prog"><code>cmd/compile/internal/obj.Prog</code></a> 指令；</li><li><a href="https://github.com/golang/go/tree/master/src/cmd/internal/obj"><code>cmd/internal/obj</code></a> 作为汇编器会将这些指令转换成机器码完成这次编译；</li></ul><p>SSA 降级 </p><p>SSA 降级是在中间代码生成的过程中完成的，其中将近 50 轮处理的过程中，<code>lower</code> 以及后面的阶段都属于 SSA 降级这一过程，这么多轮的处理会将 SSA 转换成机器特定的操作：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> passes = [...]pass&#123;</span><br><span class="line">...</span><br><span class="line">&#123;name: <span class="string">&quot;lower&quot;</span>, fn: lower, required: <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;name: <span class="string">&quot;lowered deadcode for cse&quot;</span>, fn: deadcode&#125;, <span class="comment">// deadcode immediately before CSE avoids CSE making dead values live again</span></span><br><span class="line">&#123;name: <span class="string">&quot;lowered cse&quot;</span>, fn: cse&#125;,</span><br><span class="line">...</span><br><span class="line">&#123;name: <span class="string">&quot;trim&quot;</span>, fn: trim&#125;, <span class="comment">// remove empty blocks</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SSA 降级执行的第一个阶段就是 <code>lower</code>，该阶段的入口方法是 <a href="https://draveness.me/golang/tree/cmd/compile/internal/ssa.lower"><code>cmd/compile/internal/ssa.lower</code></a>函数，它会将 SSA 的中间代码转换成机器特定的指令：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lower</span><span class="params">(f *Func)</span></span> &#123;</span><br><span class="line">applyRewrite(f, f.Config.lowerBlock, f.Config.lowerValue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向 <a href="https://draveness.me/golang/tree/cmd/compile/internal/ssa.applyRewrite"><code>cmd/compile/internal/ssa.applyRewrite</code></a> 传入的两个函数 <code>lowerBlock</code> 和 <code>lowerValue</code> 是在<a href="https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-ir-ssa/">中间代码生成</a>阶段初始化 SSA 配置时确定的，这两个函数会分别转换函数中的代码块和代码块中的值。</p><p>假设目标机器使用 x86 的架构，最终会调用 <a href="https://draveness.me/golang/tree/cmd/compile/internal/ssa.rewriteBlock386"><code>cmd/compile/internal/ssa.rewriteBlock386</code></a> 和 <a href="https://draveness.me/golang/tree/cmd/compile/internal/ssa.rewriteValue386"><code>cmd/compile/internal/ssa.rewriteValue386</code></a> 两个函数，这两个函数是两个巨大的 switch 语句，前者总共有 2000 多行，后者将近 700 行，用于处理 x86 架构重写的函数总共有将近 30000 行代码，你能在 <a href="https://github.com/golang/go/blob/master/src/cmd/compile/internal/ssa/rewrite386.go"><code>cmd/compile/internal/ssa/rewrite386.go</code></a> 这里找到文件的全部内容，我们只节选其中的一段展示一下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rewriteValue386</span><span class="params">(v *Value)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> v.Op &#123;</span><br><span class="line"><span class="keyword">case</span> Op386ADCL:</span><br><span class="line"><span class="keyword">return</span> rewriteValue386_Op386ADCL_0(v)</span><br><span class="line"><span class="keyword">case</span> Op386ADDL:</span><br><span class="line"><span class="keyword">return</span> rewriteValue386_Op386ADDL_0(v) || rewriteValue386_Op386ADDL_10(v) || rewriteValue386_Op386ADDL_20(v)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rewriteValue386_Op386ADCL_0</span><span class="params">(v *Value)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="comment">// match: (ADCL x (MOVLconst [c]) f)</span></span><br><span class="line"><span class="comment">// cond:</span></span><br><span class="line"><span class="comment">// result: (ADCLconst [c] x f)</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">_ = v.Args[<span class="number">2</span>]</span><br><span class="line">x := v.Args[<span class="number">0</span>]</span><br><span class="line">v_1 := v.Args[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> v_1.Op != Op386MOVLconst &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">c := v_1.AuxInt</span><br><span class="line">f := v.Args[<span class="number">2</span>]</span><br><span class="line">v.reset(Op386ADCLconst)</span><br><span class="line">v.AuxInt = c</span><br><span class="line">v.AddArg(x)</span><br><span class="line">v.AddArg(f)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写的过程会将通用的 SSA 中间代码转换成目标架构特定的指令，上述的 <code>rewriteValue386_Op386ADCL_0</code> 函数会使用 <code>ADCLconst</code> 替换 <code>ADCL</code> 和 <code>MOVLconst</code> 两条指令，它能通过对指令的压缩和优化减少在目标硬件上执行所需要的时间和资源。</p><h2 id="6-汇编学习"><a href="#6-汇编学习" class="headerlink" title="6. 汇编学习"></a>6. 汇编学习</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go tool compile -S hello.go</span><br><span class="line">go tool objdump</span><br></pre></td></tr></table></figure><p><code>go build -work -debug-actiongraph=graph.json print.go// -n 参数展示命令不执行  -x  展示执行的命令 -work 保留中间目录 </code></p><p>在这个过程中compile调用的就是 cmd&#x2F;compile。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;执行过程&quot;: &quot;编译过程从下往上，从最后一个阶段往第一个阶段合并。&quot;,</span><br><span class="line">      &quot;ID&quot;: 0,</span><br><span class="line">      &quot;Mode&quot;: &quot;link-install&quot;,</span><br><span class="line">      &quot;Package&quot;: &quot;command-line-arguments&quot;,</span><br><span class="line">      &quot;Deps&quot;: [</span><br><span class="line">         1</span><br><span class="line">      ],</span><br><span class="line">      &quot;Objdir&quot;: &quot;/var/folders/57/8f4zkqd54qn4f8c_btvcs9zc0000gn/T/go-build1635635154/b001/&quot;,</span><br><span class="line">      &quot;Target&quot;: &quot;print&quot;,</span><br><span class="line">      &quot;Priority&quot;: 36,</span><br><span class="line">      &quot;Built&quot;: &quot;print&quot;,</span><br><span class="line">      &quot;BuildID&quot;: &quot;s3kSPuGqMFL1ltXka1-1/7T8ELBT1aC0tc7iktmm4/zG8NbUygi2kJFAzeDqMj/EQ04B5akVd2353iztOUr&quot;,</span><br><span class="line">      &quot;TimeReady&quot;: &quot;2021-11-13T22:49:46.10052+08:00&quot;,</span><br><span class="line">      &quot;TimeStart&quot;: &quot;2021-11-13T22:49:46.100523+08:00&quot;,</span><br><span class="line">      &quot;TimeDone&quot;: &quot;2021-11-13T22:49:46.100701+08:00&quot;,</span><br><span class="line">      &quot;Cmd&quot;: null</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;ID&quot;: 1,</span><br><span class="line">      &quot;Mode&quot;: &quot;link&quot;,</span><br><span class="line">      &quot;Package&quot;: &quot;command-line-arguments&quot;,</span><br><span class="line">      &quot;Deps&quot;: [</span><br><span class="line">         2,</span><br><span class="line">       .......</span><br><span class="line">         34</span><br><span class="line">      ],</span><br><span class="line">      &quot;Objdir&quot;: &quot;/var/folders/57/8f4zkqd54qn4f8c_btvcs9zc0000gn/T/go-build1635635154/b001/&quot;,</span><br><span class="line">      &quot;Target&quot;: &quot;/var/folders/57/8f4zkqd54qn4f8c_btvcs9zc0000gn/T/go-build1635635154/b001/exe/a.out&quot;,</span><br><span class="line">      &quot;Priority&quot;: 35,</span><br><span class="line">      &quot;Built&quot;: &quot;/var/folders/57/8f4zkqd54qn4f8c_btvcs9zc0000gn/T/go-build1635635154/b001/exe/a.out&quot;,</span><br><span class="line">      &quot;ActionID&quot;: &quot;s3kSPuGqMFL1ltXka1-1&quot;,</span><br><span class="line">      &quot;BuildID&quot;: &quot;s3kSPuGqMFL1ltXka1-1/7T8ELBT1aC0tc7iktmm4/zG8NbUygi2kJFAzeDqMj/EQ04B5akVd2353iztOUr&quot;,</span><br><span class="line">      &quot;TimeReady&quot;: &quot;2021-11-13T22:49:45.98116+08:00&quot;,</span><br><span class="line">      &quot;TimeStart&quot;: &quot;2021-11-13T22:49:45.981173+08:00&quot;,</span><br><span class="line">      &quot;TimeDone&quot;: &quot;2021-11-13T22:49:46.10052+08:00&quot;,</span><br><span class="line">      &quot;Cmd&quot;: [</span><br><span class="line">         &quot;/Users/admin/biturd/code-knowledge/源码学习/Go/go/pkg/tool/darwin_arm64/link -o /var/folders/57/8f4zkqd54qn4f8c_btvcs9zc0000gn/T/go-build1635635154/b001/exe/a.out -importcfg /var/folders/57/8f4zkqd54qn4f8c_btvcs9zc0000gn/T/go-build1635635154/b001/importcfg.link -buildmode=exe -buildid=s3kSPuGqMFL1ltXka1-1/7T8ELBT1aC0tc7iktmm4/zG8NbUygi2kJFAzeDqMj/s3kSPuGqMFL1ltXka1-1 -extld=clang /var/folders/57/8f4zkqd54qn4f8c_btvcs9zc0000gn/T/go-build1635635154/b001/_pkg_.a&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;CmdReal&quot;: 99474959,</span><br><span class="line">      &quot;CmdUser&quot;: 74461000,</span><br><span class="line">      &quot;CmdSys&quot;: 11050000</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;ID&quot;: 2,</span><br><span class="line">      &quot;Mode&quot;: &quot;build&quot;,</span><br><span class="line">      &quot;Package&quot;: &quot;command-line-arguments&quot;,</span><br><span class="line">      &quot;Deps&quot;: [</span><br><span class="line">         3,</span><br><span class="line">         4,</span><br><span class="line">         5,</span><br><span class="line">         35</span><br><span class="line">      ],</span><br><span class="line">      &quot;Objdir&quot;: &quot;/var/folders/57/8f4zkqd54qn4f8c_btvcs9zc0000gn/T/go-build1635635154/b001/&quot;,</span><br><span class="line">      &quot;Priority&quot;: 34,</span><br><span class="line">      &quot;NeedBuild&quot;: true,</span><br><span class="line">      &quot;ActionID&quot;: &quot;7T8ELBT1aC0tc7iktmm4&quot;,</span><br><span class="line">      &quot;BuildID&quot;: &quot;7T8ELBT1aC0tc7iktmm4/zG8NbUygi2kJFAzeDqMj&quot;,</span><br><span class="line">      &quot;TimeReady&quot;: &quot;2021-11-13T22:49:45.964123+08:00&quot;,</span><br><span class="line">      &quot;TimeStart&quot;: &quot;2021-11-13T22:49:45.964128+08:00&quot;,</span><br><span class="line">      &quot;TimeDone&quot;: &quot;2021-11-13T22:49:45.981158+08:00&quot;,</span><br><span class="line">      &quot;Cmd&quot;: [</span><br><span class="line">         &quot;/Users/admin/biturd/code-knowledge/源码学习/Go/go/pkg/tool/darwin_arm64/compile -o /var/folders/57/8f4zkqd54qn4f8c_btvcs9zc0000gn/T/go-build1635635154/b001/_pkg_.a -trimpath \&quot;/var/folders/57/8f4zkqd54qn4f8c_btvcs9zc0000gn/T/go-build1635635154/b001=\u003e\&quot; -shared -p main -lang=go1.16 -complete -buildid 7T8ELBT1aC0tc7iktmm4/7T8ELBT1aC0tc7iktmm4 -goversion go1.16.9 -D _/Users/admin/biturd/code-knowledge/源码学习/Go/go/biturd/print -importcfg /var/folders/57/8f4zkqd54qn4f8c_btvcs9zc0000gn/T/go-build1635635154/b001/importcfg -pack /Users/admin/biturd/code-knowledge/源码学习/Go/go/biturd/print/print.go /var/folders/57/8f4zkqd54qn4f8c_btvcs9zc0000gn/T/go-build1635635154/b001/_gomod_.go&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;CmdReal&quot;: 13654375,</span><br><span class="line">      &quot;CmdUser&quot;: 4983000,</span><br><span class="line">      &quot;CmdSys&quot;: 4563000</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;ID&quot;: 3,</span><br><span class="line">      &quot;Mode&quot;: &quot;build&quot;,</span><br><span class="line">      &quot;Package&quot;: &quot;fmt&quot;,</span><br><span class="line">      &quot;Deps&quot;: [</span><br><span class="line">         6,</span><br><span class="line">         .........</span><br><span class="line">         14</span><br><span class="line">      ],</span><br><span class="line">      &quot;Objdir&quot;: &quot;/var/folders/57/8f4zkqd54qn4f8c_btvcs9zc0000gn/T/go-build1635635154/b002/&quot;,</span><br><span class="line">      &quot;Priority&quot;: 32,</span><br><span class="line">      &quot;NeedBuild&quot;: true,</span><br><span class="line">      &quot;ActionID&quot;: &quot;k_-3MKKPQcoJhVBcf-tD&quot;,</span><br><span class="line">      &quot;BuildID&quot;: &quot;k_-3MKKPQcoJhVBcf-tD/VyKAvsHRPs5gK-4oxWx_&quot;,</span><br><span class="line">      &quot;TimeReady&quot;: &quot;2021-11-13T22:49:45.963446+08:00&quot;,</span><br><span class="line">      &quot;TimeStart&quot;: &quot;2021-11-13T22:49:45.963451+08:00&quot;,</span><br><span class="line">      &quot;TimeDone&quot;: &quot;2021-11-13T22:49:45.964121+08:00&quot;,</span><br><span class="line">      &quot;Cmd&quot;: null</span><br><span class="line">   &#125;,</span><br><span class="line">   ........</span><br><span class="line">   &#123;</span><br><span class="line">&quot;ID&quot;: 35,</span><br><span class="line">&quot;Mode&quot;: &quot;nop&quot;,</span><br><span class="line">&quot;Package&quot;: &quot;&quot;,</span><br><span class="line">&quot;Deps&quot;: [</span><br><span class="line">3,</span><br><span class="line">......</span><br><span class="line">34</span><br><span class="line">],</span><br><span class="line">&quot;Priority&quot;: 33,</span><br><span class="line">&quot;TimeReady&quot;: &quot;2021-11-13T22:49:45.964121+08:00&quot;,</span><br><span class="line">&quot;TimeStart&quot;: &quot;2021-11-13T22:49:45.964123+08:00&quot;,</span><br><span class="line">&quot;TimeDone&quot;: &quot;2021-11-13T22:49:45.964123+08:00&quot;,</span><br><span class="line">&quot;Cmd&quot;: null</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;ID&quot;: 36,</span><br><span class="line">&quot;Mode&quot;: &quot;built-in package&quot;,</span><br><span class="line">&quot;Package&quot;: &quot;unsafe&quot;,</span><br><span class="line">&quot;Objdir&quot;: &quot;/var/folders/57/8f4zkqd54qn4f8c_btvcs9zc0000gn/T/go-build1635635154/b006/&quot;,</span><br><span class="line">&quot;NeedBuild&quot;: true,</span><br><span class="line">&quot;TimeReady&quot;: &quot;2021-11-13T22:49:45.915029+08:00&quot;,</span><br><span class="line">&quot;TimeStart&quot;: &quot;2021-11-13T22:49:45.915053+08:00&quot;,</span><br><span class="line">&quot;TimeDone&quot;: &quot;2021-11-13T22:49:45.915053+08:00&quot;,</span><br><span class="line">&quot;Cmd&quot;: null</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>参考链接：<br><a href="https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-compile-intro/">https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-compile-intro/</a></p>]]></content>
      
      
      <categories>
          
          <category> common </category>
          
      </categories>
      
      
        <tags>
            
            <tag> common </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅入不出设计模式---1、概览</title>
      <link href="/2024/11/01/qian-ru-bu-chu-she-ji-mo-shi-1-gai-lan/"/>
      <url>/2024/11/01/qian-ru-bu-chu-she-ji-mo-shi-1-gai-lan/</url>
      
        <content type="html"><![CDATA[<p>﻿@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h2 id="1-设计模式分类"><a href="#1-设计模式分类" class="headerlink" title="1. 设计模式分类"></a>1. 设计模式分类</h2><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-data/20241101161201_56bb1c43-bb5e-4997-be01-16ca73920a1d.png" alt="在这里插入图片描述"></p><ul><li>从范围上分为两类：<ol><li>类[通过对象关系建立，编译时就确定下来的] (几乎所有模式都用了继承，所以类模式只指那些集中于处理类间关系的模式)</li><li>对象[在运行时可以变化，更具有动态性]</li></ol></li><li>从使用场景分为三类：<ol><li>创建型[类模式将对象的部分创建工作延迟到子类，对象模式将对象的部分创建延迟到另一个对象中]、</li><li>结构型[类模式使用继承组合类，对象模式描述了对象的组装方式]、</li><li>行为型[类模式使用继承描述算法和控制流，对象模式描述了一组对象怎样协作完成单个对象无法完成的任务]</li></ol></li></ul><h2 id="2-设计模式之间的关系"><a href="#2-设计模式之间的关系" class="headerlink" title="2. 设计模式之间的关系"></a>2. 设计模式之间的关系</h2><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-data/20241101161204_27b838b3-3beb-4b09-b618-90e6e294bfd6.png" alt="在这里插入图片描述"></p><h2 id="3-概括设计模式【灵活的方面】⭐️"><a href="#3-概括设计模式【灵活的方面】⭐️" class="headerlink" title="3. 概括设计模式【灵活的方面】⭐️"></a>3. 概括设计模式【灵活的方面】⭐️</h2><p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-data/20241101161208_04112087-6a9a-4514-98e6-5b41679c6d97.png" alt="在这里插入图片描述"></p><h2 id="4-个人的总结"><a href="#4-个人的总结" class="headerlink" title="4.个人的总结"></a>4.个人的总结</h2><p>晚上回来再总结。。。</p>]]></content>
      
      
      <categories>
          
          <category> common </category>
          
      </categories>
      
      
        <tags>
            
            <tag> common </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clickhouse运维篇（三）：生产环境一键生成配置并快速部署ck集群</title>
      <link href="/2024/11/01/clickhouse-yun-wei-pian-san-sheng-chan-huan-jing-yi-jian-sheng-cheng-pei-zhi-bing-kuai-su-bu-shu-ck-ji-qun/"/>
      <url>/2024/11/01/clickhouse-yun-wei-pian-san-sheng-chan-huan-jing-yi-jian-sheng-cheng-pei-zhi-bing-kuai-su-bu-shu-ck-ji-qun/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Bit-urd/image-cloud/refs/heads/master/image-data/20241101160155_8988bcbf-07f4-426a-ba2b-bac94dfcd3bf.png" alt="请添加图片描述"></p><blockquote><p>前提条件：先了解集群搭建流程是什么样，需要改哪些配置，有哪些环境，这个文章目的是简化部署。 </p></blockquote><p><a href="https://blog.csdn.net/qq_42873554/article/details/142646374">clickhouse运维篇（一）：docker-compose 快速部署clickhouse集群</a><br><a href="https://blog.csdn.net/qq_42873554/article/details/143368665?sharetype=blogdetail&sharerId=143368665&sharerefer=PC&sharesource=qq_42873554&spm=1011.2480.3001.8118">clickhouse运维篇（二）：多机器手动部署ck集群</a></p><h1 id="项目目录解析："><a href="#项目目录解析：" class="headerlink" title="项目目录解析："></a>项目目录解析：</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> $ tree .</span><br><span class="line">.</span><br><span class="line">├── cluster.conf   <span class="comment">#集群配置，  集群包含哪些机器、端口分别为多少</span></span><br><span class="line">├── config  </span><br><span class="line">│   ├── config_node1.xml  <span class="comment"># 生成的ck节点配置文件</span></span><br><span class="line">│   ├── config_node2.xml</span><br><span class="line">│   ├── config_template.xml  <span class="comment"># config模版</span></span><br><span class="line">│   ├── users_node1.xml     <span class="comment"># 生成的ck节点用户配置文件</span></span><br><span class="line">│   ├── users_node2.xml</span><br><span class="line">│   └── users_template.xml   <span class="comment"># users模版</span></span><br><span class="line">├── dep   <span class="comment">#下面包含需要的远程依赖， zookeeper、clickhouse、jdk，根据自己的需求更改</span></span><br><span class="line">├── gen_cluster_config.sh  </span><br><span class="line">├── gen_login_cmd.sh</span><br><span class="line">├── install.conf  <span class="comment"># 远程登录的主机conf，需要在跳板机或者中间机器上去ssh、scp使用</span></span><br><span class="line">└── main.sh   <span class="comment">#启动入口</span></span><br></pre></td></tr></table></figure><h1 id="1、main-sh"><a href="#1、main-sh" class="headerlink" title="1、main.sh"></a>1、main.sh</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CUR_FOLDER=$(<span class="built_in">cd</span> <span class="string">&quot;/Users/admin/scripts/my_app/ckcluster&quot;</span>;<span class="built_in">pwd</span>)</span><br><span class="line"></span><br><span class="line">. <span class="variable">$&#123;CUR_FOLDER&#125;</span>/cluster.conf</span><br><span class="line">. <span class="variable">$&#123;CUR_FOLDER&#125;</span>/gen_cluster_config.sh</span><br><span class="line">. <span class="variable">$&#123;CUR_FOLDER&#125;</span>/gen_login_cmd.sh</span><br><span class="line"></span><br><span class="line">CONFIG_FOLDER=<span class="string">&quot;<span class="variable">$&#123;CUR_FOLDER&#125;</span>/config&quot;</span></span><br><span class="line">DEP_FOLDER=<span class="string">&quot;<span class="variable">$&#123;CUR_FOLDER&#125;</span>/dep&quot;</span></span><br><span class="line">TEMPLATE_FILE=<span class="string">&quot;<span class="variable">$&#123;CONFIG_FOLDER&#125;</span>/config_template.xml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">&quot;<span class="variable">$CONFIG_FOLDER</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$CONFIG_FOLDER</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">&quot;<span class="variable">$DEP_FOLDER</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$DEP_FOLDER</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">zk_index=1</span><br><span class="line"><span class="comment"># 首先读取所有节点信息并根据 shard 进行分组</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    host_var=<span class="string">&quot;zk_node_<span class="variable">$&#123;zk_index&#125;</span>_host&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查所有变量是否为空，若有一个为空则跳出循环</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;!host_var&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment"># 远程安装jdk、zookeeper</span></span><br><span class="line"></span><br><span class="line">    install_path=$(get_install_path <span class="variable">$&#123;!host_var&#125;</span>)</span><br><span class="line">    <span class="built_in">echo</span> $(get_scp_command <span class="variable">$&#123;!host_var&#125;</span> . <span class="string">&quot;<span class="variable">$&#123;DEP_FOLDER&#125;</span>/jdk-8u202-nonroot.tar.gz <span class="variable">$&#123;DEP_FOLDER&#125;</span>/apache-zookeeper-3.7.2-bin.tar.gz&quot;</span>)</span><br><span class="line">    `get_scp_command <span class="variable">$&#123;!host_var&#125;</span> . <span class="string">&quot;<span class="variable">$&#123;DEP_FOLDER&#125;</span>/jdk-8u202-nonroot.tar.gz <span class="variable">$&#123;DEP_FOLDER&#125;</span>/apache-zookeeper-3.7.2-bin.tar.gz&quot;</span>`</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> $(get_ssh_command <span class="variable">$&#123;!host_var&#125;</span> <span class="string">&quot;cd <span class="variable">$&#123;install_path&#125;</span>;tar -xzvf <span class="variable">$&#123;install_path&#125;</span>/jdk-8u202-nonroot.tar.gz&quot;</span>)</span><br><span class="line">    <span class="built_in">echo</span> $(get_ssh_command <span class="variable">$&#123;!host_var&#125;</span> <span class="string">&quot;cd <span class="variable">$&#123;install_path&#125;</span>;tar -xzvf <span class="variable">$&#123;install_path&#125;</span>/apache-zookeeper-3.7.2-bin.tar.gz&quot;</span>)</span><br><span class="line">    `get_ssh_command <span class="variable">$&#123;!host_var&#125;</span> <span class="string">&quot;cd <span class="variable">$&#123;install_path&#125;</span>;tar -xzvf <span class="variable">$&#123;install_path&#125;</span>/jdk-8u202-nonroot.tar.gz&quot;</span>`</span><br><span class="line">    `get_ssh_command <span class="variable">$&#123;!host_var&#125;</span> <span class="string">&quot;cd <span class="variable">$&#123;install_path&#125;</span>;tar -xzvf <span class="variable">$&#123;install_path&#125;</span>/apache-zookeeper-3.7.2-bin.tar.gz&quot;</span>`</span><br><span class="line">    </span><br><span class="line">    zk_index=$((zk_index + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成ck集群配置文件</span></span><br><span class="line">gen_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程安装clickhouse</span></span><br><span class="line">ck_index=1</span><br><span class="line"><span class="comment"># 首先读取所有节点信息并根据 shard 进行分组</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    host_var=<span class="string">&quot;ck_node_<span class="variable">$&#123;ck_index&#125;</span>_host&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查所有变量是否为空，若有一个为空则跳出循环</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;!host_var&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="comment">#     &lt;users_config&gt;/opt/appaduudit/my_app-2.4/clickhouse-23.4.2.9/ck_node_1/config/users_node.xml&lt;/users_config&gt;    </span></span><br><span class="line">    install_path=$(get_install_path <span class="variable">$&#123;!host_var&#125;</span>)    </span><br><span class="line">    `get_scp_command <span class="variable">$&#123;!host_var&#125;</span> . <span class="string">&quot;<span class="variable">$&#123;DEP_FOLDER&#125;</span>/clickhouse-23.4.2.9.tar.gz&quot;</span>`</span><br><span class="line">    <span class="built_in">echo</span> $(get_ssh_command <span class="variable">$&#123;!host_var&#125;</span> <span class="string">&quot;cd <span class="variable">$&#123;install_path&#125;</span>;tar -xzvf <span class="variable">$&#123;install_path&#125;</span>/clickhouse-23.4.2.9.tar.gz&quot;</span>)</span><br><span class="line"></span><br><span class="line">    NODE_CK_PATH=<span class="string">&quot;<span class="variable">$&#123;BASE_CK_PATH&#125;</span>/ck_node_<span class="variable">$&#123;ck_index&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> $(get_scp_command <span class="variable">$&#123;!host_var&#125;</span> <span class="variable">$&#123;NODE_CK_PATH&#125;</span>/config  <span class="string">&quot;<span class="variable">$&#123;CONFIG_FOLDER&#125;</span>/user_node<span class="variable">$&#123;ck_index&#125;</span>.xml&quot;</span>)</span><br><span class="line">    `get_scp_command <span class="variable">$&#123;!host_var&#125;</span> <span class="variable">$&#123;NODE_CK_PATH&#125;</span>/config <span class="string">&quot;<span class="variable">$&#123;CONFIG_FOLDER&#125;</span>/config_node<span class="variable">$&#123;ck_index&#125;</span>.xml&quot;</span>`</span><br><span class="line">    `get_scp_command <span class="variable">$&#123;!host_var&#125;</span> <span class="variable">$&#123;NODE_CK_PATH&#125;</span>/config  <span class="string">&quot;<span class="variable">$&#123;CONFIG_FOLDER&#125;</span>/users_node<span class="variable">$&#123;ck_index&#125;</span>.xml&quot;</span>`</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> $(get_ssh_command <span class="variable">$&#123;!host_var&#125;</span> <span class="string">&quot;<span class="variable">$&#123;install_path&#125;</span>/clickhouse-23.4.2.9.tar.gz/bin/clickhouse server --config-file  <span class="variable">$&#123;install_path&#125;</span>/config_node<span class="variable">$&#123;ck_index&#125;</span>.xml&quot;</span>)</span><br><span class="line">    `get_ssh_command <span class="variable">$&#123;!host_var&#125;</span> <span class="string">&quot;<span class="variable">$&#123;install_path&#125;</span>/clickhouse-23.4.2.9.tar.gz/bin/clickhouse server --config-file  <span class="variable">$&#123;install_path&#125;</span>/config_node<span class="variable">$&#123;ck_index&#125;</span>.xml&quot;</span>`    </span><br><span class="line">    </span><br><span class="line">    ck_index=$((ck_index + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="2、cluster-conf"><a href="#2、cluster-conf" class="headerlink" title="2、cluster.conf"></a>2、cluster.conf</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line">target_install_path=<span class="string">&quot;/opt/app/ck_cluster&quot;</span></span><br><span class="line">BASE_CK_PATH=<span class="string">&quot;/opt/app/my_app-2.4/clickhouse-23.4.2.9&quot;</span></span><br><span class="line">CK_CLUSTER_NAME=<span class="string">&quot;my_ck_cluster_test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#port为zk的clientPort</span></span><br><span class="line">zk_node_1_host=172.168.1.206</span><br><span class="line">zk_node_1_port=8551</span><br><span class="line"></span><br><span class="line">zk_node_2_host=172.168.1.207</span><br><span class="line">zk_node_2_port=8551</span><br><span class="line"></span><br><span class="line">zk_node_3_host=172.168.1.208</span><br><span class="line">zk_node_3_port=8551</span><br><span class="line"></span><br><span class="line">ck_node_1_host=172.168.1.206</span><br><span class="line">ck_node_1_tcp_port=8601</span><br><span class="line">ck_node_1_http_port=8602</span><br><span class="line">ck_node_1_interserver_http_port=8603</span><br><span class="line">ck_node_1_user=default</span><br><span class="line">ck_node_1_password=password</span><br><span class="line">ck_node_1_shard=01</span><br><span class="line">ck_node_1_replica=replica_63</span><br><span class="line"></span><br><span class="line">ck_node_2_host=172.168.1.207</span><br><span class="line">ck_node_2_tcp_port=8611</span><br><span class="line">ck_node_2_http_port=8612</span><br><span class="line">ck_node_2_interserver_http_port=8613</span><br><span class="line">ck_node_2_user=default</span><br><span class="line">ck_node_2_password=password</span><br><span class="line">ck_node_2_shard=02</span><br><span class="line">ck_node_2_replica=replica_63</span><br><span class="line"></span><br><span class="line"><span class="comment">#ck_node_3_host=ck_host_3</span></span><br><span class="line"><span class="comment">#ck_node_3_tcp_port=ck_tcp_port_3</span></span><br><span class="line"><span class="comment">#ck_node_3_http_port=ck_http_port_3</span></span><br><span class="line"><span class="comment">#ck_node_3_interserver_http_port=ck_interserver_http_port_3</span></span><br><span class="line"><span class="comment">#ck_node_3_user=user3</span></span><br><span class="line"><span class="comment">#ck_node_3_password=password3</span></span><br><span class="line"><span class="comment">#ck_node_3_shard=02</span></span><br><span class="line"><span class="comment">#ck_node_3_replica=replica_209</span></span><br></pre></td></tr></table></figure><h1 id="3、install-conf"><a href="#3、install-conf" class="headerlink" title="3、install.conf"></a>3、install.conf</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh.172.168.1.206=root:app:/opt/app/ck_cluste</span><br><span class="line">ssh.172.168.1.207=admin:adminpass:/opt/app/ck_cluste</span><br><span class="line">ssh.172.168.1.208=admin:adminpass:/opt/app/ck_cluste</span><br></pre></td></tr></table></figure><h1 id="4、gen-login-cmd-sh"><a href="#4、gen-login-cmd-sh" class="headerlink" title="4、gen_login_cmd.sh"></a>4、gen_login_cmd.sh</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /Users/admin/scripts/my_app/ckcluster</span><br><span class="line"><span class="comment"># 读取配置文件并解析</span></span><br><span class="line">CONFIG_FILE=<span class="string">&quot;install.conf&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -A HOSTS</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> IFS=<span class="string">&#x27;=&#x27;</span> <span class="built_in">read</span> -r key user_password || [[ -n <span class="string">&quot;<span class="variable">$key</span>&quot;</span> ]]; <span class="keyword">do</span></span><br><span class="line">    key=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$key</span>&quot;</span> | xargs)</span><br><span class="line">    user_password=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$user_password</span>&quot;</span> | xargs)</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$key</span> == ssh.* ]]; <span class="keyword">then</span></span><br><span class="line">        host=<span class="variable">$&#123;key#ssh.&#125;</span></span><br><span class="line">        HOSTS[<span class="string">&quot;<span class="variable">$host</span>&quot;</span>]=<span class="string">&quot;<span class="variable">$user_password</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span> &lt; <span class="string">&quot;<span class="variable">$CONFIG_FILE</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 SSH 命令</span></span><br><span class="line"><span class="function"><span class="title">get_ssh_command</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> host=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">local</span> cmd=<span class="variable">$2</span></span><br><span class="line">    <span class="built_in">local</span> user_password=<span class="variable">$&#123;HOSTS[&quot;$host&quot;]&#125;</span></span><br><span class="line">    IFS=<span class="string">&#x27;:&#x27;</span> <span class="built_in">read</span> -r user password install_path&lt;&lt;&lt; <span class="string">&quot;<span class="variable">$user_password</span>&quot;</span></span><br><span class="line">    <span class="comment"># echo &quot;sshpass -p &#x27;$password&#x27; ssh $user@$host $cmd&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;sshpass -p &#x27;<span class="variable">$password</span>&#x27; ssh <span class="variable">$user</span>@<span class="variable">$host</span> \&quot;<span class="variable">$cmd</span>\&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 SCP 命令</span></span><br><span class="line"><span class="function"><span class="title">get_scp_command</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> host=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">local</span> extra_dir=<span class="variable">$2</span></span><br><span class="line">    <span class="built_in">local</span> files=<span class="variable">$3</span>    </span><br><span class="line">    <span class="built_in">local</span> user_password=<span class="variable">$&#123;HOSTS[$host]&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># root:idss:/opt/idss/ck_cluste</span></span><br><span class="line">    IFS=<span class="string">&#x27;:&#x27;</span> <span class="built_in">read</span> -r user password install_path&lt;&lt;&lt; <span class="string">&quot;<span class="variable">$user_password</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$extra_dir</span>&quot;</span> != <span class="string">&quot;.&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        install_path=<span class="variable">$extra_dir</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    mkdir_cmd=$(get_ssh_command <span class="variable">$host</span> <span class="string">&quot;mkdir -p <span class="variable">$install_path</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">eval</span> <span class="string">&quot;<span class="variable">$mkdir_cmd</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;sshpass -p &#x27;<span class="variable">$password</span>&#x27; scp -r <span class="variable">$files</span> <span class="variable">$user</span>@<span class="variable">$host</span>:<span class="variable">$install_path</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_install_path</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> host=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">local</span> user_password=<span class="variable">$&#123;HOSTS[$host]&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># root:idss:/opt/idss/ck_cluste</span></span><br><span class="line">    IFS=<span class="string">&#x27;:&#x27;</span> <span class="built_in">read</span> -r user password install_path&lt;&lt;&lt; <span class="string">&quot;<span class="variable">$user_password</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$install_path</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># ssh_command=$(get_scp_command &quot;10.87.102.206&quot; &quot;/Users/admin/scripts/my_app/ckcluster/dep/jdk-8u202-nonroot.tar.gz /Users/admin/scripts/my_app/ckcluster/dep/apache-zookeeper-3.7.2-bin.tar.gz&quot;)</span></span><br><span class="line"><span class="comment"># echo $ssh_command</span></span><br><span class="line"><span class="comment"># scp_command=$(get_ssh_command &quot;10.87.102.206&quot; &quot;ls /opt/idss/ck_cluste&quot;)</span></span><br><span class="line"><span class="comment"># echo $scp_command</span></span><br><span class="line"><span class="comment"># `$scp_command`</span></span><br></pre></td></tr></table></figure><h1 id="5、gen-cluster-config-sh"><a href="#5、gen-cluster-config-sh" class="headerlink" title="5、gen_cluster_config.sh"></a>5、gen_cluster_config.sh</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 定义基础路径和模板文件名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">gen_config</span></span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 zookeeper 配置</span></span><br><span class="line">ZOOKEEPER_CONFIG=<span class="string">&quot;&lt;zookeeper&gt;\n&quot;</span></span><br><span class="line"><span class="comment"># 循环遍历 zk_node_*_host 和 zk_node_*_port 变量</span></span><br><span class="line">zk_index=1</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    host_var=<span class="string">&quot;zk_node_<span class="variable">$&#123;zk_index&#125;</span>_host&quot;</span></span><br><span class="line">    port_var=<span class="string">&quot;zk_node_<span class="variable">$&#123;zk_index&#125;</span>_port&quot;</span></span><br><span class="line">    <span class="comment"># 检查变量是否已定义，如果未定义则跳出循环</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;!host_var&#125;</span>&quot;</span> ] || [ -z <span class="string">&quot;<span class="variable">$&#123;!port_var&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    </span><br><span class="line">    ZOOKEEPER_CONFIG+=<span class="string">&quot;    &lt;node index=\&quot;<span class="variable">$&#123;zk_index&#125;</span>\&quot;&gt;\n&quot;</span></span><br><span class="line">    ZOOKEEPER_CONFIG+=<span class="string">&quot;        &lt;host&gt;<span class="variable">$&#123;!host_var&#125;</span>&lt;/host&gt;\n&quot;</span></span><br><span class="line">    ZOOKEEPER_CONFIG+=<span class="string">&quot;        &lt;port&gt;<span class="variable">$&#123;!port_var&#125;</span>&lt;/port&gt;\n&quot;</span></span><br><span class="line">    ZOOKEEPER_CONFIG+=<span class="string">&quot;    &lt;/node&gt;\n&quot;</span></span><br><span class="line">    </span><br><span class="line">    zk_index=$((zk_index + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">ZOOKEEPER_CONFIG+=<span class="string">&quot;&lt;/zookeeper&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 remote_servers 配置</span></span><br><span class="line"><span class="built_in">declare</span> -A shard_nodes config_content</span><br><span class="line"></span><br><span class="line">ck_index=1</span><br><span class="line"><span class="comment"># 首先读取所有节点信息并根据 shard 进行分组</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    host_var=<span class="string">&quot;ck_node_<span class="variable">$&#123;ck_index&#125;</span>_host&quot;</span></span><br><span class="line">    tcp_port_var=<span class="string">&quot;ck_node_<span class="variable">$&#123;ck_index&#125;</span>_tcp_port&quot;</span></span><br><span class="line">    http_port_var=<span class="string">&quot;ck_node_<span class="variable">$&#123;ck_index&#125;</span>_http_port&quot;</span></span><br><span class="line">    interserver_port_var=<span class="string">&quot;ck_node_<span class="variable">$&#123;ck_index&#125;</span>_interserver_http_port&quot;</span></span><br><span class="line">    user_var=<span class="string">&quot;ck_node_<span class="variable">$&#123;ck_index&#125;</span>_user&quot;</span></span><br><span class="line">    password_var=<span class="string">&quot;ck_node_<span class="variable">$&#123;ck_index&#125;</span>_password&quot;</span></span><br><span class="line">    shard_var=<span class="string">&quot;ck_node_<span class="variable">$&#123;ck_index&#125;</span>_shard&quot;</span></span><br><span class="line">    replica_var=<span class="string">&quot;ck_node_<span class="variable">$&#123;ck_index&#125;</span>_replica&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查所有变量是否为空，若有一个为空则跳出循环</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;!host_var&#125;</span>&quot;</span> ] || \</span><br><span class="line">       [ -z <span class="string">&quot;<span class="variable">$&#123;!tcp_port_var&#125;</span>&quot;</span> ] || \</span><br><span class="line">       [ -z <span class="string">&quot;<span class="variable">$&#123;!http_port_var&#125;</span>&quot;</span> ] || \</span><br><span class="line">       [ -z <span class="string">&quot;<span class="variable">$&#123;!interserver_port_var&#125;</span>&quot;</span> ] || \</span><br><span class="line">       [ -z <span class="string">&quot;<span class="variable">$&#123;!user_var&#125;</span>&quot;</span> ] || \</span><br><span class="line">       [ -z <span class="string">&quot;<span class="variable">$&#123;!password_var&#125;</span>&quot;</span> ] || \</span><br><span class="line">       [ -z <span class="string">&quot;<span class="variable">$&#123;!shard_var&#125;</span>&quot;</span> ] || \</span><br><span class="line">       [ -z <span class="string">&quot;<span class="variable">$&#123;!replica_var&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将当前节点信息存入以 shard 为 key 的数组</span></span><br><span class="line">    shard_nodes[<span class="string">&quot;<span class="variable">$&#123;!shard_var&#125;</span>&quot;</span>]+=$(<span class="built_in">cat</span> &lt;&lt;-<span class="string">NODE</span></span><br><span class="line"><span class="string">            &lt;replica&gt;</span></span><br><span class="line"><span class="string">                &lt;host&gt;$&#123;!host_var&#125;&lt;/host&gt;</span></span><br><span class="line"><span class="string">                &lt;port&gt;$&#123;!tcp_port_var&#125;&lt;/port&gt;</span></span><br><span class="line"><span class="string">                &lt;user&gt;$&#123;!user_var&#125;&lt;/user&gt;</span></span><br><span class="line"><span class="string">                &lt;password&gt;$&#123;!password_var&#125;&lt;/password&gt;</span></span><br><span class="line"><span class="string">            &lt;/replica&gt;\n</span></span><br><span class="line"><span class="string">NODE</span></span><br><span class="line">    )</span><br><span class="line">    NODE_CK_PATH=<span class="string">&quot;<span class="variable">$&#123;BASE_CK_PATH&#125;</span>/ck_node_<span class="variable">$&#123;ck_index&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    config_template=$(<span class="built_in">cat</span> <span class="variable">$&#123;CONFIG_FOLDER&#125;</span>/config_template.xml)</span><br><span class="line">    config_template=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$config_template</span>&quot;</span> | sed <span class="string">&quot;s|\$&#123;BASE_CK_PATH&#125;|<span class="variable">$&#123;NODE_CK_PATH&#125;</span>|g&quot;</span>)</span><br><span class="line">    config_template=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$config_template</span>&quot;</span> | sed <span class="string">&quot;s|\$&#123;HTTP_PORT&#125;|<span class="variable">$&#123;!http_port_var&#125;</span>|g&quot;</span>)</span><br><span class="line">    config_template=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$config_template</span>&quot;</span> | sed <span class="string">&quot;s|\$&#123;TCP_PORT&#125;|<span class="variable">$&#123;!tcp_port_var&#125;</span>|g&quot;</span>)</span><br><span class="line">    config_template=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$config_template</span>&quot;</span> | sed <span class="string">&quot;s|\$&#123;INTERSERVER_HTTP_PORT&#125;|<span class="variable">$&#123;!interserver_port_var&#125;</span>|g&quot;</span>)</span><br><span class="line">    config_template=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$config_template</span>&quot;</span> | sed <span class="string">&quot;s|\$&#123;MACROS_SHARD&#125;|<span class="variable">$&#123;!shard_var&#125;</span>|g&quot;</span>)</span><br><span class="line">    config_template=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$config_template</span>&quot;</span> | sed <span class="string">&quot;s|\$&#123;MACROS_REPLICA&#125;|<span class="variable">$&#123;!replica_var&#125;</span>|g&quot;</span>)</span><br><span class="line">    config_template=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$config_template</span>&quot;</span> | sed <span class="string">&quot;s|\$&#123;CK_PASSWORD&#125;|<span class="variable">$&#123;!password_var&#125;</span>|g&quot;</span>)    </span><br><span class="line">    config_template=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$config_template</span>&quot;</span> | sed <span class="string">&quot;s|\$&#123;ck_index&#125;|<span class="variable">$&#123;!ck_index&#125;</span>|g&quot;</span>)        </span><br><span class="line">    <span class="comment"># 将生成的配置内容存入字典</span></span><br><span class="line">    config_content[<span class="string">&quot;config_node<span class="variable">$&#123;ck_index&#125;</span>&quot;</span>]=<span class="string">&quot;<span class="variable">$config_template</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># users文件生成</span></span><br><span class="line">    users_template=$(<span class="built_in">cat</span> <span class="variable">$&#123;CONFIG_FOLDER&#125;</span>/users_template.xml)</span><br><span class="line">    users_template=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$users_template</span>&quot;</span> | sed <span class="string">&quot;s|\$&#123;CK_PASSWORD&#125;|<span class="variable">$&#123;!password_var&#125;</span>|g&quot;</span>)    </span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$users_template</span>&quot;</span> &gt; <span class="string">&quot;<span class="variable">$&#123;CONFIG_FOLDER&#125;</span>/users_node<span class="variable">$&#123;ck_index&#125;</span>.xml&quot;</span></span><br><span class="line">    ck_index=$((ck_index + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建最终的 XML 配置</span></span><br><span class="line">REMOTE_SERVERS_CONFIG=<span class="string">&quot;&lt;remote_servers&gt;\n&quot;</span></span><br><span class="line">REMOTE_SERVERS_CONFIG+=<span class="string">&quot;    &lt;<span class="variable">$&#123;CK_CLUSTER_NAME&#125;</span>&gt;\n&quot;</span></span><br><span class="line"><span class="keyword">for</span> shard <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;!shard_nodes[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    REMOTE_SERVERS_CONFIG+=<span class="string">&quot;        &lt;shard&gt;\n&quot;</span></span><br><span class="line">    REMOTE_SERVERS_CONFIG+=<span class="string">&quot;            &lt;internal_replication&gt;true&lt;/internal_replication&gt;  \n&quot;</span></span><br><span class="line">    REMOTE_SERVERS_CONFIG+=<span class="string">&quot;<span class="variable">$&#123;shard_nodes[$shard]&#125;</span>&quot;</span></span><br><span class="line">    REMOTE_SERVERS_CONFIG+=<span class="string">&quot;        &lt;/shard&gt;\n&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">REMOTE_SERVERS_CONFIG+=<span class="string">&quot;    &lt;/<span class="variable">$&#123;CK_CLUSTER_NAME&#125;</span>&gt;\n&quot;</span></span><br><span class="line">REMOTE_SERVERS_CONFIG+=<span class="string">&quot;&lt;/remote_servers&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态修改配置文件（插入 Zookeeper\CK集群 配置）</span></span><br><span class="line"><span class="keyword">for</span> node_config <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;!config_content[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;处理 <span class="variable">$node_config</span> ...&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建临时文件</span></span><br><span class="line">    temp_file=<span class="string">&quot;<span class="variable">$&#123;node_config&#125;</span>_tmp.xml&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;config_content[$node_config]&#125;</span>&quot;</span> &gt; <span class="string">&quot;<span class="variable">$temp_file</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    sed -i <span class="string">&#x27;&#x27;</span> <span class="string">&#x27;/&lt;\/yandex&gt;/d&#x27;</span> <span class="string">&quot;<span class="variable">$temp_file</span>&quot;</span></span><br><span class="line">    <span class="comment"># linux下为</span></span><br><span class="line">    <span class="comment"># sed -i &#x27;/&lt;\/yandex&gt;/d&#x27; &quot;$temp_file&quot;    </span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拼接 Zookeeper 和 Remote Servers 配置</span></span><br><span class="line">    combined_insert=<span class="string">&quot;<span class="variable">$&#123;ZOOKEEPER_CONFIG&#125;</span></span></span><br><span class="line"><span class="string"><span class="variable">$&#123;REMOTE_SERVERS_CONFIG&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$combined_insert</span>&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$temp_file</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&lt;/yandex&gt;&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$temp_file</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">mv</span> <span class="string">&quot;<span class="variable">$temp_file</span>&quot;</span> <span class="string">&quot;<span class="variable">$CONFIG_FOLDER</span>/<span class="variable">$&#123;node_config&#125;</span>.xml&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;生成 <span class="variable">$node_config</span> 完成: <span class="variable">$&#123;node_config&#125;</span>.xml&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6、config-template-xml"><a href="#6、config-template-xml" class="headerlink" title="6、config_template.xml"></a>6、config_template.xml</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span><br><span class="line">&lt;yandex&gt;</span><br><span class="line">    &lt;logger&gt;</span><br><span class="line">        &lt;level&gt;notice&lt;/level&gt;</span><br><span class="line">        &lt;<span class="built_in">log</span>&gt;<span class="variable">$&#123;BASE_CK_PATH&#125;</span>/log/clickhouse-server.log&lt;/log&gt;</span><br><span class="line">        &lt;errorlog&gt;<span class="variable">$&#123;BASE_CK_PATH&#125;</span>/log/clickhouse-server.err.log&lt;/errorlog&gt;</span><br><span class="line">        &lt;size&gt;1000M&lt;/size&gt;</span><br><span class="line">        &lt;count&gt;10&lt;/count&gt;</span><br><span class="line">    &lt;/logger&gt;</span><br><span class="line">    &lt;path&gt;<span class="variable">$&#123;BASE_CK_PATH&#125;</span>/data/&lt;/path&gt;</span><br><span class="line">    &lt;tmp_path&gt;<span class="variable">$&#123;BASE_CK_PATH&#125;</span>/tmp/&lt;/tmp_path&gt;</span><br><span class="line">    &lt;user_files_path&gt;<span class="variable">$&#123;BASE_CK_PATH&#125;</span>/data/user_files/&lt;/user_files_path&gt;</span><br><span class="line">    &lt;users_config&gt;<span class="variable">$&#123;BASE_CK_PATH&#125;</span>/config/users_node<span class="variable">$&#123;ck_index&#125;</span>.xml&lt;/users_config&gt;    </span><br><span class="line">    &lt;<span class="built_in">users</span>&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">            &lt;password&gt;<span class="variable">$&#123;CK_PASSWORD&#125;</span>&lt;/password&gt; &lt;!-- 空密码 --&gt;</span><br><span class="line">            &lt;networks&gt;</span><br><span class="line">                &lt;ip&gt;::/0&lt;/ip&gt; &lt;!-- 允许所有IP访问 --&gt;</span><br><span class="line">            &lt;/networks&gt;</span><br><span class="line">            &lt;profile&gt;default&lt;/profile&gt;</span><br><span class="line">            &lt;quota&gt;default&lt;/quota&gt;</span><br><span class="line">            &lt;access_management&gt;1&lt;/access_management&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">    &lt;/users&gt;    </span><br><span class="line">    &lt;default_profile&gt;default&lt;/default_profile&gt;</span><br><span class="line">    &lt;default_database&gt;default&lt;/default_database&gt;</span><br><span class="line">    &lt;http&gt;</span><br><span class="line">        &lt;port&gt;<span class="variable">$&#123;HTTP_PORT&#125;</span>&lt;/port&gt;</span><br><span class="line">        &lt;max_connections&gt;1024&lt;/max_connections&gt;</span><br><span class="line">        &lt;async_insert&gt;1&lt;/async_insert&gt;</span><br><span class="line">    &lt;/http&gt;</span><br><span class="line">    &lt;listen_host&gt;0.0.0.0&lt;/listen_host&gt;</span><br><span class="line">    &lt;listen_host&gt;::&lt;/listen_host&gt;</span><br><span class="line">    &lt;http_port&gt;<span class="variable">$&#123;HTTP_PORT&#125;</span>&lt;/http_port&gt;</span><br><span class="line">    &lt;tcp_port&gt;<span class="variable">$&#123;TCP_PORT&#125;</span>&lt;/tcp_port&gt;</span><br><span class="line">    &lt;interserver_http_port&gt;<span class="variable">$&#123;INTERSERVER_HTTP_PORT&#125;</span>&lt;/interserver_http_port&gt;</span><br><span class="line">    &lt;distributed_ddl&gt;</span><br><span class="line">        &lt;!-- Path <span class="keyword">in</span> ZooKeeper to queue with DDL queries --&gt;</span><br><span class="line">        &lt;path&gt;/clickhouse/task_queue/ddl&lt;/path&gt;</span><br><span class="line">    &lt;/distributed_ddl&gt;</span><br><span class="line"></span><br><span class="line">    &lt;macros&gt;</span><br><span class="line">        &lt;shard&gt;<span class="variable">$&#123;MACROS_SHARD&#125;</span>&lt;/shard&gt;</span><br><span class="line">        &lt;replica&gt;<span class="variable">$&#123;MACROS_REPLICA&#125;</span>&lt;/replica&gt;</span><br><span class="line">    &lt;/macros&gt;</span><br><span class="line">&lt;/yandex&gt;</span><br></pre></td></tr></table></figure><h1 id="7、users-template-xml"><a href="#7、users-template-xml" class="headerlink" title="7、users_template.xml"></a>7、users_template.xml</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span><br><span class="line">&lt;yandex&gt;</span><br><span class="line">    &lt;!-- Profiles of settings. --&gt;</span><br><span class="line">    &lt;profiles&gt;</span><br><span class="line">        &lt;!-- Default settings. --&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">            &lt;!-- Maximum memory usage <span class="keyword">for</span> processing single query, <span class="keyword">in</span> bytes. --&gt;</span><br><span class="line">            &lt;max_memory_usage&gt;10000000000&lt;/max_memory_usage&gt;</span><br><span class="line"></span><br><span class="line">            &lt;load_balancing&gt;random&lt;/load_balancing&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Profile that allows only <span class="built_in">read</span> queries. --&gt;</span><br><span class="line">        &lt;<span class="built_in">readonly</span>&gt;</span><br><span class="line">            &lt;<span class="built_in">readonly</span>&gt;1&lt;/readonly&gt;</span><br><span class="line">        &lt;/readonly&gt;</span><br><span class="line">    &lt;/profiles&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="built_in">users</span>&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">            &lt;password&gt;<span class="variable">$&#123;CK_PASSWORD&#125;</span>&lt;/password&gt; </span><br><span class="line">            &lt;networks&gt;</span><br><span class="line">                &lt;ip&gt;::/0&lt;/ip&gt; &lt;!-- 允许所有IP访问 --&gt;</span><br><span class="line">            &lt;/networks&gt;</span><br><span class="line">            &lt;profile&gt;default&lt;/profile&gt;</span><br><span class="line">            &lt;quota&gt;default&lt;/quota&gt;</span><br><span class="line">            &lt;access_management&gt;1&lt;/access_management&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">    &lt;/users&gt;    </span><br><span class="line">    </span><br><span class="line">    &lt;!-- Quotas. --&gt;</span><br><span class="line">    &lt;quotas&gt;</span><br><span class="line">        &lt;!-- Name of quota. --&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">            &lt;!-- Limits <span class="keyword">for</span> time interval. You could specify many intervals with different limits. --&gt;</span><br><span class="line">            &lt;interval&gt;</span><br><span class="line">                &lt;!-- Length of interval. --&gt;</span><br><span class="line">                &lt;duration&gt;3600&lt;/duration&gt;</span><br><span class="line">                &lt;distributed_product_mode&gt;allow&lt;/distributed_product_mode&gt;</span><br><span class="line">                &lt;!-- No limits. Just calculate resource usage <span class="keyword">for</span> time interval. --&gt;</span><br><span class="line">                &lt;queries&gt;0&lt;/queries&gt;</span><br><span class="line">                &lt;errors&gt;0&lt;/errors&gt;</span><br><span class="line">                &lt;result_rows&gt;0&lt;/result_rows&gt;</span><br><span class="line">                &lt;read_rows&gt;0&lt;/read_rows&gt;</span><br><span class="line">                &lt;execution_time&gt;0&lt;/execution_time&gt;</span><br><span class="line">            &lt;/interval&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">    &lt;/quotas&gt;</span><br><span class="line">&lt;/yandex&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> common </category>
          
      </categories>
      
      
        <tags>
            
            <tag> common </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
